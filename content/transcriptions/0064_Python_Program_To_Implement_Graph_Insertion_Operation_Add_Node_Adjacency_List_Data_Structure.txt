 Hello guys and welcome to Amolias Academy YouTube channel. We were discussing graph insertion operation and in the previous tutorial we wrote a function to add a new node to the graph and also we wrote a function to add an edge between given two vertices in the graph. Today in this tutorial I will write a function to add a node to the graph but using adjacency list representation. In the previous tutorial we used adjacency matrix representation. In the next tutorial we will use adjacency list representation to write a function to add a new node to the graph as well as to add an edge between given vertices in the graph. So today we will write a function to add a new node to the given graph using adjacency list representation. Here first we have an undirected unweighted graph and this is its adjacency list representation and in python we will use dictionaries for adjacency list representation. Here key of the dictionary is the nodes of the graph and value is the list of adjacent nodes. This is the list of adjacent node of A. This is the list of adjacent node of B. Now here what we need to do we want to perform add node operation that is we want to add new node to the graph. So we will use add node operation and here we need to add a new node for example f. To write the program for this operation first I need to create a dictionary. Here you can see we want to store the nodes of the graph as well as adjacency list of that nodes in the dictionary form and for that we need a dictionary first. So let's create a dictionary in a python file. First step is create a dictionary. Here I am taking the dictionary name as graph you can take any suitable name. Initially dictionary will be empty. Next let's define the function D E F followed by I will take the function name as add node like I did in the previous tutorial while writing a function to add node using adjacent semantics representation. Here we need a parameter that is node. We want to add a new node that's why we need this parameter. Here you can see while calling add node function here we will pass a node right we need to mention that here and inside the function body while adding a node to the graph the first step is we need to check whether the given node is already present in the graph or not. If the given node or vertex is already present in the graph then we won't add that to graph. We will just print a message like the node is already present in the graph. That's why here what you need to do is you need to check if v is the given node or vertex the new node in I will use membership operator I want to check v is present in the graph or not that's why I will use in membership operator graph. Here graph is a dictionary and key of the graph is nothing but the nodes of the graph vertices of the graph. So if I check if v in graph that means it will check whether the given node is present in the graph or not. If given node is already present then this condition becomes true. So I will print this message v is already present in graph. If v is not present in the graph if it is a new node or new vertex then here you can see I want to add f and f is a new node it is not present in the graph. So I need to add that to graph like this when I add a new node to the graph what changes I need to do in the adjacency list we need to add another key here that is f as I said in the adjacency list the key of the graph represent the nodes of the graph. Here new node is added that's why here we need to add a new key and what is the value of this node empty list. In this key value pair key represents the nodes of the graph and value represent the list of its adjacent node. Here f is not connected to any other node that's why this list is empty here. So when I add a new node I need to add a new key and value of that new key is empty list. So here I need to add the new key how to add new key like this graph that is the dictionary name v that is the new key is equal to empty list and we are done. In the dictionary how to add a new key we need to take graph v and we need to take its value. Here v is the key and the value is empty list. Now here if I call add node function and here if I pass a and if I print graph here we'll just print the dictionary graph and if I save and execute this here you can see a with empty list because now graph contains only one node that is a. If I take now if I call add node method on a again here we'll print the message a is already present in graph and if I take b here we can see two key that is the nodes present in the graph and its adjacent list is empty because when we add a new node to the graph we are not adding the connection between the nodes that's why initially it will be empty alright. So this is about the add node operation and this function works fine with the directed undirected or weighted graph because we are inserting a new node and the direction and weight of the graph is dependent on the edge it is connected to edge it is not connected with the node we need to be careful about the weighted graph or directed graph or undirected graph when we write a function for add edge operation and we'll discuss about that in the next tutorial. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you next class till then take care and be safe.