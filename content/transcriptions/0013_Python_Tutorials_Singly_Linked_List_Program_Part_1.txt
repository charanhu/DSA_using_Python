 Hello guys and welcome to Python programming tutorials by Amalya's Academy. We were discussing about data structures and in that we were discussing about Linked List. Previously in this video series we discussed about Singly Linked List and today in this tutorial we will see how to implement Singly Linked List in Python. In Python, Linked List is not a built-in data structure. So to create the Linked List in Python, I am using the class concepts and I hope your familiar with the class and objects in Python. So Linked List is nothing but it is the chain of nodes, right? And in each node it contains two fields that is the data field and the link or reference. It will show the link of the next node. And the last node of Singly Linked List stores the reference to empty value and the starting point of the Linked List is called as head which will store the reference of the first node, right? This is about the Singly Linked List. Now to create the Singly Linked List in Python, first we need to create the nodes. So the first step is we need to create the nodes and here each node will contain two fields, one is data and another one is link or reference. So here to create the node we are defining a class. In the Python file, here I will take class the keyword and here I will take the class name as node. Now in the class node I will take the initialization method that is will initialize the fields of the node. Each node contains two fields, right? Data field and the reference or link. So to initialize that I am using init method. So init is a special method. Sometimes it is called as class constructor or it is also called as initialization method. And this method is called whenever you create a new instance of the class. This method is used to initialize the fields of the node. Each node contains two fields, right? So first parameter should be self and here I will take data. Okay, so the data field. I won't take the reference because here I will take self dot data is equal to data. We need another field that is reference and I will take it as none. Instead of taking the null value will take the none. None is the keyword is for empty value. So to create the node we are using the node class in that we are taking data field. Next, we will take the reference and link as null or none initially. Okay, it will be none empty value because using the node class we are creating the individual nodes. Okay, we are not linking them. We are just creating the nodes. So first step is we need to create the node. So take class node and using the init method initialize the fields of the node data and reference. Okay, I will take the link or references are here for data. I will take data. So next this is the class, right? So you can create a node here like this node one equal to node. And here you need to pass the data. For example, if I pass 10, now the node will be created like this and the reference will be none. Okay, if I print node, that is node one, the object and if I execute this now, we will get this main dot node object at this location. It will give the reference of that newly created object. So now we don't want this. So now we completed the first step here created the node. The second step is as I said, we created the individual nodes, right? Now we can create the individual nodes like this, which is pointing to none. We can create the individual nodes using the class node. Now link list is nothing but it is a chain of node in which each node contains the link or reference of the next node, right? It is the chain of node. Each nodes are connected here. So to do that, to connect these individual nodes, we need to create another class that is the link list class. So this class is to create node and we need to create another class to link these nodes. I'll take class and I'll take the class name as linked list. Here also I'll use init method. And here I'll take only self parameter. And here what is present in the linked list? It will contain the nodes other than nodes, what it will contain. The linked list contains head head is nothing but the starting point of the link at least. It contains the link or reference of the first node, right? So first I need to initialize that. So I'll take self dot head is equal to none. So what I'm doing is in the linked list, when you create instance of the linked list, I'll take head as none. That is nothing but this is the empty linked list. If here this head is none or null, what that means? That means we don't have any node, right? That means it is the empty linked list, right? Head is nothing but the starting point of the linked list. If it is none, that means it is an empty linked list. Here first we are creating an empty linked list. If you want to insert an element, then you can perform the insert operation. If you want to delete the element, you can perform the delete operation. Or if you want to perform any other operation, you can define the methods for that. Initially, linked list will be completely empty. Next here, you can add different methods to this linked list class, which and all method we can add to this linked list class. Using the single linked list, we can perform many operations. And we discussed about that in the previous tutorial. Previously, we discussed about three operations, that is adding or inserting the element to the linked list or removing or deleting the element from the linked list and traversing the linked list, traversal operation. So to perform this operation, we can define the methods in the linked list class. So we will do that, but while adding or inserting element to the linked list, we have different scenarios, right? We have different scenario to discuss while adding the elements. Same way, while deleting the elements also, we need to discuss different scenarios. So that's why I'll discuss about this add and removing operation in the next tutorial. Today, we'll see how to traverse the linked list. So we'll write the code for this, how to traverse the single linked list. So in this traversal method, what we are doing is we are going through each node and we are printing the information about the each node. Okay, so let's discuss about traversal operation. So we already discussed how we can perform this operation in the previous tutorial. While traversing the single linked list, while writing the program, we need to remember two points. The first point is we need to chuck whether the linked list is empty. What happens if the linked list is empty, the first condition? Second condition, if it is not empty. What if linked list is empty, what I need to do? Next point is, if it is not empty, then what I need to do. So first we'll chuck for the first condition. If the linked list is empty, then what I need to do? While traversing the single linked list, if the linked list is empty, then I need to print a message, that is linked list is empty. So now the question is how to chuck linked list is empty or not? Simple right? When head is none, none or null here in our program, it is none. If head is none, that means linked list is empty. If it contains any value, then that means it is not empty. So I need to chuck this right. If head is none, that means I need to print a message, linked list is empty. I'll take Def and I'll take the method name as print linked list. Here I'll take the parameter as self. I won't take any other parameter because we are printing the information of each node here. And for that, we don't need any other parameter. Right? So first I need to chuck whether linked list is empty or not. If head is none, then linked list is empty. So here I need to take self.head is none or you can chuck is equal to equal to none also. If self.head is none, just print linked list is empty. Done. So we are done with the first condition right? So while traversing the linked list, we need to chuck two condition. That is this. So we wrote the condition for this. If link is empty, we'll just print a message. Linked list is empty. If it is not empty, then we need to go through each node. We need to print the data in that node. So we need to begin this process from the head. So for our convenience, I'll take this head as n. Here I'll take a variable called n and I'll take self.head. I'll take a new variable to this reference. So instead of calling that self.head self.head, I'll take a variable name, small name, n, n equal to self.head. Here n in this example, this reference, that is nothing but this. Now, n.data is nothing but 10. n.reference is nothing but this, thousand four hundred and ten. So initially I'll take n as self.head. It's for my convenience. If I didn't take the variable n to print this data, I need to take self.head.data. For the reference, I need to take self.head.ref. I don't want to write the long names. Instead of that, I'm taking a variable n and here to access the data, I need to use n.data for the reference, I need to use n.ref. So here I just want to print the n.data. Right. So I'll print n.data. After printing that, I need to go to the next node. Then how to go to the next node, right. So for that, what I'll do is I'll again take the different value for n. n is nothing but n.ref. So as I said, when I take n is equal to self.head, n value will be this, right. So n.reference is nothing but this. After printing the value present in that, I need to go to the next node. That is nothing but this address. So for that, I'll take n equal to n.reference. So now n value becomes 1410. 1410. Next, if I take n.data now, it now this is n. So n.data is nothing but 20. n.reference is nothing but 1375. So I'll again print n.data. And again, I need to go to the next node, right. To go to the next node, I'll take n equal to n.reference. I'll take this as the n. I'll take 1375. So now n becomes this. So now if I print n.data, it will print 30. Okay. So I'll print n.data. Next again, I need to go to the next node. That's why I'll take n equal to n.reference. This. So now n becomes 20000. This is the n value now. Now I'll need to print the n.data. So here I'll print that. So it will print 40. After that, I'll take n equal to n.reference. So here now n value becomes null. Now I need to stop the iteration. That is when n value becomes none. Here when n value becomes none, I need to stop. So I need to execute these two statements again and again, right. To go to the each node and to print the data present in that. That is, I need to do that again and again for each node. So for this, we need to use a loop here. So we have two loops. That is for loop and by loop. We'll use for loop when we know how many times I need to execute. The loop body and we can use while loop when we know the stopping condition. Here we know the stopping condition, right. When n value becomes null, I need to stop. So that's why here I'll take while condition and here I'll write while n is not none. And I'll print the n.data and and I'll take n equal to n.reference. I'll continue this process when n becomes none, stop the execution. So here we need to write the code. So here I take else part. If the link list is not empty, then I take n is equal to cell.head. Next here, I need to take while n is not none. That is, until I'll get the last node, I need to continue this process. Here what I need to do, I need to print n.data and n is equal to n.ref. If I want to go to the next node, then I need to take the reference of n as the n value for the next node. So this is the method to traverse the linked list. So let me create a list. So I'll take ll1, the linked list name and here I'll call linked list. And next I'll call ll1.printll. The method. Now linked list is empty. We didn't insert any element to this. So it will just print the linked list is empty message. Here you can see linked list is empty. Here in the traversing operation, first we need to check whether linked list is empty or not. For that, we'll check head is none or not. If it is empty, we'll just print the message, linked list is empty. If it is not empty, we'll just print the message. If it is not empty, then I'll take n is equal to self.head. So when I take n as the self.head, n.data is nothing but the data of the first node. n.reference is nothing but the reference stored in the first node. So in this traversing operation, I want to print the data present in each node. So now first I'll print the data present here. That is nothing but print n data. I'll print that. Next, I need to go to the next node. To move here, to go to the next node, I'll take n is equal to n reference, whatever the reference stored here in the first node. So here n becomes 1410. So that is nothing but this. Now if I print n.data, it will give 20. It will print 20 because n is this now, right? And n.dot reference is nothing but 1375. Now again, I want to go to the next node. So for that, I'll again take n equal to n reference. So whatever the reference stored here, I'll take this as the n value. So here this will become n. So n.data is nothing but 30. It will print that n.reference is nothing but this. It will continue this process like this. At last, we'll print n.data. And I'll take the n.reference, whatever reference stored here is equal to n value. Here first, it will print the data 40. Next, it will take n equal to n reference. Reference is nothing but empty value here. Okay. So n value becomes empty value. At that time, I need to stop the process, right? That's why here I took while loop and here I took the condition as while n is not none. Okay. When n becomes none, stop the execution. Stop the loop. If n is not none, then you can print the data and you can go to the next node. If n becomes none, that means there are no other nodes after that. So stop the execution. Okay. So this is about how we can traverse a linker list. In the next tutorial, we'll see how to add the element and how to remove the element from the linker list. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then take care.