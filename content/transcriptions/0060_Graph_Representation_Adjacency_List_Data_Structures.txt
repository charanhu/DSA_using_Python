 Hello guys and welcome to Amulea's Academy YouTube channel. We were discussing about graph representation and in the previous tutorial we discussed about the adjacency matrix representation. Today in this tutorial we will talk about the adjacency list representation. In the adjacency matrix representation we will create k into k matrix first. k is nothing but the number of nodes present in the graph. Then both the row and column of the matrix represent the nodes of the graph and if there is an edge between two nodes then we will store the value 1. If there is no edge between two nodes then we will store the value 0. We can represent a graph using adjacency matrix like this. But in the adjacency matrix we will store the result for both the cases. That is in both the graph representation adjacency matrix and adjacency list we are talking about the adjacency nodes. Here the question is whether there is an edge from one node to another node whether the two nodes are adjacent node or not. The answer for this question is yes or no. In the adjacency matrix we are storing both the result. If there is an edge from one node to another node we are storing value 1. If there is no edge then also we are storing a value for that that is 0. So we are storing both the result in the adjacency matrix. That's why we need more space in the adjacency matrix. If you are representing a dense graph using adjacency matrix then that is okay because there will be less 0 in the adjacency matrix. But in this past graph we will have more zeros than the one and we are wasting the memory to store zeros. That's why to store the past graph adjacency matrix is not a good option. So what we will do in adjacency list today we will talk about that. In the adjacency list instead of storing the both the result like adjacency matrix we will we want the store adjacent nodes of each node. We will store the list of adjacent node of every node. Here we need to write the a's adjacent nodes a is adjacent to which end of the node. Because this is an undirected graph you can say in another way also. You can say like b and c and d are the adjacent nodes of a. You can say in another way also. Here I am not storing the values like 0 or 1. Here we are storing the adjacent node itself. For b adjacent nodes are a, d and e. For c, a, d for b, a, b, c and e. And for e, b and d, right. So this is the adjacency list. Instead of storing both the result whether there is an edge from one node to another node. Instead of that what we are doing is we are making the list of adjacent node of every nodes and we are storing that. Okay so let's take another example if we have directed graph. So for a adjacent nodes are we need to write down the a's adjacent to which end all node. Here there is an edge from a to b that's why a is adjacent to b that's why I need to write down b here. There is an edge from a to c that's why a is adjacent to c that's why I need to write down this here. Okay so this is the adjacency list. Next now what about the weighted graph. Now if you have weighted graph then how to represent this using adjacency list. So for that you can mention like this okay adjacent node with its cost. For example for a to b, b is the adjacent node with cost phi right so you can write it like b phi like this c4 d10. You can store the cost as well as adjacent nodes. For b a phi e3 d1 like this okay you can write it for every node like this. You can represent the graph using adjacency list. Now if I want to represent a graph using adjacency list in python programming language how to do that. So for that we can use dictionary. Here you can see this is the key the nodes are the key and these are the values and you can represent like this list of values. For this weighted graph either you can represent it like this list of list okay or you can take a dictionary also. You can represent it like this also okay alright this is about the adjacency list and in the next tutorial we will talk about the different operation which we can perform on graph. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.