 Hello guys and welcome to Amulya's Academy YouTube channel. We were discussing about binary search tree and in the previous tutorial we wrote a method for deletion operation that is how we can delete the given node from the binary search tree. While performing the deletion operation in binary search tree we need to be careful about three cases. The case one is whether we are deleting the node with zero child nodes. Case two is whether we are deleting the node with one child node. Case three is whether we are deleting the node with two children. We need to write this update condition for these three cases. And in the previous tutorial we did that. But in any tree root node is the special node right? And if I want to delete the root node from the binary search tree then how to do that? How to write the method for that? Today we will discuss about that. How to delete the root node from the binary search tree. While deleting the root node also we need to consider three cases. That is we need to check whether root node is the leaf node or we need to check whether root node contains one child node. If it contains only one child node we need to write the separate condition and this third case is when root node contains two child nodes. If I want to delete the root node with two child nodes. In the previous tutorial we wrote the delete method for all the nodes of the tree right? Then why we are discussing about this root node deletion separately? That is because the previous method works for this case but it doesn't work for these two cases. So basically today in this tutorial we are talking about these two conditions and how to modify the previous delete method so that it will work for the root deletion also. So now when root node is the leaf node what we need to do? When root node is the leaf node that means binary search tree contains only one node. If root node is leaf node that means tree contains only one node. So at that time I don't want to delete the node. Now in the program if the user tried to delete a node from the tree when the tree contains only one node then I will print a message. You can't perform deletion operation like that I will print a message. I won't perform deletion operation when the root node is a leaf node. Simple right? So now in the program what we need to do is we need to modify the program for this condition. We need to add this condition to the previous program. Now as I said when tree contains only one node that time root node is the leaf node so we don't want to perform deletion operation but how we will get to know that tree contains only one node. For that first we need to count how many nodes are present in the tree right? So for that we need to write this separate function. Yes I said function not method. So first I will show you the binary search tree program. We have class BST in that we have different method like insert method, search method, preorder, inorder, postorder. Lastly we have delete method also. Next here you can see root object. Next we have list. Here we are performing insert operation and we are calling preorder methods. So now we need to modify this program for the case 1 that is when root node is the leaf node. Before modifying the program I will show you what will happen if we try to delete the leaf node here in the previous program. Now here you can see this tree contains only one node. Here list one is empty and if I call delete method here let me call and if I execute this now it won't delete the node. Here you can see because this code will not work for that case. In the previous tutorial we didn't include this condition in the program. So now what I need to do first I need to count how many nodes are present in the tree. Then if count is greater than one then only I need to perform the deletion operation. If count is one then I will print a message. So for that first I need to find out the count of the nodes in the binary search tree. So for that I will define a function outside the class. I will define a function. So I will take function name as count. You can take any name and here I will take parameter as node. So here I will use recursion that's why I will take base case first. Base case is if node is none return 0. If node is none that means we don't have any node in the tree that's why I will return 0. Otherwise how to count the number of nodes present in the tree. First we need to count the root node that is one plus number of nodes present in the left subtree plus number of nodes present in the right subtree right. That's what I'll do here. One this is the count for root node then I'll call this function again to find the nodes present in the left child. So I'll call count node L child and then. So this is the base case and here in the recursive case what I am doing here one is nothing but the root node count here number of nodes present in the left subtree plus number of nodes present in the right subtree. This will give us the count. For example now if I call this here print this is the function. So you need to take function name and here you need to pass root the object. I am printing this because here we can see this function is returning some value. I want to print that that's why I'm using print function. Now if I save this and execute this here you can see count is one. It will give us the count if we have two three something like this. Here you can see count is three. Now we know how to find the number of nodes present in the tree. Now here before performing the deletion operation we need to do this. If count of root is greater than one then only perform this operation deletion operation. Else if count is one then I'll print a message like this count perform deletion operation. Now when count is one that is when tree contains only one node or we can say when root node is the leaf node. Now if I try to delete a node from tree and here we need to use a print function. Okay. Now I'll delete this I don't want to print the count. If you want you can call this function. Okay so now we are done with the first method. We modified our program. Now this program is working for the first case that is when root node is the leaf node. When root node is the leaf node it will print the message that you can't perform deletion operation. Next let's talk about the next condition that is when root node contains only one child node. Here let's take one example. Now here you can see you'll get tree like this. Now if I perform the deletion operation on root node. Now here you can see tree contains more than one node. Now if I try to delete the root node here you can see it is not it is not deleting the root node. So when we have root node with only one child node and if I try to delete the root node this program is not working. So we need to include that condition in the delete method. But this method is working for all other nodes which contains only one child node. If I try to delete other nodes which contains only one child node it is working properly. But if I try to delete the root node it's not working properly. That's why first we need to identify whether we are deleting the root node or not. For that first here while calling the delete method you need to pass another parameter that is root dot key. To identify whether we are deleting the root node or not we need to pass the root key also. So then here I need to take another parameter current. Here you can see this is for when tree is empty this condition is not needed actually. Here if when data is less than self dot key when we want to delete the data which is greater than self dot key. If data is not greater than or less than self dot key control will come here. So we need to do changes here. So when self dot L child is none I'll take temp equal to self dot R child then what I'll do is I'll compare data with here data is nothing but the data of the node which I want to delete. Here in this variable we have root ski. Now I'm checking whether we are deleting the root node or not. If this condition becomes true that means we are deleting the root node. So at that time what I need to do is here when I want to delete the root node when we have tree like this here we can see left child of root node is none. When I want to delete the root node now what I'll do is first I'll this is self. Arch child first what I'll do is I'll copy whatever the key present here to here. So I'll take self dot key is equal to self dot R child dot key. I'll make it as 15. I want to delete this node right that's why I'll make it as 15. So first step is you need to take self dot key is equal to self dot R child dot key. Now what you need to do is you need to copy its link also. Arch child and L child also so I'll take self dot L child equal to self dot R child dot L child. I'll copy this here self dot R child equal to self dot R child dot R child. I'm just copying this node here. Now we have same two nodes. Now you can delete this node you can delete this node now. Now here you can see deletion is done. So to delete the root node what we are doing is we'll replace the root node with the it's right child. So in the program I need to take self dot key is equal to self dot R child dot key here I took temp equal to self dot R child so I can take temp dot key self dot L child equal to temp dot L child. I'm just replacing the root node with it's R child self dot R child equal to temp dot R child. Now I'll delete temp so temp equal to none temp is nothing but the right child. Now I'll delete that. Next I'll use return here. This is when we have root node and it's left child is none. What if it's left child is present but right child is none. So here we need to write the condition for that. So here I'll just copy this and here after taking temp equal to self dot L child you need to copy that that's it. Here also when self dot R child is none I'll take temp equal to self dot L child and I'll check whether we are deleting the root node. If you are deleting the root node what I'll do I'll replace the root node with the it's L child. Next I'll delete the L child and we are done. To replace what I'm doing is I'm just copying its content its key and it's L child and R child. So now we are done. So let's execute this and we'll see whether it will work for this condition or not. And now here you can see 10 is deleted. Now if I take it as 11 and 12. Now three is like this. Now if I execute this here you can see it's working. So this is to delete the root node when it contains only one child node. Next. To delete the root node which contains two child node how to do that. No need to do any changes to this program. This program works fine when you want to delete the root node which contains two child node. So for example if I have this and if I execute this now. Okay sorry I explained you about this current right here you need to include that important here. Right. Whenever you're calling the delete method you need to add the second parameter also in the function call. Whenever you're calling this delete method you need to include current here. Okay so here also just forgot that. So now we are fine. So now if I execute this here you can see 12 and 1 10 is deleted and 12 will replace the 10. So here we'll get this. Okay so this is about the delete method that is how we can delete the root node in the binary search tree. I know delete method became very lengthy. So now if you have any short term method or efficient method then you can share your code with us. So it may help many people. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you next class till then check care.