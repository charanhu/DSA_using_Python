 Hello guys and welcome to Amuleus Academy YouTube channel. We were discussing graph operations. In the previous tutorial we talked about graph insertion operation and graph deletion operation. And also we wrote the function for every operation. But in those previous tutorials whenever I used term graph, I was referring to simple graph with single edge. But graph can contain multiple edge between two vertices. And our previous written functions may or may not work for multiple edge graphs. Because multiple edge graphs are represented differently compared to single edge graphs. So today we will talk about multiple edge graph. In the unweighted undirected graph and in the unweighted directed graph, we will store zero if there is no edge between the vertices and we will store one if there is an edge between two vertices. And in the weighted graph, instead of storing one, we will store the weight of that edge. But if our graph contains multiple edge like this, now between A and B there are two edges. If I add one more, now three edges. Now how to represent this? That is the graph with multiple edges using adjacency matrix representation. So to store multiple edge graph in the adjacency matrix, what we can do is instead of storing one, we can store the number of edges between that two nodes. For example, here A to B, there are three edges. Instead of storing one, I can store three. This is the number of edges present between the two nodes. And if there is no edge, we will represent it as zero. If there is only one edge, we will represent it as one. So you can represent unweighted, directed and undirected graph like this. Instead of storing value one, you can store the number of edges between the vertices. Now what about the weighted graph? I don't have any satisfactory explanation for this. So I will skip this. So this is about the adjacency matrix representation. If we have directed graph or undirected graph and if that graph is unweighted graph, then in the adjacency matrix, you can represent how many edges are present from one node to another node. You can store the count of the edges in the adjacency matrix. Alright, while you are writing a program using adjacency matrix representation, if you want to write the function for multiple edge graph, then no need to do any changes to the add node function because we are adding a new node that doesn't have any connection with the number of edges between the nodes. That's why no need to change anything in the add node function. But in the add edge function, instead of storing one, when there is an edge between two vertices, instead of storing one, you can take a counter. Initially, it will be zero. When there is a single edge between two vertices, you can make this as one. When you add second edge between same vertices, you can make that count as two. You can store that. If you add another edge between same vertices, then you can increment the counter. Okay, you can do that. So you need to do changes in the add edge function. And coming to the delete node function, in the delete node function, no need to do any changes because when we delete a node, we need to delete all the edges connected to that. That's why it doesn't affect whether there are multiple edges between two nodes or only one edges present. That doesn't matter. But in the delete edge, you need to decrement the counter. For example, here A to B, there are three edge from A to B. Now if I delete this, if it is for an animated graph, if I delete this, then I need to decrement this to two, like that. So this is about adjacency matrix representation. Next let's talk about the adjacency list representation. If I add multiple edges between two vertices, our program will accept that, our program which we wrote in the previous tutorial for graph implementation using adjacency list representation. We used graph dictionary, right? That program work fine for the multiple edges. What it will do is if I add an edge between A to B, here it will again take B as its neighbor. That is there is an edge from A to B. It will mention that again, you can see multiple B's in the list. If I have another edge, then it will add another B here. So no need to do any changes in the add node function, add edge function. But while performing the delete node function, you need to be careful because in the delete node function, what we are doing is if I delete A here, we need to delete all the edges connected to this. But here you can see in this single list, we have three B's. We need to delete all B's from this list. But our function, which we wrote in the previous tutorial, I guess previous to previous tutorial, delete node function using adjacency list representation, it is not working for this. You need to do a few changes in that function. And I think delete edge also works fine because if we delete one edge, it will delete B from this and it will delete A from here. So that means two more edges are left here. It works fine. Delete edge function works fine. You need to do changes in the delete node function. So this is about how we can represent multiple edge graph. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you next class till then take care and be safe.