 Hello guys and welcome to Python programming tutorials by Amulias Academy. We were discussing about doubly linked list program and in the previous tutorial we created node class and doubly linked list class and also we discussed about traversal operation and we wrote two methods for that operation. Today we will discuss about the insertion operation. While writing the program for single linked list, we wrote five methods for insertion operation that is how to insert a node when linked list is empty, how to insert a node at the beginning of the linked list, how to insert a node at the end of the linked list, how to insert a node after a given node and how to insert a new node before the given node. Here in the doubly linked list program also we will write these five methods for the insertion operation. Today in this tutorial we will discuss about these three methods and we will discuss about these two in the next tutorial. So first let's see how to insert a new node when linked list is completely empty. When doubly linked list is completely empty that means head will point to none, the value of head is none. So at that time the first step is we need to create the node. So here linked list is completely empty. So create a node like this, data is 10. When I call node class which we discussed in the previous tutorial it will create a node with two links and the default value of two links is none and it will take a data field. So in the program to create the node I will use node class like this. Next step after creating the node what I need to do is now head this pointing to none I need to point this to here right, head need to point to the new node. So this is the new node. So head equal to new node. So when linked list is empty first step is you need to create the node and you need to point head to the new node. So here we have our program which we wrote in the previous tutorial class node and class doubly linked list in that we have print LL that is the forward traversing method and print LL reverse that is the reverse traversing method. Next here we will create the method to insert when linked list is empty. Insert the node when linked list is empty. So here I will take parameter as self and data whenever you write a method to insert the new node to the linked list you need to take parameter as data because you are inserting a new node and in that you need to mention the data field that is why here you need to take data and in this method first I will check the linked list is empty or not. So first I will check self dot head is none like this. If self dot head is none then only I will insert the new node right here we are writing this method to insert the new node at the empty linked list. So first I need to check whether linked list is empty or not for that I need to check self head is none or not. If it is none then create the new node. So I will take new node name as new node and I will create the new node using node class and here I need to pass the data. So it will create a node with both the reference as none and with the data field. Next after creating the node I need to point head to the new node. So self dot head is new node else if linked list is not empty I will just print a message that is linked list is not empty. So entering the new node to the doubly linked list when linked list is empty is same as entering the node when single linked list is empty. The code is same you can compare it with the single linked list insert empty method. Okay so in this way you can insert the new node when linked list is completely empty. Next let's write the method to add the new node at the beginning of the linked list. While adding the new node at the beginning of the doubly linked list you need to be careful about two things. First one is whether you are adding the new node to the empty linked list. If you are adding the new node to the empty linked list then the condition is different. You need to write the separate code for that and also for non empty linked list. Another condition is non empty linked list. In the doubly linked list if you are adding the new node at the beginning of the linked list then we need to be careful about two things that is first we need to chuck the linked list is empty or not. If linked list is empty that means whatever node we are adding that will be the first node of the linked list and also that is the only node of that linked list. So we need to write the separate code for that. If it is non empty then we are adding the element at the beginning of the linked list so that will become the first node of the doubly linked list. So we need to write the separate code for that. So first we will chuck this condition empty linked list. If the linked list is completely empty then if you are adding the new node then what will happen? If linked list is empty that means head will point to none. Now the first step in the insertion operation is you need to create the node. So to create the node we will use node class in our program like this and node data and we will create a new node. Here a new node will be created. For example if I take data as 10 it will take data as 10 and both the links are pointing to none. Now after creating the new node what I need to do is I need to point head to this new node right head equal to new node. So this is the code you need to write when you are adding the new node at the beginning of the doubly linked list when doubly linked list is completely empty. So here in the program we need to write the method add begin add at the beginning of the linked list you need to take cells and data. As I said every insertion method you need to take data as the parameter and here first step is you need to chuck self.head is none. Before chucking linked list is empty or not doubly linked list is empty or not. First I will create the new node like this new node using node class passing data parameter right next I will check self.head is none that is linked list is empty. If doubly linked list is empty that means I need to take self.head as new node and I need to stop else if doubly linked list is not empty then we need to write this separate code let's see that. So if doubly linked list is not empty and if I want to add the new node at the beginning of the linked list first step is create the node like this when I create the node it will point to none both the link point to none. This is the new node after that I need to change the new node NRF this is the NRF next link reference this is the PRF previous link reference first I need to change this NRF new node reference so I will take new node dot NRF next link reference I need to store this I want to add this new node at the beginning of the doubly linked list so this node will become the next node of this node that's why we need to store the reference of this node in the NRF of the new node and where this link reference is stored before adding this node to doubly linked list this is the first node of this doubly linked list and the first node reference will be stored in head right so here I need to take head head contains 10 so I need to store that here that's why I will take new node dot NRF is equal to head now this link is changed it will point to here next here we can see this is the doubly linked list and every node contains previous reference as well as the next reference and in this node it should store the reference of this node right new node so I need to change that here this node need to point to here what is this till now head this pointing to here this is the first node we didn't added this node completely to the doubly linked list so this is the first node so head this pointing to here that's why if I want to access this link this is nothing but self dot head dot PRF previous reference so this is head now if I want this link this is head dot PRF equal to I want to store the reference of new node so I'll take equal to new node lastly now we added this node to the doubly linked list so head need to point here so I'll take self dot head is equal to new node point head here so head is equal to new node so let's write the program here first change the new node NRF is equal to self dot head change the new node NRF next link reference next change the first node reference that is PRF to new node lastly change self dot head point to new node we are done and this add begin method of the doubly linked list is different from the add begin method of single linked list that is because in the doubly linked list every node contain two reference previous reference and next link reference that's why we need to write the separate code first we need to check the linked list is empty doubly linked list is empty if it is empty then that means whatever the node we are adding that is the only node of the doubly linked list so we need to write the separate code otherwise we need to write the separate code next let's write the method for add end that is we want to add the element at the end of the linked list so for that I'll take the method as add end I'll take self data and firstly I'll create the node using node class like this done we created the node now only adding that to doubly linked list is left so let's see how to add at the end of the linked list so first is you need to check the linked list is empty or not here also you need to do that because if if doubly linked list is completely empty then head this pointing to none now if I want to add any element if you want to add new node at the end of the linked list but here linked list is completely empty it doesn't have any node that means whatever node we are adding that is the first node of the linked list right so first we need to write the condition for that we need to check whether linked list is empty if it is empty then we need to point head to new node right we need to create the new node and we need to point head to the new node because that is the first node of the doubly linked list head need to point there so that's why here also add end first I need to copy this while adding the element at the end of the linked list also first I need to check the linked list is empty or not if it is empty then I need to point head to the new node so code is same else while adding the element at the end of the linked list first we'll create the node and we'll check doubly linked list is empty or not if it is empty then we'll point head to the new node if it is not empty that means it contains few nodes now if I want to add new node here we need to create the node like this for example I'll take 11 a data and when I create the node using node class both the nrif and prif will point to the none now what we need to do is to add this new node at the end of the linked list first we need to travel to the last node first we need to come here so to travel to this position I'll take first node as n here this is the first node I'll take first node as n and to travels to the next node I'll take n equal to n.nrif and using while loop I'll increment the n value until I'll reach the last node I already explained about this while discussing about the add end method in the single linked list so you can refer that video so here first you need to take the first node as n so the reference of the first node is stored in the head so you need to take n equal to self dot head then you need to using the while loop you need to traverse to the last node so here in the while loop you need to take the condition right so let's see what is the condition we need to travel to the last node so we need to stop when n becomes this node in this node you can see nrif is none so I'll take the condition like this when n dot nrif becomes none stop stop changing the n value here I'll take n dot nrif is not none if it is not none then increment the n value that is go to the next node if it is become none that means we read the last node so now stop come out of the while loop right in this way you can reach the last node using this next after going to the last node here you need to change its reference right you need to change this reference it need to point here so this is nothing but n dot nrif you need to point that to new node first is n dot nrif is equal to new node and also new nodes prif need to point to this n so that's why I'll take this is new node new node dot prif this is the previous reference link new node dot prif is equal to n this reference 30000 I need to store that here here n is nothing but 30000 that's why new node prif equal to n so here let's write that outside the while loop n dot nrif is equal to new node change the nrif of the last node then new node previous reference prif is equal to n so now we are done so let's see this methods works properly or not first let's check the insert empty so here we created the object from the doubly linkred list class now I'll call the L1 that is the object name insert empty and I'll take the element as 10 and here I'll call both the method print LL reverse as well as the print LL so like this so let's execute this now here you can see 10 and 10 I'm getting 2 because here in the print LL I used end parameter and also in the print LL reverse I used end parameter that's why output from the both the functions are printing in the same line to avoid that I'll just use a print function inside the print LL reverse now if I execute this here we can see 10 and 10 this is from the print LL this is from the backward traversing now if I again call this if I take 20 and if I execute this so linkred list is not empty so it won't insert 20 to the linkred list now let's call add begin so it will add the new element at the beginning of the linkred list so 20 will be added before 10 2010 10 20 this is from in the backward traversing this is the forward traversing now if I comment this that means I am using add begin method when the linkred list is completely empty and if I execute this here you can see only 20 nodes you can see first result is from forward traversing and second is from the backward traversing I'm calling both the function here next let's check the add end method and I'll add 100 so here we can see 100 is added at the end now if I comment both this method now I'm calling this add end method when the linkred list is completely empty and if I execute this here you can see 100 so in this way you can write the method to insert when the linkred list is empty at the beginning of the linkred list and at the end of the linkred list here many times I mentioned linkred list that means I am referring to the doubly linkred list okay so that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care