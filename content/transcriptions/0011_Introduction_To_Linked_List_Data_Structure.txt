 Hello guys and welcome to Python programming tutorials by Amulya's Academy. We are discussing about data structures and next in this series we will discuss about Linked List. Linked List is a linear data structure made up of chain of nodes in which each node contains a data field and link or reference. So, Linked List is nothing but chain of nodes. And in Linked List, each node can contain data field and only one link. That is, it can contain a data field and link of the next node. Or it can contain the data field and two links. That is, it will contain data field and next node link and previous node link. So, the number of links in each node is depends on the type of Linked List we are using. We will discuss about types of Linked List later. For now, just remember that Linked List is nothing but chain of nodes in which every node contains the data field and link. Linked List is nothing but chain of nodes in which each node contains the data field and link of the next node. So, you can visualize Linked List like this. It is a chain of nodes. So, it can contain multiple nodes. Here, I will take each node will contain data field and one link. So, this is node 1, node 2. You can visualize the Linked List like this. It is the chain of nodes and here I will take each node contains data field and only one link. That will be the link of the next node. So, each node will store the link of the next node. Here we can see node 1 contains data and link of node 2. Here node 2 contains data as well as link of node 3. Node 3 contains data as well as link of node 4. Then what about the node 4? What it will contain? It will contain the data and it will contain the link of which node because we don't have any other node after that. Right? So, what it will store? Which reference it will store? It also depends on the types of Linked List we are using. In most of the Linked List, the last node will store the reference to the empty value or null. Alright, next to understand this Linked List concept properly, first we need to be familiar with the terms related to the Linked List. So, let's talk about the terms. The first term in the Linked List is called as node. So, the element of Linked List is called as node. Here, these are the elements, right? These are called as nodes. And in each node, we can have data field and link or reference. And the starting point of each Linked List is a reference to the first node and it is called as head. Sometimes it is also called as front. The reference of node 2 is stored in node 1, right? The reference of node 3 is stored in node 2. The reference of node 4 is stored in node 3. Then what about the reference of node 1? The first node that is called as head, that is the starting point of the Linked List. And sometimes the last node is called as tail or end. So, these are the terms related to the Linked List that is node, head, tail or end. And here the data field is usually called as data and the link or reference is called with many names like link, reference, next, like that. Next, Linked List is a dynamic data structure. The size of the Linked List is not fixed. You can modify that while performing the operation on that. That is, no need to mention the size of the Linked List while you are creating the Linked List. Okay, it is a dynamic data structure. Like we used list, right? List is a dynamic data structure while creating a list, no need to mention the size of the list. In the same way, Linked List is also a dynamic data structure. And here each node will contain the link or reference of the next node, right? Because of that, elements or the node of the Linked List is stored randomly in memory. We don't need continuous memory allocation. Continuous memory allocation means allocating the consecutive memory blocks. And here we don't want that. I'll try to show you that with the diagram. So, let's take this is the memory. Okay, so first let's take few nodes of the Linked List. Here we can see few elements, right? These are the elements of the Linked List. And I'll take few random address. Each node will contain the data as well as the address of the next node, right? Here the next node is 20. So the address is stored here, 1200. It will store the address of next node, that is, thousand seven hundred. So next here we can see next node is 30 and it will store the link or reference of the next node, that is, two thousand hundred. And this is the last node. So it will store the reference of empty value. So the notes of the Linked List can be stored randomly in memory. It doesn't need contagious memory allocation. And each node will contain the link or reference of the next node. Here we can see each nodes are not present in the consecutive memory blocks. It is present randomly in the memory. All right, now we know what is Linked List. And the terms related to the Linked List. Next, we'll discuss about few good things and bad things about the Linked List. First, let's talk about the good things, the advantage of the Linked List. It is a dynamic data structure, right? So it uses the dynamic memory allocation. So while creating the Linked List, no need to mention the size of the Linked List. So it is an advantage. Next point is element can be inserted or removed easily from any position. So insertion and deletion is easier in the Linked List. No need to shift the elements while inserting the value. Instead of that, we need to change the link of the nodes. And next, you can use Linked List to implement stack, queue and graphs. So we'll see that implementation later. Linked List are used to represent and manipulate polynomials. In real life, we can use Linked List in the web browser to go to the previous and next page. You can use Linked List in the music player, image viewer, etc. All right, so this is the good things about the Linked List. Next, let's talk about the bad part. Here, each node will store the data field and link of the next node, right? Because of that, it needs extra memory. To store that link or reference, it needs extra memory. Next, no elements can be accessed randomly. It has to access each node. Here each node knows only the next node, which is the next node, where it is present, right? So accessing the elements randomly is not possible. Instead of that, we need to go through each element. Next, we need to access that. Okay, so this is about the advantage and disadvantage of the Linked List. To understand any concepts, if I take any real life examples, then we'll remember that concept clearly, right? So for that, let's take some real life example. So the first example is Treasure Hunt Game. I hope you heard about this game. In this game, in each steps, there will be clues. After solving one clue, we can go to the next step. After solving the clue one, we can go to the next step. After solving the clue two, we can go to the next step, like that. So this game starts from the first clue. So at the beginning of the game, we'll get a clue, clue one. After solving that clue, we'll get clue two. The information to reach clue two is stored in clue one. After solving the clue one, we'll get clue two. And after solving, clue two, we'll get clue three. Because each clue contains some information to reach the next step. In this way, it will continue until we'll reach the destination, the end of the game. Okay, this is an example for Linked List. I hope you know about the Treasure Hunt Game. So you can compare that to this. I think you can take another example also that is Relay Running. In the Relay Running, athletes compete as a team. For example, if it is a 400 meter race and there are four members in each group, then each athlete will run 100 meter. Race starts from the starting point. The first runner will start the race. He or she will start the run with the button in the hand. After completing the 100 meter, that button is passed to runner two. After that runner two will start the race with the button in hand. After completing 100 meter, the button is passed to runner three and runner three will run the race, continue the race until they'll reach the destination. You can take the example like this. All right, so this is about the Linked List. Here we talked about the definition of the Linked List. The terms related to the Linked List, advantage and disadvantage of the Linked List. Some real life example. Next, as I mentioned previously, in Linked List, there are different types. Here we will discuss about the common types of Linked List. The first type is called as Singly Linked List. Second type is called as doubly Linked List and third type is called as Circular Linked List. If the nodes of the Linked List contain only one link, then that is called as Singly Linked List. If nodes of the Linked List contains two links, then that is called as doubly Linked List. Then what about the Circular Linked List? So we'll talk about all this in the next tutorial. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.