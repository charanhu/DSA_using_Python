 Hello guys and welcome to Python programming tutorials by Amulya's Academy. We are discussing about binary search tree implementation and today in this tutorial we will write a method for deletion operation that is how to delete a node from the binary search tree. While performing the deletion operation the first step is we need to check whether tree is empty or not. If tree is empty we can't delete any node from that right? So first step is we need to check whether tree is empty or not. If tree is empty we will print a message and we will stop the execution of the deletion method. If tree is not empty then I need to find the given node in the tree. So find the node. To delete the node first we need to find the node right? We need to check whether that node is present in the tree or not. If node is present in the tree we need to delete that. If node is not present we need to print them a message that is not present in the tree. So the second step is we need to find the node and if the node is present then I need to delete that node. Okay so these are the three steps of the deletion method. First we need to check whether tree is empty or not. If tree is not empty then we need to proceed to the next step. That is we need to find the node in the tree. If node is present then only we need to move on to the third step that is we need to delete that node. Clear right? So let's write the method. In the Python file here I have class BST. In BST I have insert method. Search method. Next we have traversal method preorder in order and postorder. Next here we will define the delete method. So DEF I will take method name as delete. You can take any suitable name. Next here we want parameter. The first parameter is self which will represent the object itself. The next parameter is data of the node which I want to delete. While calling the delete method we need to mention which node we want to delete. We need to mention the data of the node. That's why this parameter data. Alright colon. Here I need to define the delete method body. So here the first step in the deletion operation is I need to check whether tree is empty or not. Now the question is how to check tree is empty or not. If you remember while discussing about the insert method we discussed about this case. In our program if tree contains only one node and if that node's key is none then I will treat that node as empty node and I will consider that tree as empty tree. So here I will take the condition as if self.key. Here self is representing the object. Here if I call this method as root.delete because here the object name is root. So if I call this as root.delete then here self.key is nothing but root.key. If it is none then I will take the tree as empty and here I will print a message. If this condition is true you can print this message. I will print the message tree is empty and here I will use return. That is after printing this message will come out of the method. We don't need to do anything else right. Tree is empty that means we can't delete any node from that tree. So we will just print this message and will come out of this method. And if you want you can take if self is none also that is self represented object. If object is not present that means tree is empty. If you want you can take that condition also. But for our program this condition suits better. Next if tree is empty we will print the message. If tree is not empty then what we need to do we need to find the node whether it is present in the tree or not. If it is present then where it is present we need to find that node. In other words we need to perform the search operation we need to find that node is present or not. To perform this case you can call search method. Here we already defined search method right. You can call this search method and you can find the node is present or not. If node is present then where it is present. But here in our program this method is not returning any result that's why I am not using this method in the delete method. But if I modify this method to return the result then I can use that method here to find the node is present in the tree or not. But here I won't do that because I already explained you about how search method works. If I modify that you will get confused that's why I will write the separate condition for search method here. So here to find the node a node can be present in the left subtree or in the right subtree or it can be equal to the root node. The data of the given node can be equal to root node. We have three conditions right. If the data of the given node is less than the root ski then that means the node I want is present in the left subtree. If data of the given node is greater than the root ski that means the node which I want is present in the right subtree. If both this condition is false that means the data of the given node can be equal to root node. We have these three conditions to check. So here first I will check if data here this data the data of the node which I want to delete is less than self dot key. If this condition is true then the node I want to delete is present in the left subtree or it is not present in the tree. If it is present it is present in the left subtree because data of the given node is less than self dot key. So that is why what I will do is I will call self dot l child dot delete. I will call this method recursively on self dot l child. Here we have tree like this and we know the node which I want to delete if it is present in the tree then it is present in the left subtree. So no need to apply this delete method on the whole tree right we can apply this delete method on the l child only. So that is why we are calling this self dot l child dot delete on the left child and here I will pass data. So to delete the node go to the left child of the roots node and here this method will return some value. For example here look if I want to delete 10 first I will check 10 is less than 100 true right. So that means I need to call delete method on this now left child after deleting this here in the left child of this node I need to store none right here this node left child will be none after deleting this node I will return none and I need to store that here where in the l child of this node. So here that is why this method will return a result and we need to store that in the self dot l child. I know it is confusing don't worry in the next tutorial I will explain you this with the examples so at that time you will understand why we need self dot l child and how it works. Look data is less than self dot key we need to go to the self dot l child and we need to apply delete method there but if self dot l child is not present then what we need to do if self dot l child is none then none dot delete it will give error right. So here for example in this tree it doesn't contain self dot l child. So now if I apply this I will get error so before performing this what I need to do is I need to check if self dot l child if it is present or not first I need to check that l child is present or not if it is present then perform this operation if it is not else that means given key is not present in the tree right here you can see in this tree if I mention 2 and it doesn't contain any left child so if 2 is present in the tree need to present in the left side but left sub T is empty that means that given node is not present so here I will print this message okay this is one data is less than self dot key and if if data is greater than self dot key that means I need to go to the right side and I need to delete that node if it is present I need to delete that node so I will write the same code like this first I will check self dot r child whether it is present or not right child is present or not if it is present then I will perform delete method on the right child and I will store that result in the self dot r child right if self dot r child is present I will call the delete method on that and I will store the return result in this self dot r child else I will print the same message that is given node is not present in tree next here else look first we will chuck whether T is empty or not if it is empty we will print this message and we will come out of that method if it is not empty then I will chuck whether data is less than self dot key that is finding the position of the given node the node which I want to delete so first I will check whether it is present in the left subtree next I will check whether it is present in the right subtree if both this condition is false then that means the node which I want to delete is root node because here we can see if the data of the given node is less than self dot key then that means it should present in the left subtree so we took both the condition if it is present or if it is not present then if data is greater than self dot key that means it need to present in the right subtree so we wrote the condition for that if it is not present in the left subtree and if it is not present in the right subtree then that means the node which I want to delete is root key so that's why I will just take elf here I won't write any condition for that I won't chuck like this self dot key is equal to equal to data of the given node I want to do that because if both this condition is false that means the node which I want to delete is the root node okay no need to write the condition for that and in the else part what we need to do so using these we now found whether the given node is present in the tree if it is present where it is present after performing this operation now self will point to the given node the node which I want to delete for example if I want to delete 10 now self it will be pointing to here this node is self now now what I need to do I need to perform third step of the deletion operation that is delete that node before deleting that node we need to chuck the number of its child nodes if the node which I want to delete contains zero child nodes then we need to perform separate operation that is just delete the node if I want to delete a node which which contains one child node then that child will replace the parent and if it contains two child the node which I want to delete if it contains two child then either I can replace the greatest value in the left subtree with the parent or the smallest value in the right subtree with the parent I already explained about this operation in detail with example in a video I will give you the link of that video in the description box if you have any doubt here how it works you can watch that video okay now that means I need to write the separate condition for these three case now if I want to delete a node with zero child for example this node okay this node doesn't contain any child node right zero child now if I want to delete that what we need to do we just need to delete this node and we need to store here none and if I want to delete a node with one child node that is if I want to delete this node then at that time we need to replace this parent node with its child node so here I'll write the condition for that here I'll check first if self dot l child is none as I said after performing these operations now self is pointing to the node which I want to delete so now self dot l child is nothing but the left child of the node which I want to delete if self dot l child is none mean one of the child of the given node is none if l child is none what I'll do is I'll take a variable called temp and here I'll take self dot r child and I'll take self is equal to none and here I'll take return temp okay now what I'm doing here when I want to delete this node here we can see self dot l child this is self so l child is none here at that time what I'll do is I'll take temp equal to self dot r child that is I'm taking a variable temp and I'm storing self dot r child so that is none here self dot r child will become none next here I'll delete self so I'll take self equal to none so this will become none then I'll take return self dot r child so it will return self dot r child and it will return none to here this node and that will be stored here later now it will apply for this also when self dot l child become none temp will become self dot r child that is 300 then it will delete this self so it will delete this it will return self dot r child so self dot r child is 300 that will be returned here and it will store 300 it will become like this okay next here if self dot r child is none what do we do I need to take temp equal to self dot l child self equal to none return temp here I'm taking case one and case two combined as I said if node contains zero child or one child both this condition will apply if it is contains zero child or one child if self dot l child is none then whatever stored in self r child return that if self dot r child is none whatever stored in the self dot l child return that here while deleting a node as I said we need to check whether node contains zero child one child or two child when the node which I want to delete contains zero child or one child you can write the condition like this if the node which I want to delete contains two child then how to delete that node so for that here if I want to delete this node this node contains two child nodes at that time what I need to do is either I can replace this parent node with the node which contains largest key in the left subtree or the node with the smallest key in the right subtree here I'll go for the second option that is I'll replace the parent node with the smallest node in the right subtree the node with the smallest key in the right subtree here it contains only one node in the right subtree so I'll replace this node with 70 it will become like this actually here deleting the nodes means what I'll do is first I'll replace this 50 with 70 then later I'll delete this node for example if I want to delete this node I need to replace this node with the smallest value in the right subtree so what I'll do is I'll make this value as 300 first then I'll delete this node before deleting the node first I need to find the smallest node in the right subtree right so for that what I need to do is I'll take a variable here I'll take node you can take any variable and here I'll take self dot r child then here I'll perform y dot l child node is equal to dot l child what I'm doing here is before deleting the node what I need to do is I need to find the node with the smallest key in the right subtree right so for that here if I want to delete this node this will become self first I'll take its r child so I'll take node equal to self dot r child so now it will become this the smallest to value in the right subtree will be present in the left side right here in this tree you can see this is the smallest node in the right subtree because it doesn't contain any left subtree that's why this is the smallest node in this tree here you can see if you want to find node with the smallest key then it is present here right in the left child here that's why I'll take while node dot l child until h child becomes none I need to take node equal to node dot l child okay it is like this so this is node now self dot r child now to find the node with the smallest key I'm using while loop and I'll take while node dot l child until this l child becomes none I'll take node equal to node dot l child so now after executing these lines what will point to the node which contains smallest key in the right subtree okay now what I need to do is I need to take self dot key is equal to node dot key as I said we'll find the node with the smallest key in the right subtree here in this example this node so node is pointing to here now now first step is I'll replace this node key with this key so it will become 300 now now what I need to do is I need to delete this node in short what we are doing is we are not deleting this node instead of that we are changing its key so now to how to delete this node this is the node with the one child so we already wrote the condition for that so here what I'll do is to delete the node now self dot r child because it is present in the right child we are doing the changes to the right child self dot r child delete node dot key I know it is confusing I'll tell you while deleting the node which contains two child node we have two options one is either we can replace that node deleting node with the node with the largest value in the left subtree or node with the smallest value in the right subtree I'm picking second option here so what we'll do is we'll replace the node with the node which contains smallest value in the right subtree so here if I want to delete this node what I'll do is first I need to find this node with the smallest key in the right subtree that's why first I took node equal to self dot r child here this is the node which I want to delete that's why self is pointing here so if I take node equal to self dot r child this is the node now this is the right child now I want to find the node with the smallest key in the right subtree for that I'm using by loop the smallest value of any tree will be present in the left side in the left child if left child is empty then the root node will be the smallest node okay consider this as the tree now here also you can see in this example smallest node is this it is present here so to reach that I am using while loop after executing these lines no variable will point to the node with the smallest key in the right subtree here in this example this node now what I need to do I need to replace this node this is the node which I want to delete with this node so for that what I'll do is I'll first replace its key so here I'll take self dot key is equal to nodes dot key so it will become 300 now what I'll do it is replaced now I'll delete this node so to delete this node I'll call self dot r child dot delete node key and later here in outside the else I need to return self okay I need to return the value here self okay so now we are done with this delete method so first we need to check whether tree is empty if it is not empty then we need to find the position of the node the given node where it is present after finding the position we need to check whether it contains one child or zero child or two child if it is two child then we need to perform this operation I know you have confusion don't worry in the next tutorial I'll clear all your confusion okay now let's call this method and see whether it works or not so root dot delete I'll delete all this I'll call root dot delete and here we have these many nodes I'll delete six first so here we can see six is deleted if I take six tape which is not present here you can see given node is not present in the tree and if I want to delete 10 that is the root node here you can see 10 is deleted so 98 is the root node now if you want to chuck manually you can write down the tree and you can see all right so this is about the deletion operation in the next tutorial I'll explain you this method with the example that time you will get the clear picture how it works so that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care