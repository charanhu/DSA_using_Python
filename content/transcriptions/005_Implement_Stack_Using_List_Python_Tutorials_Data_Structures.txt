 Hello guys and welcome to Python programming tutorials by Amoleas Academy. I am back with the data structure tutorials. Previously in the data structure video series we discussed about stacks and its operation. Today in this tutorial we will see how to implement stacks in Python. Stack is not a built-in data structure in Python. To use stack we need to implement that and there are different ways from which we can implement stack in Python. Here we will discuss about few methods. The first method is we can implement stack using built-in data structure list and the second method is we can implement stacks using different modules. Today in this tutorial we will see how to implement stack using list. About this we will discuss in the next tutorial. Stacks operates in LIFO order last in first out and the two basic operation of stack is push and pop. In the push it will add the element to the stack and in pop it will remove the elements from the stack. This push and pop operation will add and remove elements in the same end. So when we are using list as stacks for the push operation we can use append method and for pop operation we can use pop method of list. In the append we will add the element to the end of the list and in the pop method we will remove the element from the end of the list. Here the operation, the adding elements and removing elements is done in the same end. In the stack also we will perform operation in the same way. So in the list for the push operation we need to use append method and for the pop operation we need to use pop method. So I will show you the example for this. So I will create a stack that is the empty list. Next if I want to add element to the stack now I can use append. Okay it will append the element to the stack now at the end of the list. For the next element, for the next element like this it will append the element one by one. You can check the stack here. Now if you want to pop the element then you can use pop method. When I use pop method it will remove the last element from the stack so it will remove 31st. It will remove 20 next. It will remove 10 next. If again try to pop the element it will give the error. You are popping from the empty list. Okay in this way you can perform the push and pop operation using list. Here the operation is performing in the same end right. At the end of the list we are adding the elements and we are removing the elements from the same end. And the first entered element is removed at the last. Here the operation is performed in the LIFO order. Last thing first out. Next if you want to check whether the stack or list is empty or not then you can use length function length of stack is equal to equal to zero true. Now stack is empty so it will give true or you can use not operator that is you can take not stack. It is true that means stack or list is empty. If you want to check stack is empty or not you can use these two methods. Next if you want to access the last element of the stack or the element present in the top position. When we add the elements last entered element is top element right. Now if you want to access that then you can use indexing method that is first I will add few elements. Now if I want to access the last element of the stack then you can use the index as minus one. The index of last element is minus one so it will give the last element 20. The element present in the top position. In this way you can use list as stack. So next let's see a complete example. So here what I am doing is first I will take empty stack empty list. Next here I define the push operation. This is the push function. This is the pop function and here we are taking while true that is we are continuously executing the while body here. Here we will ask the user to select the operation whether you want to perform push or pop or quit which operation you want to perform. Then we will ask the user to enter that choice and if you want to perform push we will execute this push function body. If you want to perform pop we will execute this pop function body. If you want to quit if you don't want to do any operation then you can press 3. If choice is 3 it will execute break statement that is nothing but it will come out of the loop. And in the push function we will ask the user to enter the element and using append method will add that element to the stack and will print the stack. And in the pop method first I will check whether the stack is empty or not. If stack is empty I can't pop the element from the stack right. So it will print that message stack is empty. Otherwise we will use the pop method and will remove the element from the stack. So let's execute this program. Select the operation which operation do you want to perform. I want to push first I want to push add the element enter the element so I want to add 10. Next select the operation I want to again push enter the element 20 I want again push I want to add element 30. Done. Now I want to pop this so I will press 2 so it will remove element first 30. Now again remove 20 now 10 is left in the stack. Now I want to quit so I will press 3 it will stop the execution of the program. Here you can see initially if you want to pop if you press 2 initially stack is empty. If you want to perform the pop operation it will print stack is empty. It will print that stack is empty message. So you can quit and you can write this program in another way also. You can set the maximum size or the limit of the stack. First you can ask the user how many elements you want in the stack and you can set the limit to the stack and if you enter more than that if you enter more element than the stack limit you can print a overload or stack is full message. So I will show you another example. So here we have the program same program here what I did is first we will ask the user to enter the limit of stack. First we will ask the user to enter the limit of stack. How many elements we can enter to the stack. Next while this is same here also this is same everything is same here but in the push operation here I will chuck the length of stack. If that length of stack is equal to equal to n that is nothing but the stack limit then it will print list is full message otherwise it will enter the element to the stack. Nothing is changed here in the pop function we are just checking whether list is full or not. So now if I execute this so limit of stack so I will enter 3 and I will push. Now if I again try to push list is full so it won't ask you to enter the element it will print list is full message. This part of the program runs same as the previous program. Ok so in this way you can use list as stacks in python and in the next tutorial we will say how to implement stacks using modules. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.