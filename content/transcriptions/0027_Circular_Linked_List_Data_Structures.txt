 Hello guys and welcome to Python programming tutorials by Amalia's Academy. We are discussing about data structures and in that we were discussing about Linked List. Previously in this video series we learnt about Singly Linked List and its operation, Depply Linked List and its operation and next we will discuss about Circular Linked List. Circular Linked List is also a type of Linked List. It is the collection of nodes where each node is connected through links in such a way that it forms a circle. Or in another words we can say Circular Linked List is a Linked List whose nodes are connected in such a way that it forms a circle. And Circular Linked List can be Singly Linked List or W Linked List. That means we have two types in Circular Linked List that is we can make the Singly Linked List as Circular Linked List. So Circular Singly Linked List or we can have Circular W Linked List. We can make Singly Linked List as Circular and also we can make W Linked List as Circular. In the Circular Singly Linked List the last node contains the link of the first node. That is I will show you the diagram. In Singly Linked List every node contains data field and a link right? It contains the link or reference of the next node. And the last node contains the reference to null or none. But in the Circular Singly Linked List it will contain the reference or link of the first node. So that is why it will form a circle. Here you can see this node, this is the first node. It contains the reference of this node. And this is the second node which contains the reference of this node. This is the last node which contains the reference of the first node. So here we can see a circle right? That is why it is called as Circular Singly Linked List. And in the case of W Linked List in the W Linked List every node contains the data field and two links. Here every node contains the next node link as well as previous node link. And if you want to make this W Linked List Circular then here in the last node next link reference should be 0.2 none in the W Linked List. But here it will point to the first node. It will store the reference of the first node. Here you can see. And also in the first node the previous reference will contain the reference of the last node. Instead of containing none or null value it contains the reference of the last node. So now here we can see it is a circle right? Because Circular W Linked List forms a circle of nodes you can start from any node and you can traverse the entire Linked List. Because it is a circle so if you start from any point you can complete the entire circle. But the problem with the Circular W Linked List is if proper caution is not taken then it may lead us to an infinite loop. Because it does not contain none value or null value we may not identify the stopping condition and it may lead us to an infinite loop. So we need to be careful while dealing with this Circular Linked List. Alright next we will discuss about Circular Linked List Operations. Like single linked list and W Linked List here also we will discuss about three operations that is insertion, deletion and traversal operation. In the insertion operation we will add new nodes to the Linked List. In the deletion operation we will remove the nodes from the Linked List and in the traversal operation we will go through each node and will print its data. So let's discuss every operation one by one. First we will discuss about the insertion operation and here for the demonstration purpose I will take the Circular Singly Linked List and now if I want to add any new node to the Circular Singly Linked List then how to do that. So first let me take the first condition that is if I want to add the new node when the Linked List is completely empty that is when head is pointing to none if head is pointing to none that means Linked List is empty right. If that case I want to insert the new node to the Circular Linked List then how to do that. For that first step is you need to create the node. So the first step in insertion operation is we need to create the node. Like this you can create the node and here what you need to do is you need to point the link or reference of this node to here itself and we need to point head to the new node. Because this is the Circular Linked List the link or reference of this node need to point to itself because it contains only one node right. So to form a circle it need to point to itself like this. This is how you can insert the new node when Linked List is completely empty. Now if Linked List contains few nodes at that time if I want to add the new node how to do that. So for that let's take few scenario that is how to insert at the beginning of the Linked List at the end of the Linked List and in middle. So in the insertion operation we'll discuss about these three scenarios that is how we can insert the new node at the beginning of the Circular Linked List at the end of the Circular Linked List and in the middle of the Circular Linked List. So first we'll discuss about this at the beginning of the Circular Linked List. So for that first step is same we need to create the new node. So let's create a node like this. I'll take a data field. After that I need to store here the reference of the first node previous first node right. So I need to point this to here that means here it need to contain 10 and later head need to point to this because this is the first node now. So point head to the new node and also the last node should contain the reference of the first node this node now right. Instead of pointing here it need to point here and it should contain the reference of this node if I take its reference as 3200 it should contain 3200 here. So if you want to add the new node at the beginning of the Circular Linked List first you need to create the node next you need to change the reference or link of the newly created node it should contain the reference of the previous first node and next head need to point to the new node and the last node need to store the reference of the first node that is the new node. In this way you can add the new node at the beginning of the Circular Linked List. Next let's see how to add the new node at the end of the Circular Linked List. The first step is same we need to create the node. So let's create the node like this with the data field. Next here this node should contain the reference of the new node so this need to point to here not here. So here you should contain the reference of this node if I take reference as 60000 it should contain the reference here it should store this reference and also this node the newly created node should point to the first node right it should store the reference of first node that is 3200. So to add the new node at the end of the Circular Linked List first you need to create the node. Next you need to store the new node reference in the last node of the linked list here and in the new node you need to store the reference of the first node. Now next discuss about the next scenario that is how to insert the new node at the middle of the Circular Singly Linked List. So for that I'll insert here okay between these two nodes. So for that first step is same create the node. So let's create a node like this and I'll take 500. I'll take its reference as 7200. Now here what you need to do is you need to store here the reference of this node. So this will become the next node so 5100 you need to store that and here you need to change its reference it need to store the reference of the new node. This need to store the reference of new node that is 7200. Because we are inserting the new node in the middle of the linked list so it is same as the how we insert the new node in the middle of the single linked list. You need to change its reference and its reference. So in this way you can perform the insertion operation. Next let's discuss about the deletion operation how to delete the node from the linked list. In the deletion operation also we'll discuss about different scenarios that is how to delete the node at the beginning of the Circular Linked List at the end of the Circular Linked List and in the middle or we can call it as delete by value also. So let's discuss about every scenario. First let's see how to delete the node at the beginning of the Circular Linked List. So we want to delete this node right. So for this what you need to do is you need to point head to the second node the next node. After that here in the last node you should store the reference of the this node second node. Not this because we want to delete this node so it need to point to here. So here it need to store 5500. Now head is the starting point of the Linked List. So this will be the first node and it contains the reference of 4200. And this contains the reference of this node. So this node is treated as it is removed from the Linked List. Next let's discuss about the next scenario that is how to delete the node from the end of the Linked List Circular Linked List. So for this we need to first travel to the second last node. We need to come here and here we need to store the reference of the first node. Here store the reference of the first node that is 1010 here. Now this node is treated as it is removed from the Circular Linked List. Here this is the starting point head. So this is the first node. It contains the reference of 5000. So this is the second node. It contains the reference of 1010. So now this node is treated as it is removed from the Linked List. This is how you can delete the node from the end of the Circular Linked List. Next lastly let's see how to delete the node by value or from the middle of the Circular Linked List. For example now if I want to delete this node. So for this first you need to come to here the previous node of the node which you want to delete. For example if this is x I want to come here this previous node and here you need to change its reference to here. You need to store the reference of this node. Instead of 5000 here you need to store 4200. Now this node is treated as it is removed from the Circular Linked List. So this is about the deletion operation. Next we'll discuss about the traversal operation. In the traversal operation what we'll do is we'll go through every node and the will print its data. But in the Circular Linked List you need to be careful because we don't have any none or null value to identify the last node. In the single Linked List and in the doubly Linked List the last node will point to the none or null. It will store the reference to none or null. That's why we can identify the last node easily. We can start from the first node and we can stop in the last node. But in the Circular Linked List last node will not point to none or null. That's why we need to start from the next node of the last node. That is nothing but the first node and we need to print its data and we need to move to the next node. And we need to do this until I'll reach the node which contains the reference to the first node. That is the last node. So instead of checking the reference is node reference is none or null we need to check it is equal to the the reference stored in head the first node reference like that you need to perform the tabular operation. So this is about the Circular Linked List and its operation. And this is the last video on the Linked List topic. That means I'm not making the video on the Circular Linked List program. You can write the Circular Linked List program by taking the single Linked List program as the base and can convert that program to work for the Circular Linked List. And that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then, take care.