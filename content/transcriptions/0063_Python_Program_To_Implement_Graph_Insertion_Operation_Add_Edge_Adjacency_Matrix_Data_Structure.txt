 Hello guys and welcome to Amoleus Academy YouTube channel. We are discussing graph insertion operation and in the previous tutorial We wrote a function to add a new node to the graph using adjacent semantics representation Next let's write a function for add edge operation That is we want to write a function to add an edge between given vertices So first open up the python file in the previous tutorial. We wrote add node Function and this is the print graph function So let's define another function here to add an edge So i'll take def function name as add edge So if you remember in the previous tutorial i told you while adding an edge We need to mention two vertices v1 and v2 And if you are adding a new add to the weighted graph then here you need to mention the Weight also weight of that edge also But here first let's write the function for undirected unweighted graph In the previous tutorial while writing the function for add node operation We didn't worry about whether the graph is directed or undirected or weighted graph That is because add node operation works same for the directed or undirected or weighted graph adding a node doesn't change the Directionality or the weight of the graph The direction or weight of the graph is connected to the edge right? That's why here while writing the function for add edge. We need to be careful whether we are Writing this function for the weighted graph directed graph or undirected graph First we are writing the function for undirected and unweighted graph So that's why i'll just take v1 and v2. No need to take the cost Now here we have an undirected unweighted graph. We are writing the function for this Now if i call add edge function Here i need to pass v1 and v2 for example e and f I want to add an edge between e and f like this Before adding the edge we need to check whether that given nodes are present in the graph or not If i just mention here e and x Add an edge between e and x there is no node called x here right? So we can't add edge from e to x or x to e So that's why before performing the add edge operation We need to check whether the given nodes are present in the graph or not Let's do that here in the function first. I need to check if v1 that is the first node v1 not in nodes What is nodes here nodes is a list which contains all the nodes of the graph Here we have nodes right this is the list in which we'll store all the nodes of the graph So i'll check if v1 not in nodes I'll check if v1 that is the first vertex is present in the nodes or not Here this condition becomes true when v1 is not present in the nodes Here we used not in right So if v1 is not present in the nodes this condition becomes true If this condition becomes true, that means the given node is not present So i'll just print the message that is v1 is not present in the graph L if i need to use l if here First i'll check whether v1 is present or not if the first vertex is not present in the graph then we'll print this message If first vertex is present then i need to check whether second vertex is present or not So here just copy this control c Control v i'll check whether v2 is present or not Now this condition becomes true only when v2 is not present in the nodes Okay, if node 2 is not present just like here v2 is not present in the graph We need both the nodes in the graph To add an edge between v1 and v2 We want v1 and v2 need to be present in the graph If any one of the node is not present we can't add an edge if both the edges are not present then also we can't add an edge Now here else if the control comes to the else part that means v1 and v2 both are present in the graph You know how if l if else works, right? If both the nodes are present then what we need to do Here i'll check whether e and f are present in the nodes. Yes, here it is present Then what we need to do we need to add an edge Then what changes we need to do here in the nodes and graph This is the list nodes list of nodes and this is the graph We gave the matrix name as graph and this list name as nodes in the previous tutorial No need to change anything here because this is the list of nodes and we are not doing any changes to nodes So no need to do anything here In the graph matrix we need to change connection We need to change graph of e and f Here there is an edge from e to f. So we need to make this as one And because this is an undirected graph there is an edge from f to e also. So here this is uh f So here e We need to change this also We need to change like this But here this is a nested list here in our program Matrix is a nested list and in the nested list index is numbers like 0 1 2 3 4 I can't write it like this right So now what we need we need index of v1 and index of v2 Here you can see this is the list Here the index of e is 4 index of f is 5 and here this position is nothing but graph of fourth row fifth column This position is nothing but fifth row fourth column Right, that's why first we need to get the index of v1 and v2 Because in the nested list or matrix we need to change the values in that index So here first let me take index 1 A variable and to get the index in the list we need to use index method So here list name is nodes So nodes is the list which contains all the nodes right all the vertices of the graph is stored in nodes list here So nodes index Mention v1. So I want to get the index of v1 in the nodes list Here you can see to do changes here. We need the index of this place right row and column value This is fourth row and fifth column. How? Here e is present at fourth and f is present at fifth index We need to change graph of e f Here we need to write the index of e and index of f and to get the index of e and f We need to use index method on this nodes list And I need index 2 that is the index of v2 Right now we know index 1 and index 2 now what we need to do? We need to change graph index 1 index 2 I need to make this value as 1 in the graph also index 2 index 1 like this as 1 Because this is the undirected unweighted graph. That's why Here after getting the index of e and f what I need to do So index of e is 4 index of f is 5. So we need to do like this right That's what I did here. Now we are done. Let's execute this. So here I'll add an edge between a and b like this Let's execute this say when execute and here you can see there is an edge from a to b b to a Here you can see the graph also Cool right from a to c also C is not present in the graph. So Here we can't add that if I do a to d Here you can see a to d there is an edge from a to d d to a Okay, so this is for the undirected unweighted graph now I want to modify this function for um weighted undirected graph So for the weighted graph here you need to add another parameter that is cost And here instead of storing one you need to store cost simple And here while calling this function add a cost like this Okay, let's execute this So here you can see 0 10 5 0 0 0 5 0 0 and here you can see the matrix shape You can format this matrix like here Can use format I already explained about the format function in the pattern program If possible, I will give the link of that video in the description box So you can understand how this function works Here uh just because uh it is not printing the numbers in proper Shape I used that format function here. You can see now Just for the proper representation All right, so we know now how to write the add edge function for Unweighted undirected graph undirected weighted graph next let's see how to modify this function for Expected graph. So in the directed graph Okay, it is depends on you whether you want to Make this for directed weighted graph or directed unweighted graph Here, let's do this for directed weighted graph. Okay. So here we need cost And here in the directed graph if I add edge e to x This edge will look like this, right? Is this starting point x is the ending point? So add an edge from e to x So what we need to do at that time we need to change Here in the adjacency matrix graph of e and x Here there is an edge from e to x there is no edge from x to e I explained about this in the previous tutorial and to change this first we need to get the index from here So e is uh four x is uh seven So here graph of fourth row seventh column that is fourth row seventh column Fourth row seventh column here you need to add one If this is not a weighted graph it is a weighted graph then you need to add the weight of the edge Here we need to do the changes in the v1 through v2 column No need to do any changes in the v2 through v1 column that is because there is no edge from this to this So that's why this is not needed. That's it. Now if I execute this Like this Now we want to modify this for Unweighted directed graph then you just need to move cost here remove cost here And instead of cost you need to add one and also here no need to give cost For unweighted directed graph Here you can see All right. So this is about add edge function How to add an edge between given two vertices in the graph using adjacency matrix representation? So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel I will meet you in next class till then take care be safe