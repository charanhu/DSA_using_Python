 Hello guys and welcome to Python programming tutorials by Amalia's Academy. We were discussing about data structures and in that we were discussing about Linked List and in the previous tutorial we saw the introduction part of the Linked List. In the previous tutorial we also learned that there are three types of Linked List, that is, singly Linked List, doubly Linked List and Circular Linked List. So we'll discuss about each type in detail. First we'll discuss about singly Linked List. In the Linked List it is also called as single Linked List or simple Linked List. If each node of the Linked List contains only one link that is the link of the next node then that is called as singly Linked List. Singly Linked List is a chain of node in which every node contains data and link to its next node in the chain. Each node contains the data field and the link of the next node. You can represent a single Linked List like this. We are familiar with this diagram, right? Because while explaining about the Linked List I took the singly Linked List and here the last node of the singly Linked List, that is this node, the last node, contain the reference to null or empty value and the starting point of the Linked List is called as head that will store the reference of the first node and all the other nodes will store the reference of the next node. It is a most commonly used Linked List because it contains only one link that is the link or reference of the next node. It allows you to go in the forward direction only. Moving in the opposite direction is not easy because here each node knows which is its next node where it is present but it doesn't know about its previous node. In each node it contains data field and link of the next node. That's why in the singly Linked List it allows us to move in the forward direction. Moving in the backward direction is not easier. Alright, so this is about the singly Linked List. Next let's talk about the operation performed by the singly Linked List. Singly Linked List can perform many operations but here we'll discuss about the operation that is adding elements to the Linked List, removing the elements or deleting the elements from the Linked List as well as traversal operation traversing the Linked List. So we'll discuss about these three operations here. So first we'll talk about the adding operation that is how to add elements to the singly Linked List. Adding or insertion operation to add or insert the element to the Linked List we need to break the link. We need to break the already existing link and we need to form a new link. While adding the element we can perform this operation in different places that is we can add the element at the beginning of the Linked List, at the end of the Linked List or in between, in between the nodes we can add new nodes. We can add or insert a new node at the beginning of the Linked List or at the end of the Linked List or in between the existing nodes. So we'll discuss about these three scenarios. What will happen if we insert the element in this position. First we'll insert the element or node at the beginning of the Linked List. I'll show you that with the diagram. So here when I took this arrow mark that is nothing but it is storing the link of the next node right. That is the address of the next node. So first let me take the random address. I'll take 10, 1074 and here this node will contain the link of this. So 1074 will be stored here. 21 here, 1134 here. This will be stored null value, reference of the empty value and this in head the reference of the first node is stored that is 1010. So this is the presentation of single Linked List. Now if I want to add the element at the beginning of the Linked List then how to do that. So for that the first step is to add the element at the beginning you need to create the node. So first create a node. So let me create a node. Here I'll create a node and each node contains the data field and link. So here I'll take data as 100 the element and initially I'll take it will point to the null. I'm creating a node first to insert or add element to the Linked List. First we need to create a node right. So here we can see we created the node. The next step is so this is the new node. Now this is the new node. Here first I need to change the next of new node. So point this next of new node to head. Whatever the address stored in that store here. So that is nothing but it will point to this first node. The second step is here whatever the reference is stored in head store here. So that is nothing but it will store 1010. So that is nothing but here we are pointing this. Here head is also initially pointing this right. Now what we did we created a new node and we are pointing the next of new node to the head. That is nothing but 1010. So it will point here. Next the third step is we need to change the head. Okay we need to point head to the new node. That is nothing but it will point here. We are not pointing here. We will point here. That is nothing but the head will store the reference of this address of this. Whenever we will create a node it will have its own address for example 2210. So that will be stored in the head now. So now here we can see new node is added right. Head is pointing to the first node and this node is pointing to the next node. This is pointing to the next node like this. The third step is point head to the new node. Simple first create a new node. Okay next point the next of that new node to the head. So whatever the address present in that. So that is nothing but point this new node to the first node. Next point head to the newly created node. If you are confused simple create a new node then point this to this because this will be the second node right next node of this because we want to insert at the beginning. It is the first node now for the link release to point head to here. The first node simple okay these three steps. So now we know how to add the element at the beginning of the linker list. Next how to add the element at the end of the linker list. To add the element at the end of the linker list. So the first step is same create node. So let me create a node first. So here I will create a node like this and let me add element as 200 and initially it is pointing to null. The created node will have address I will take it as 1000 some random address. Okay so now the second step is you need to go to the last node. You need to move to the last node starting from here you need to go to last node here. This is the last node you need to move here. So the second step here is go to last node. So now we are here last node. Now what you need to do is you need to change the link of this node. The last node to newly created node. So point here simple right instead of pointing null you need to point here that is nothing but it will store this 1000 and here. Now we are done. So the reference of last node equal to new node. So if you are confused with this I will explain you again. So it is pointing to null now initially. So the first step is we need to create a new node with some value and it will initially point to null. Now what we need to do is we need to move to the last node and we need to change this pointer to this newly created node just point here that is it. So in this way you can add the element at the end of the linker list. Now the last step is we need to add the node between two nodes okay in between in the middle. So this also first step is same create a node to add element to the linker list. First we need to create a node simple. So let me create a node here with value 500 and it is pointing to null initially done. So now what we need to do is where you want to insert this. So let me take I want to insert between these two. First I want this element this node after that I want this node after that I know want this node okay. So I want to change like that I want to insert the new node here right. So for that first you need to traverse to the previous node that is this node move to the previous node here. So here go to the just before the required position of the new node. So I want to place new node here. So I want to go to the just before node that is this node. So now what I need to do is I need to point. So I need to point this here. I would want to store the address of this instead of that I want to store here address of this. So you need to store that here okay it will point here. Now in the next place here in this position instead of null I need to point here this address I need to store this okay here I need to store one one two one it's address. If it is little bit confusing don't worry I'll explain you again. Let me take this as x this x y and this is z. So now I want to insert here right in between these two nodes I want to insert new node. And next what I need to do is I need to change this this is nothing but x of link whatever links stored in this x I need to change that to new node. So that is nothing but instead of pointing to this I need to point this okay new node and here I need to change the new node reference to the next node here. Here x reference should be equal to new node that is nothing but z and z-car reference the new node reference will be the y. So whenever I want to add a new element between the two nodes here this is the previous node this is the next node right. So here this need to point here and this need to point here. Now here we can see link is inserted between here right it is moving like this go here next go here next go here next go here. So now we are done with the insertion operation next we'll talk about the deletion operation. In the deletion operation also we can delete the element from that is at the beginning at the end and from in between or middle of the nodes okay. So we'll discuss about these three scenarios now. So first we'll see how to how to delete node at the beginning that is how to delete the first node. So for that here we can see this is the first node right. So delete this what you need to do is you need to just point the head to here that's it while deleting the nodes in the linker list you need to change the link that's it here just you need to change the link of head to second node. So head is nothing but the starting of the linker list so now it is treated as it is removed from the linker list. So it will start from here linker list the first element second element third element last element. Next how to delete the element at the end of the linker list. So to delete the element at the end that is here we want to delete this right. So for this what you need to do is you need to go to the previous node of the last node that is nothing but here you need to travel to here go to the second last element and change its next pointer to null. Now it is storing the link of this just remove this and store this to null. So now the link is break the here the last element is this now to remove the element or delete the element from the end of the linker list you need to go to the second last element and you need to set the linker reference to null. So last scenario that is we want to delete the element from the middle. So now I want to delete this node this is present between the nodes right now what we need to do is to delete this node go to the element before the element to be deleted. I want to delete this so I need to go to here now what I need to do is I need to change the link or reference to the next element I need to store this now instead of the this I need to break the link here this and I need to join the new link. So while moving first this is the first node second node here we can see it will contain the link of next node that is nothing but this node. So this will be the next node after that this will be the next node. Alright so this is about adding the elements I am deleting the elements next we need to go to the next operation that is the traversing the linker list. So traversing is nothing but going through every single node starting with the head of the linker list and ending on the last node. If you want you can go through each node and you can print the information present in that node you can traverse the linker list like this. Start with the head of the list access the content of the head node if it is not null. So start with the head node if it is not null then access the content of that node then go to the next node and access the node information continue this process until you will reach the last node. Okay so this is about the single linker list or single linker list. So today we saw the theory part right and in the next tutorial we will write the program. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you next class till then take care.