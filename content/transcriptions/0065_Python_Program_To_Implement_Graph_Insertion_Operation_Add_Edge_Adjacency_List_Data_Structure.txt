 Hello guys and welcome to Amuleus Academy YouTube channel. We were discussing graph insertion operation. In the previous tutorial We wrote a function to insert a new node to the graph using adjacency list representation Today we'll write a function to add an edge between given vertices in the graph using adjacency list representation So for that in the Python file here, we can see we have add node function which we discussed in the previous tutorial Next let's define the function for add edge operation add edge And here we need to mention vertices v1 and v2 To add an edge we need two vertices, right? And here we need to mention that v1 and v2 And while writing the add edge function, we need to be careful about the type of graph That is whether we are writing this function for directed graph or undirected graph or weighted graph or Unweighted graph that is because if you are writing this program for weighted graph Then you need to mention the cost here cost or weight of the edge All right first here we'll write this function for Unweighted undirected graph So in the add edge operation that is when I want to add an edge between two vertices First I need to chuck whether the given vertices are present in the graph or not If the vertices are not present in the graph, then how to add an edge, right? Here I have an undirected Unweighted graph And if I want to perform add edge operation here If I take vertices as e and x here x is not present in the graph, right? So I can't add an edge from e to x now That's why before adding an edge I need to chuck whether the given two vertices are present in the graph or not So for that we'll use if a lift condition and first I'll chuck whether we one that is the first vertex not in graph This condition will chuck whether the first vertex is present in the graph or not This condition will be evaluated as true only when v1 is not present in the graph If v1 that is the vertex one is not present then we'll just print a message If this condition becomes false, that means v1 is present in the graph Next I need to chuck next condition. I need to chuck whether v2 not in graph Here not in some membership operator and I'll chuck whether v2 is present in the graph or not Here this condition will be evaluated as true only when v2 is not present in the graph So if it is true then I need to print this message Saying that v2 is not present in the graph Next here I'll use else case So first I'll chuck whether the first vertex is present in the graph or not if it is not present I'll print this message If it is present then I'll come here and I'll chuck this condition whether v2 That is the vertex 2 is present in the graph or not if it is not present we'll print this message If it is present that means both the vertex or the given nodes are present in the graph So we need to add an edge between v1 and v2 Here this is an unweighted undirected graph when I add an edge from e to f Here I need to change the adjacency list of f and e Because this is an undirected graph there is an edge from e to f and f to e f is adjacent to e and e is adjacent to f That's why in the adjacency list of e we need to add f here like this And in the adjacency list of f you need to add e So here we need to append f to the list of e So for that first we need to access this list in the dictionary to access the value we need to use key So if I want value of key then I need to write graph of e And I need to append a value so dot append graph of e is a list I'll use append method on that and append f Here what is e and f? E is v1 f is v2 Okay, so instead of that we can write graph of v1 dot append v2 So here graph of v1 dot append v2 Here we used add edge e and f here e is v1 f is v2 First here we need to change the value of e When I add an edge between e and f first I need to change the value of e key I need to append f to this list for that. We are writing like this graph of e dot append f Here e is nothing but v1 f is nothing but v2 Next what I need to do I need to change the value of f Because there is an edge from f to e also So I need to write graph of f So to access the value of this key I need to write graph of f append e that is nothing but graph of v2 dot append v1 Here graph of v2 append v1 this is in the undirected unweighted graph Okay, now we are done. So let's see here. We have two nodes in the graph. Let's add an edge between a and b Now here you can see b is adjacent to a and a is adjacent to b If I add another node if I take c C is empty because there is no edge from c to any other node and any other node to c Okay, so this is about undirected unweighted graph Now if I want to modify this function for undirected weighted graph then how to do that In the weighted graph values are nested list and the first value will be node and the second value will be cost Okay, so for that what you need to do is first here you need to take another parameter and here You need to take a list because we need to store node and cost and values are nested list here. That's why take a list. I'll just take list one and here v2 and cost and here next take list two Here v1 Cost and here you need to append list one and list two So now here while calling this you need to append a Cost also Here you can see in a b and 10 in b a and 10 Now if I add an edge from a to c Here a b and 10 c and 5 for b a and 10 and for c a and 5 Well here you can see a graph right For example here there is a node and if I want to add an edge between e and f now So I'll call add add e and f and I'll take cost as 5 Now what we need to do is first here when I add f there will be a key And initially it will be empty list like this Now we added an edge from e to f and cost is 5 Now we need to change the value of key e and value of f because this is an undirected graph So we need to change both And here for value of e I need to append another list And in the list we need to have node that is f adjacent node plus its cost for this I took a list one And in that I stored f and 5 its cost and value After that we'll change the value of this so to get the value of this key I'll use graph of e that is graph of v1 here This is cost graph of v1 dot Append and we need to append this list to this list Okay, that's why we'll append list one. So this is v2 cost that is v1 cost Okay, so this is about the undirected and weighted graph next let's talk about the directed graph For the directed graph what changes we need to do in this function Okay in this directed graph if I add a node here If I add an edge from e to f like this then what we need to do We need to change the adjacency list or list or value of this key This node because there is an edge from e to f but there is no edge from f2e So when I call add edge e to f like this This is v1 and this is v2 So we need to change the values of key That is v1. So we need to write graph of v1 dot append We need to append v2 If it is an unweighted graph if it is an weighted graph then there will be an cost and we need to append that also So we need to take a list And we need to append a node and Its value And we need to append this list instead of v2 we need to append this list So here so we'll modify this program for directed weighted graph So this line is not needed. We just need to change the values of v1 No need to change the values of v2 because this is the directed graph right now if I execute this here You can see the values And here you can see the graph also Now if you want directed Unweighted graph then remove cost here And here we don't want this also because It is an Unweighted graph. So in the unweighted graph, we don't need value as nested list. So here we need to insert v1 And while calling this you need to take this cost Now we are done Here you can see Sorry here v2 right And here you can see Alright, so this is about the add edge function using adjacency list representation So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class Take care