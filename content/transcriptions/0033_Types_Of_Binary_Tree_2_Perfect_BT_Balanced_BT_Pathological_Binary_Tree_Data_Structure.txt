 Hello guys and welcome to Amalia's Academy YouTube channel. We were discussing about tree data structure and in the we were discussing about types of binary tree. And in the previous tutorial we discussed about full binary tree and complete binary tree. Today we will talk about these three types of binary tree. So the next type in the binary tree is perfect binary tree, the third type. Perfect binary tree is a binary tree in which all internal nodes have two children and all the leaf nodes are at the same depth or same level. All the internal node of a binary tree should contain two children and all the leaf nodes should present in the same level. Then that tree is called as perfect binary tree. And don't get confused with the full binary tree. In full binary tree leaf nodes can be in any level. But here in the perfect binary tree all the leaf nodes should be present in the same level. Right. So let's take the example. So this is root node is also an internal node so it contains two children. Now this this node should also contain like this and here you can see this is a perfect binary tree because first is here we can see every internal node. These three are the internal nodes here and all the internal nodes contain two children here you can see. And the second is all the leaf nodes are present in the same level. Level zero level one level two level two all the nodes are present in level two. So that's why this is a perfect binary tree. Now if I take another example this is not a perfect binary tree because here even though all the internal nodes contains two children but here these leaf nodes are not present in the same level. Now if I add two child nodes here also now it is a perfect binary tree because here we can see leaf nodes are in the same level and every internal node contains two children. And also this is not an perfect binary tree because here root node is also an internal node and this root node contains only one child node. That's why this is not a perfect binary tree. So to chuck whether a binary tree is perfect binary tree or not first you need to chuck whether all the internal nodes contain two children. Next you need to check whether all the leaf nodes are present in the same level. If both the conditions are true then that tree is the perfect binary tree. Alright to understand this better let's take few more examples. So here I have few examples let's see whether these trees are perfect binary tree or not. So the first example is this by looking at this you can say it is not a perfect binary tree because here you can see leaf nodes are present in the different level. Even though all the internal nodes contains two child nodes but it is not a perfect binary tree because leaf nodes are not present in the same level. So this is not. So second example is this here also you can see right it is not a perfect binary tree. Why? Correct because leaf nodes are not present in the same level. Yes now this is a perfect binary tree because here we can see this is the internal node which contains two children. These two are the leaf nodes and which are present in the same level. So this is a perfect binary tree. Next let's move on to the next example. Here you can see it is not. Of course leaf nodes are not present in the same level. And this is the fifth example and here yes because here we can see every internal node contain two children and all the leaf nodes are present in the same level. I hope now you are clear with the perfect binary tree. In the perfect binary we need to chuck the internal node first whether it has two children or not and you need to chuck whether leaf nodes are present in the same level. Done. So next let's talk about the next type of binary tree and the next type is balanced binary tree. So let's see what is this? Balanced binary tree is a binary tree in which height of the left and the right subtrees of every node may differ by at most one. So here to chuck whether the given binary tree is balanced or not, first you need to chuck the absolute difference between the height of the left subtree and height of the right subtree. And you need to chuck this difference for every node and this difference should not be greater than one. It can be less than one or equal to one. If it is less than one or equal to one then that is the balanced binary tree. If it is greater than one then that is not the balanced binary tree. We need to find out the difference for every node. How to find the difference? We need to find out absolute value of height of left subtree minus height of right subtree. So this is the formula to find out the difference and you need to find this difference for every node of the given binary tree. And this difference should be less than one or equal to one. If it is less than one or equal to one then that is the balanced binary tree. And if it is greater than one then that is not the balanced binary tree. Simple right? So let's see an example. And here is one thing. I saw a different method to find out the height of left subtree and height of right subtree. But by the end we will get the same result that difference will get is same. So if you are a student then just follow whatever return in the textbook. Right? Now here we have tree and we need to find out this difference for every node. Let's begin from the root node. So here let's find out this difference. And here we need to find out height of left subtree and height of right subtree. I hope you know how to find out the height of a tree. Height of a tree is nothing but height of its root node. And here this is the left subtree of root node and this is the right subtree. For this subtree this is the root node and its height is one. Here you can see. We need to see the number of edges present in the path. And here we can see one. So here height of left subtree is one. And here we can see height of right subtree. This is the leaf node so its height is zero. Should remember the height of leaf node is zero. So here this is the leaf node so height is zero. So we will get one minus zero. That is nothing but difference is one. So now we know the difference of this node. Next let's move on to the this node. We need to find this difference for every node. This is the left subtree and this is the right subtree. And here we can see height of this tree is zero because this is the leaf node and height of this also zero. So we will get zero minus zero. So here we will get zero. Next let's move on to this node. And here we can see we don't have left tree or right tree for this node because it is a leaf node. And we will take height of empty tree as minus one. So here we can see it doesn't have left subtree, right subtree. That is nothing but both are minus one. So I will get minus of minus one like this. So here minus minus become plus minus one plus one. It will become absolute value of zero. So we will get zero here. And for all the leaf node we will get the difference as zero because here we can see it doesn't have left subtree, right subtree. So we will get minus one of minus one. Because here we can see it doesn't have left subtree, right subtree. So we will get minus one of minus minus one. So zero. Okay. So now here we can see we have the difference for every node and it is not greater than one. It is equal to one or it equal to zero. So that means it is a balanced binary tree. Now let's take another example. So let's begin with the root node. So here this is the root node. So let's find out its left subtree and right subtree. This is the left subtree and this is the right subtree. And the height of the left subtree is two. Here one two. So minus and height of right subtree is zero because this is the leaf node. So two minus zero. So I will get two. So now no need to find out other difference because here we got the first difference as two. As I said, we need to chuck the difference. That is the height of left subtree minus height of right subtree for every node and it should not be greater than one. Here we got two. That is nothing but it is greater than one. That means it is not a balanced binary tree. For every node height difference should be less than or equal to one. But here for this node we got two. That means it is not the balanced binary tree. No need to chuck for the other nodes. By looking at this also you can say right here this node is present here and this node is present here in the different level. And the level difference is also here too. So that is why by looking at this you can say it is not a balanced binary tree. To chuck whether the binary tree is balanced or not you need to find out the absolute difference of height of left subtree and height of right subtree. And this difference should not be greater than one. And to understand this balanced binary tree better. Let's take few more examples. Let's chuck whether these trees are balanced or not. By looking at this I can say this is a balanced binary tree because the level difference is only one. But let's chuck whether it is balanced or not. So for root this is the left subtree and this is the right subtree. And maximum height is two and here also it is two, two minus two so we will get zero. And for this this is the left subtree height is one. Height here is zero so one minus zero one. For this here height is zero minus here height is one but we will get the absolute value. So that is plus one. For this node this is the left subtree. This is the right subtree both are zero so zero. For this zero zero as I said for leaf node we will get zero. Here also this is zero minus zero so I will get zero and this is zero. So here we can see we are not getting any value which is greater than one. So that is nothing but it is a balanced binary tree. Next let's chuck here. This example so this is the root node and let's chuck its difference. So here this is the left subtree and this is the right subtree. So here one and two height and here this is for zero so two minus zero two. So first difference we are getting is two here so that is nothing but it is not a balanced binary tree. This was balanced binary tree this is not. Next here we have this. So here this is a balanced binary tree because here we can see zero zero will get zero. This is zero this is zero this is a balanced binary tree. And let's move on to the next example. By looking at this I can say this is not a balanced binary tree. Let's chuck that. This is the left subtree and height is two and the right subtree height is zero so two minus zero two. So this is not. And this is a balanced binary tree we can see because here we can see this is the left subtree and this is the right subtree. The height is one height of right subtree is also one so we will get zero. And for this zero minus zero zero zero and here also zero. So this is a balanced binary tree. So don't worry just find out the difference between height of left subtree and height of right subtree. You need to find out the absolute value and if it is greater than one then that is not a balanced binary tree. If it is less than one or equal to one then that is the balanced binary tree. And if you have any confusion how to find out that height of left subtree and height of right subtree what I did is. So this is the left subtree of this node. And this is the right subtree right. In this left subtree I took this as the root node and I need to find out the height of root node. So here the height of root node is two. And for this it is the root node and it is the leaf node that means height is zero. So that's why I got two minus zero here two. Okay I did the calculation like this. I hope you don't have any confusion now. So that's about the balanced binary tree. And let's move on to the last type that is pathological binary tree or degenerate binary tree. It is also called as degenerate binary tree. Degenerate binary tree is a binary tree where every parent node has only one child node. Simple right. Every parent node has only one child node. That means every internal node can contain only one child. So for example it is a degenerate binary tree because here we can say every parent node. This is a parent node it contains only one child node. It is a parent node it contains only child node it is a parent node it contains only child node. So this is a degenerate binary tree or you can say take like this also. This is also a pathological binary tree. It is not because this node contains two children. So that's why this is not degenerate or pathological binary tree. Simple right. So let's take more example. So the first example is this. Of course it is not right by looking at this I can easily say it is not because here this root node contains two children. It is not. The second example is this. This is also not a pathological binary tree because this node contains two children. So it is not. It is also not because it contains two children. It is yes because here we can see this node contains only one child node this node contain only one child node. So yes. This is also a big S because here node contains only one child node. Right. So this is about the five types of binary trees. I hope you are clear with all the five types of binary tree. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.