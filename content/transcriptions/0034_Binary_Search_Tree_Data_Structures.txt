 Hello guys and welcome to Amolias Academy YouTube channel. We were discussing about tree data structure and in the previous tutorial we discussed about binary trees and its type. Next in this series we will discuss about binary search tree or BST, the short form of binary search tree. And this binary search tree is also called as ordered or sorted binary tree. That means binary search tree is a binary tree. So now if I want to define the binary search tree, I can say like this. Binary search tree is a special type of binary tree with following properties. The first property is the left subtree of a node contains only nodes with keys lesser than the nodes key. And the second property is the right subtree of a node contains only nodes with keys greater than nodes key. And the third property is the left subtree and right subtree. Each must also be a BST. BST means binary search tree. Let's analyze this definition. Firstly you can see binary search tree is a binary tree. That means in binary search tree every node can have at most two children. Every node can have zero, one or two children. That is what binary tree is. So binary search tree is a binary tree. That means here also every node can contain at most two children. Next here we can see the next property is the left subtree of a node contains only nodes with keys lesser than the nodes key. For example if I have a node here with value 100 here key is nothing but the value nodes data. And if this node data is 100 now the left subtree of this node should contain those nodes whose keys are less than 100. For example if it contains only one node at the left side the value of this node should be less than 100. For example if it is 50 that's okay. If it contains more nodes here all the nodes should contain the key less than 100. This is the left subtree of this node right. The left subtree of a node contains only nodes with key lesser than nodes key. In the left subtree all the nodes should contain key lesser than this node key. The first point okay. And the second point is the right subtree of a node contains only nodes with key is greater than the nodes key. This is the right side. In the right side it should contain only those nodes whose keys are greater than this node. For example 200. So in the right side you can see the nodes with the key greater than 100. This is the right subtree okay. So in the left side we need value less than the nodes key. In the right side we need greater than the nodes key. And lastly the left subtree and right subtree each must also be a BST. That is nothing but here in the left subtree we can have many nodes right. For example here this node can contain at most two children. And this node can contain at most two children like that. Now all the nodes of this left subtree also need to follow this BST rule. That is for every node the left side nodes key need to be smaller and the right side key need to be greater than the nodes key. For example here we have 50 right. In the left side we can have key which is smaller than 50 for example 30. And in the right side it need to be greater than 50. For example 70. It can't be greater than 100 because this is the left subtree. So here it can't be greater than 100 but it need to be greater than 50. Here also in the left side you need to have value smaller than 30. In the right side you need to have value greater than 30 but less than 50. Same applies for right side also. If I have two children here for 200 the value in the left side should be smaller than 200 and here right side it should be greater than 200 like 150 400 like this. Still confused right. Don't worry let's take few more examples. So here we have a tree. By looking at this tree I can say this is a binary tree. So let's check this binary tree is a binary search tree or not. So let's start from the root node. Root node value is 21. The key of this node is 21. Next let's check in the left side that is 10 and 10 is less than 21. This is the left side node and left side node should contain the value less than the nodes key so it matches the BST rule or property. Next let's check this node. First let's complete the left side nodes all the left side nodes and here we can see we have 5. So this is the left node of this and here this value is 10 and this is 5. 5 is less than 10 so correct. Here this is 12. 12 is greater than 10 but it is less than 21. Here you can see 12 is smaller than 21 that's why it is present in the left side of this node. But 12 is greater than 10 that's why it is present in the right side. Here you can see right. So it's also okay. Next let's check these two nodes. This is 5 and here this is 3. This is the left side node and it contains the key smaller than this node key. So okay. Next here 7. 7 is greater than 5 but it is less than 10 and 21 that's why it is present in the left side of this node. I hope you can see this right now. We checked all the nodes of the left side left sub tree. Next let's move on to the right sub tree. Here we have 30. As I said in the right side we need values which are greater than the node key. So here 21 and 30 is greater than 21 so fine. So this node has 2 children 25 and 100. So 25 is less than 30 and it is greater than 21 that's why it is present in the right side of 21 but in the left side of 30 because it is less than 30 and this is 100 which is greater than 30 that's why it is present in the right side. So this is a BST binary search tree because it is following all the properties of the binary search tree. Next let's take another example. So this is a binary tree. So fine let's start from the root node. So this is 100 and next let's check the left sub tree it is 70 so 70 is less than 100. So next let's check this node. This is 90 which is greater than 70 and also it is present in the left side. That means it is not following the BST properties binary search tree properties. In the left side we need to have nodes with the key less than the node key. This node contains the key as 70 but here it is 90 that's why this is not a binary search tree. You can check for other nodes also but here this node is not following the binary search tree property that's why this is not a binary search tree. Alright next let's take another example. So this is a binary tree. So let's start from the root node 30 and in the left side we have 10 and in this left side we have 7 and in the right side we have 20. 20 is greater than 10 and less than 30 that's okay. Next here 7. So here we have 1 and here we have 9. 9 is less than 10 and less than 30 but it is greater than 7 that's why it is present in the right side and also in the right side we have 50 which is greater than 30 and here we have 40 which is smaller than 50 but is greater than 30 and it is 100 which is greater than 50 so this is the BSD binary search tree. It is following all the properties of binary search tree. Alright so now next I will give you few trees and you need to identify those trees are binary search tree or not. So here we have 5 example quickly check whether this is binary search tree or not. Okay so this is the first tree. Here we have 5 and this is 3 this is 7 this is 1 so this is s. Here next we have 30. Here in the left side we can see 70 so it is not a binary search tree. Here we have 100 in the left side 70 in the right side 150 but in the left side we have 80 which is smaller than 100 all the nodes which are smaller than this node should be present in the left side of this node but it is present in the right side so this is not a BSD. We have 200, 100, 300 and 50 present here 150 present here so this is a BSD and next we have 5th example 500, 700, 700. Here we have 50 here we have 300 but here we can see in the right side of 700 we have 600 so in the right side we need to have those nodes which are greater than the nodes key but here we can see 600 so this is not a BSD. Alright so now we know what is binary search tree and how to identify the binary search tree. When we use balanced binary search tree the insertion operation, deletion operation or the searching operation can be performed efficiently because binary search trees are the order data structure. When we insert a new value nodes are placed in the orderly fashion right in the binary search tree. When we have ordered data structure where the values or data are arranged properly in order then doing any operation on that is much more easier and we can perform the operation more efficiently. Alright next let us see if list of values are given and if I need to construct a binary search tree from that then how to do that. So here I will take few random values I do not know how tree will come whether we will get balanced binary search tree or not but we need to form a binary search tree from list of numbers. First what you need to do is first you need to check the first value that is 5 so create a root node here. 5. Next let us check for the next value that is 4. 4 is less than 5 so if it is less than 5 then it need to come in the left side right so 4 comes here. Next we have 10. 10 is greater than 5 so it need to come at the right side. Next 7. 7 is greater than 5 but it is less than 10 so it need to placed in the left side of 10. Next we have 25. 25 is greater than 5 so it need to be present in the right side of this node. Let us come here 10. 25 is greater than 10 so it need to placed in the right side in the right side of 10. Next we have 36 so let us check 5 and 36 so 36 is greater so we need to place that in the right side of this node and let us check 10. 10 and 36 so 36 is greater so it. So we need to place that right side of this node so let us check 25 and 36 so 25 and 36 is greater so we need to place that here at the right side. Next we have 1 so 1 is less than 5 so it need to come here in the left side 1 and 4 so 1 is smaller so 1 need to be placed in the left side of 4. Next we have 121 so let us check 5 and 121. 121 is greater so we need to place that in the right side of this node 10 and 121 of course 121 is greater so we need to place that right side so here 25 and 121. 121 is greater so we need to place that right side 36 121 so 121 is greater so it need to be placed here in the right side. So in this way you can construct a binary search tree from given value. So we are not getting balanced binary search tree here because the structure of tree depends on the given value and here I took few random values that is why. Alright so this is about the binary search tree. So that is it for now guys thank you for watching don't forget to subscribe to my channel. I will meet you next class till then take care.