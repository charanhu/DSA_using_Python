 Hello guys and welcome to Python programming tutorials by Amulya's Academy. We were discussing about data structures and in that we were discussing about a Linked List. We are discussing about three types of Linked List here. Single Linked List, Double Linked List and Circular Linked List. And we already discussed about this single linked list, its operation and how to implement single linked list in Python. So next we will talk about Double Linked List, its operation and if possible we will see how to implement Double Linked List in Python. Linked List is the collection of nodes in which each nodes are connected through links. And in the single linked list each node contains the data field and only one link that is the link of the next node. But in the Double Linked List each node contains the data field and two links. One is the link of the next node, another is the link of the previous node. So Double Linked List is the collection of nodes in which every node contains data field and link of the next node as well as link of the previous node. So we can represent the node of Double Linked List like this. It contains the data field and here we can see the next link. It is the link of the next node. And here we can see previous link. It contains the link of the previous node. And we can represent the Double Linked List like this. Here we have three nodes in the linked list. Every node contains the data field and two links. This is the first node of the linked list. And the first node contains the data field, next node reference as well as previous node reference. Because it is the first node of the linked list and it doesn't contain any previous node, it will store the link to empty value or none, or none. And this is the second node. Node 2 contains the data field. Link of the next node, that is node 3 and link of node 1, that is the previous node. And we have node 3 here. Node 3 contains data field and two links. It contains the link of the previous node that is node 2 as well as it contains the next node reference as none, or none, because we don't have any node after that. So in the Double Linked List, the first node previous reference is none and the last node, next reference, next node reference is none, or none, or empty value. Alright, so in this way you can represent the Double Linked List. And also the first node reference is stored in the head and that is the starting point of the linked list. And sometimes the last node of the linked list is called as tail. Alright, so this is about the Double Linked List. Next, let's see its operation. Like single linked list, here also we'll discuss about 3 operation, that is insertion, or adding nodes to the linked list. Deletion or removing nodes from the linked list as well as traversal operation. That is going through each node of the linked list and printing the data of each node. So we'll discuss about these 3 operations. Alright, in the insertion operation we'll add the new node to the Double Linked List. We'll see what will happen when we add new node to the linked list. And we can perform this operation in the different positions. That is we can add the element at the beginning of the linked list, at the end of the linked list, or in between, or middle of the linked list. So we'll discuss about these 3 scenarios in the insertion operation. In the deletion operation also, we can delete or remove the node from the Double Linked List in different positions. Like at the beginning end, or from the middle, or by value. Delete by value. We'll mention which node you want to delete and we'll delete that using the deletion operation. And in the traversal operation, we'll go through each node and we'll print the data of each node. Here in the Double Linked List, each node contains the link of the next node as well as the link of the previous node. That's why moving forward and backward in the linked list is easier here. So we'll see the forward traversal and backward traversal. So one of the advantage of the Double Linked List over Single Linked List is, in the Double Linked List, moving forward or backward is easier. Because each node contains the reference of both the next node and the previous node. But in the Single Linked List, it contains only reference of the next node. So moving backwards is not easier. But the disadvantage of the Double Linked List over the Single Linked List is, we need extra memory to store the two links. In the Single Linked List, it contains data field and only one link. But in the Double Linked List, we need to store the two links. That's why we need extra memory. Alright, so let's discuss this operation of Double Linked List in detail. I'll explain you each scenario with diagrams. So first we'll talk about the insertion operation that is adding element to the Linked List. As I said, we can perform this operation in the beginning of the Linked List, end of the Linked List or end middle. So first let's discuss about adding element at the beginning of the Linked List. Alright, so we have here Double Linked List. We have three nodes, data is 10, 20, 30 and here each node contains two links. This is the first node and it contains the previous link as none and the next link as the next node link and the last node contains the next node link as none. So for my convenience, firstly I'll take the next node reference as n-re-f, next reference and the previous node reference as p-re-f. So here this is p-re-f and this is n-re-f in each node. Next, we want to perform the insertion operation. Whenever you will perform the insertion operation, the first step is common, that is you need to create the node. So let me create a node with two links and a data field. Here this is the data field, you can enter any data. For example, 100 and initially I'll take both the link as none or none. So we created the node here. So whenever I'll create a node, it will have a reference. So I'll take 50000 as its reference. Now the next step is here we want to add this node as the first node of the Linked List. So for that first we need to change the n-re-f of this, that is the next link reference of the new node. It should store the reference of this node, that is 1010 here. It need to point here because when I add this node as the first node of doubly linked list, then this node becomes the second node, the next node of this new node. And here every node contains the reference of the next node, right? So 1010 need to be stored here. Now the question is where this node reference is stored. Before adding this node, new node, this node is the first node of the linked list and its reference is stored in head. So what we need to do is we need to store the reference stored in the head in the new node. Second step is new node reference, that is n-re-f, the next node reference is equal to head. So here 1010 will be stored here, this is done. Next, because it is doubly linked list, every node should also contain the previous node link. Here we are adding this node as the first node. Now for this node, this is the previous node. So here instead of storing none, it should store the reference of the new node, right? So what you need to do is here it need to store the reference of new node. If I take this node as the first node, first node, p-re-f, means previous reference need to be new node. Here for this node, this is the previous node, right? So it should store that reference here. So for that, I am taking like this, I am taking this as the first node. Now this is the new node, it contains the previous reference as none. Next reference as the reference of the next node. And here in this second node, it contains the previous reference as new node and the next reference as this node. So it is properly added now. Now this is the first node of the linker list, then head should store the reference of this now, right? So you need to remove this and head need to point here the new node. So head should store 50000. The last step is head need to point to the new node. Okay, these are the steps you need to follow. You need to create the node and you need to change next link reference of the new node. And you need to change the previous reference of the first node. And you need to point head to the new node. So this is how you can insert the new node at the beginning of the linker list. Next we'll see how to insert the new node at the end of the linker list. I want to add new node here at the end of the linker list. For that, the first step is same, we need to create the node. So let me create a node with data field. For example, 50 and both are none. Done. So we are done with the first step. Second step is you need to go to the last node. So go to last node here. This is the last node. Go here. Then change its reference. So this link reference here, 10 to new node. Now we need to point to new node. Last node. So it is the nrf next node reference equal to new node. It will contain some reference like 5900. You need to store that here 5900. Next here. In the new node, you need to change the previous link reference. Here instead of pointing here, it should point this here. It should store 2300. New node previous reference change that to the last node. Just create the node and go to the last node. Change its next link reference. Change it to new node and change the new node reference to last node. Store the last node reference in the previous link of the new node. So in this way, you can add the new element at the end of the linked list. Now lastly, if I want to add the element in between the linked list, how to do that? So for example, now I want to add the new node here between this x and y. I'm just taking the example. Okay. Here I want to add the new node. So to add the new node, first step is same. Create the node. So let me create a node with one and both as none. Now the second step is go to the previous node after which you are entering the new node. Okay. So here go to the previous node after which you are entering the new node. Here we want to enter a new node. So here I need to go to here. Then here you need to change its n reference here. I'm taking this node as x. So you need to take x dot n reference as new node. If I take it as 900, now it need to be store 900. So change the reference here. Change the x reference. Change its previous reference. It is the new node, right? Change its previous reference to this. So here store 1010. And here in the next reference of new node. Store the reference of the next node. That is 4200 here. And here in the y you need to change its reference to new node. So here you need to store 900. So what you need to do first create the new node and next store the reference of x in the previous reference. And in the x change the next node reference to new node. 900 store here. Next coming to the next reference part of the new node. This is the new node. Change the new node n reference. That is next link reference to 4200. That is y. And in the y you need to change its previous reference to new node. Okay. So in this way you can add the element in between the nodes. Next we'll discuss about deletion operation. We can remove the nodes from the double-linked list from different position. That is at the beginning of the linked list at the end of the linked list. And can mention the value of the node which we want to delete. So we'll discuss about this operation with the diagram. So now here we have our double-linked list. So we'll take the first scenario. That is we want to delete the node from the beginning of the linked list. That is nothing but we want to delete the first node. This node. To delete the first node what you need to do is you need to point head to the second node. So here head is the starting point of the linked list. Now you need to point this head to the second node. To remove this node you need to point this to second node. Here you need to store 5400. And because it is doubly linked list you need to do one more step. That is you need to store the link of the second node, the previous link of the second node to none. Now it is storing the reference of this node. Now it need to store here none. So change second node previous reference to none or none. Now this node is treated as it is removed from the linked list. So when the traversal operation begins it will start from here head. Head contains the reference of the first node that is 5400. So it will be the first node and it contains 2200. So this is the second node and it contains reference to none. That means it is the last node. In this way you can delete the nodes from the beginning of the linked list. Next we will see how to delete the node from the end of the linked list. So to delete the last node the first step is you need to go to the second last node. Go to second last node. So here in this example this is the second last node and here you need to change its reference okay nref. Next reference this reference to none. Now it is storing the reference of 200. I need to store this none here. Second last node nref that is the next reference next node reference to none. Now this node is treated as it is removed from the double linked list. So here we can see this is the head. So starting point of the double linked list. So this is the first node. It contains the reference of 5400. So this is the second node. It contains the reference to none. That means it is the end of the linked list. Now if you traverse in the reverse order also to traverse in the reverse order first you need to traverse like this and you need to go to the last node then you need to go to reverse order. You need to go in the reverse order. That's why this node will be treated as it is removed from the linked list. Next if I want to delete a node by its value then how to do that. If user want to delete this node then go to the previous node of the mentioned node. This is the mentioned node so you need to go to here the previous node of the mentioned node. And here you need to change its reference to this. And here you need to change the previous reference to this. You need to do like this. Change this previous node reference nref next node reference to next to next node. That is this node. For example if I take this as x this as y this as z. Take x dot nref as z. Store this in the here. 2000 hundred. And here in the z the previous reference as x. Store this node reference in the previous reference of z. So here you need to store 2010. Now this node is treated as it is removed from the linked list. So head is the starting point that is 100010 so that means this is the first node it contains 2000 hundred so this is the second node. And it contains none that means it is the last node. So in this way you can delete the node. All right next we'll talk about the traversal operation. In the traversal operation we'll go to the each node and we'll print its data. And here because every node contains the forward link and backward link that is next node link and previous node link you can move forward direction and backward direction. So we'll see forward traversal operation and backward traversal operation. All right so this is about the double linked list and its operation. And if possible in the next tutorial we'll see how to implement double linked list in python. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.