 Hello guys and welcome to Amuleus Academy YouTube channel. We are talking about DFS implementation and in the previous tutorial we wrote a function using recursion. Today I will explain you how that function works line by line with the example and for the example we are using this graph. Okay, we are representing this graph using dictionary. Here we have our function DFS function and here you can see the graph. Here we are taking the example of this graph. Okay. So this graph is represented like this in the dictionary form. All right. So in this function the first line is DFS node visited graph. Here node is the starting node. For our example I will take the starting node as A and visited is a set which is empty initially. Okay, empty set and graph is this and I will call this DFS function like this A visited it is an empty set followed by graph. Graph is a dictionary. So when I call this function like this DFS A visited graph so control will come here and node is here A visited is the empty set initially graph is this. If node not in graph okay node is A not in graph here A is present so this condition become false. It won't execute this body. Okay, it will come here if node not in visited. So visited is an empty set now node is A and it is not present in visited. So this condition becomes true. So print node. So what it will do it will print that node that is A. Next visited add node. So what you need to do is you need to add this node to visited set. Now visited set contains one element that is A. Here we printed A. Next for I in graph of node. Graph of node is nothing but graph of A. So here we are accessing the value of A that is a list and we are using for loop on that. So I value will be initially B. Here I value is B and inside this function body here we can see the function call DFS I visited graph. Here I is B visited is a set which contains A and graph is this graph dictionary. So here we can see the function call right. So now this will be paused and the function call for this will be executed first. So here this function body for B will be executed first. So here node will be B set visited is A graph is this. So it will check whether node node is not in graph. No B is present in the graph here you can see. So it won't execute this. It will come here if node not in visited visited is a set which contains A and node is B. S B is not in visited this condition becomes true. So it will print node. So initially we had A. Now B is also printed. Next visited add node. So you need to add visited that is B to set A. So A B will get set as A B. Next for I in graph of node here node is B graph of B means we are accessing the value of this B. So it is a list. So initially I value will be A and visited is A B and graph. So here we can see a function call. So what it will do is it will pause this execution of this function body. It will execute DFS function for A first. So now it will execute this function call for A. Here node is A visited is A B graph is this complete graph. So it will check if node not in graph A is present in the graph. So this condition becomes false. It will check if node not in visited this condition also fails here right. Node not in visited falls node is present in the visited here visited set is A and B. So A is already present in this. So what it will do it won't execute if body and we don't have any line to execute this. So this function execution is done. So it will return back to here. So now here you can see I value as A this. Now this for loop is executed for that. So control will return back to here. So next here in this function control will go back to this for loop because here we don't have any other statement to execute. So in this I value becomes E. So it will execute this function call for E. Here I becomes E visited is A and B graph DFS E visited graph. So now this is a function call. So it will stop the execution of this and it will execute this function body for this value this function call. So here node is visited is A and B graph is this complete graph. If node not in graph no is already present in the graph here you can see. So this condition become false. So control will come here if node not in visited. Yes it is true right. E is not present in the set. So it will print that node. So here we will get A B E. Next visited dot add node that means you need to add E. Next it will execute this for I in graph of node. Graph of node here node is E graph of E graph of E means this and initially I value will be B. So here I value will be B visited is A B and E graph is this. So it will pulse the execution of this and it will execute the function body for B now. Now here node B visited is A B E graph is this. So if node not in graph no B is present in the graph here you can see. So this condition become false. If node not in visited this condition also fails because here we can see B is already present in the visited set. So this condition also fails. So we don't have any other statement to execute. So this function comes back to here. The control will come back to the place where the function is called that is here. It will come back to here. So here B is visited. So now here we don't have any other statement to execute. So control will go back to here and here we can see the next value is D. So I value becomes D. Here I value is D. Visited is A B E and graph is this. So now this function body will execute for this D. All right here node is D. Here this is A B E graph is this. First it will check if node not in graph node is D and it is present in the graph. So this condition become false. It will come here if node not in visited. So D is not present in the visited. This condition becomes true. So it will print node. So it will print D. Next visited dot add node. So you need to add D to set A B E D. Now D is also added to set. Next for I in graph of node. So graph of node is graph of D. So we are accessing the value of D that is this list. Initially I value will be A DFS A visited is A B E D and graph. Now this execution will be paused and this function call will be executed first. Here node is A visited is A B E D. So it will execute node not in graph. This condition become false. Next it will check if node not in visited. This is also false right because A is already present in this set. So it won't execute this. So we don't have any other statement to execute. So it will come back to the caller that is here. It will come back to here. And here you can see we don't have any other statement to execute. So control will come back to here. And here the next value of graph of node is B. So it will execute this function called for B. Okay. A B E D. So it will pause the execution of this. It will execute the function body for B. So it will check here node is B. So it will check node not in graph. This condition is false. If node not in visited this condition is also false because B is already visited. So it won't execute any line here. So the execution of this function is completed. So it will return back to its caller. So it will come back to here. Now this is also done. So control will return back to here. Next I value becomes C. So it will execute DFS for C. So this will be paused and it will execute. Here node is C visited is A B E and D. Graph is graph node not in graph. This condition fails because C is present in the graph. Next it will check if not not in visited. Yes, C is not in visited. This condition becomes true. So it will print node. So it will get A B E D C. Next visited dot add node. So we'll get A B E D C. Next for I in graph of node. So graph of C DFS I visited graph. So we need to visit the first element of C that is A. So it will pause this execution and it will execute the function body for now A. But here you can see A is already visited. So this condition falls. A is already present in visited. So it won't execute any statements here. So it will end the execution of this function and it will come back here. Next it will execute for the next value. Next value is D. So it will call this function for D. The function call will be executed for D. But here you can see this condition fails and D is also present in visited. So it won't execute any line here statements here. So it will end the execution of this function and it will come back to here. And here you can see graph of node graph of C we have A and D and both are visited. So execution of this function is done now. So it will return back to its caller here. It will return back to here. And here we are aware in C. Next in the for loop I value becomes E. It will execute this DFS function for E for E. But here you can see E is also already visited. So it won't execute any line here. Okay. It will end the execution of the function and it will return back to here. And here you can see in values of D all the nodes are visited. So we don't have anything to visit here. It will come back to its caller. So it will come back to here. And here you can see E in the E both B and D are already visited. So execution of this function is done here for E in graph of node we had B and D. Graph of node is B and D. Both are already visited. Okay. So execution of this is done. We don't have any value to execute here after that. And here after that we don't have any statement to execute. So execution of this is done. So it will return back to its caller. Now here this is for B and in B, A is already visited. Next you need to visit D. So here I value becomes D. Here you can see D is left. So it will visit D, visited graph. And here node is D now visited is A, B, E, D, C. So it will check node, not in graph. This condition fails. Node, not in visited. This condition also fails because D is already visited. So it won't execute any line here. It will stop the execution of the function because we don't have any other statement to execute here. So execution of this is done. So it will come back to its caller. So it will come back to here. And again control will go here for E in graph of node. But here all the values are iterated. Right? A, E, D done. We don't have any value to execute here. And it will come out of this for loop. We don't have any other statement to execute here. Right? After that. So it will come back to its caller. We'll come back to here. And here B is executed. Now next control will come back to here and I value becomes C. So it will execute this function body for C. But because C is already visited, we don't have anything to visit here. Like here this condition fails and this condition also fails. And we don't have any other statement to execute. So execution is completed. So it will return back to its caller. Next again control will go here and I value becomes D. So we will call DFS on D. Here because D is already visited. So we don't have any other statement to execute in the function. That is first it will check this condition. It fails. Next it will check this condition. It also fails because D is already visited. So D is present in this visited set. So we don't have any the statement to execute. So this function execution is done. So it will return back to here. So control will come back to for loop. We don't have any other node in the list. So it is completed. So it will return back to caller where it is called. That is outside the function body. The first call. It will return back to there. And execution is done. So we'll get the output like this. I hope now you understood how this recursive DFS function works. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you next class till then take care and be safe.