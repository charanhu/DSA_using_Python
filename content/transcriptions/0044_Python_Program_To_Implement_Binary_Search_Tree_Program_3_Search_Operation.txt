 Hello guys and welcome to Amulia's Academy YouTube channel. We were discussing about binary search tree implementation in Python programming language. Today in this tutorial we will see whether the given node is present in the tree or not. In other words, we are writing the method for search operation. So, here after insert method, I will take beef and here I will take the method name as search. Because we are writing this method for the search operation, I am taking the method name as search. And here the first parameter will be self, that is the object itself, followed by data. That is, if I want to search, given node is present in the tree or not, for that first we need the data of the given node. So, that's why here you need to pass the data of the node which I want to search. And inside this we need to define the search method body. So, while performing the search operation, first we need to compare the data of the given node with the data of the root node. So, first you need to search root node key whether it is equal to given data. So, here data is nothing but the data of the node which I want to search whether it is present in the tree or not. So, first I need to compare the root key with the data. If it is true, so that means the given node is present in the tree. So, you can print a message that is node is found. If root key is equal to equal to given data, the node's data, then that means the given node is present in the tree. So, we can print a message. If not, then next I need to check whether data is smaller than the root key. If data is smaller than the root key, then I need to search that node in the left subtree, right. And if the data is greater than the root key, then I need to search in the right subtree. So, just check data is less than root key. If data is less than root key, if it is true, then search in the left subtree. It is the rule of the binary search tree, right. The nodes with the smaller key will be present in the left subtree of the root key. Nodes with the key which is greater than the root key will be present in the right subtree. That's why we will compare data with the root dot key. If data is less than root dot key, root key, then search in the left subtree, else search in the right subtree. If data is not less than the root key, then that means data is greater than the root key. So, we need to search in the right subtree. So, these are the steps we need to follow while performing the search operation. First, we need to compare the given node's data with the root key, if it is equal. If it is equal, that means node is found. If it is not equal, then I need to compare the root key with the data, whether data is less than root key. If it is true, then we need to search in the left subtree. If it is false, that means given nodes data is greater than the root key. So, we need to search in the right subtree. So, let's write this step. First step is we need to chuck root key is equal to equal to data. So, I'll use if condition for that if root dot key. So, here I can't write root, right? Here, self is representing the object. So, you need to take self dot key is equal to equal to data. If it is true, then I need to print a message that is node is found. If node is found, then no need to do anything else. So, I'll write the return statement. So, if this condition is true, then it will print this message and then it will come out of this method. If you don't want to use return here, you can use else here. If else. Here, in every method, the first parameter will represent the object itself. Here, because we'll call this method using root object here, root dot search. So, here self is nothing but root object. So, self dot key is equal to equal to data means root dot key is equal to equal to data. We are checking the first node key with the data. If it is equal, then node is found. Otherwise, if it is not equal, then I'll chuck whether data is less than the root key. So, data is less than self dot key. Here, if I want to chuck the root key, then I need to take self dot key. So, if it is true, if data is less than self dot key, then that means I need to search the given node in the left subtree. In the left subtree, we may face two situations. The first situation is left subtree can be empty. And the second situation is it can contain left subtree can contain one or more than one node. We need to write the separate condition for these two cases. For example, this is the root node. This is a tree and it contains some right subtree. But it doesn't contain any left subtree. Now, if I want to search phi in this tree, first I'll compare 10 with phi, right? 10 is not equal to phi. Then I'll chuck whether data of the node phi is less than 10. True. So, I need to search in the left subtree. But here we can see it doesn't contain any left subtree. That means what left subtree is empty. At that time, we need to write the message. Node is not present in the tree. If node is not present in the left side of this 10 root node, then that means node is not present in the tree, right? This tree contains only root node and right subtree. And phi is less than 10. If phi is present in tree, then it must present in the left side of 10. Because here this node doesn't contain any left subtree, that means node is not found. So, when left subtree is empty, that means node is not present in the tree. And if left subtree contains one or more than one node, what I need to do? I need to perform search operation again on the left subtree. I need to perform search operation again on the left subtree. I need to call the search method again. We are using recursive method here. First, I'll jump if self dot lchite. So, we are familiar with this condition, right? While explaining about the insert method, I explained about this. If self dot lchite is present, then that means left subtree is present. It can contain one or more than one node. But left subtree is present. If self dot lchite is none, that means root node doesn't contain any left subtree. That means at that time, left child is empty. This condition becomes true only when left subtree is present. If left subtree is present, what I need to do? I need to call search method again on left child passing data. I need to call this method recursively self dot lchite dot search. You need to apply this search method on the self dot lchite now. Else, if self dot lchite is not present, if it is empty, then just print a message that is node is not present and this is for the left subtree. Now again, I need to do this for the right subtree. In the right subtree also, we'll face the same condition. If self dot lchite, if lchite is present, then I need to call this search method again recursively like this. If it is self dot lchite dot search, if it is empty, then I need to print the message. That is node is not present in the tree, this message. I'll copy this and I'll just paste this. Now we are done with this search operation. First, we need to check whether self key is equal to equal to data. If it is true, node is found. If it is not, then we'll check whether data is less than self key. If it is true, that means the given node should be present in the left subtree. So first, I'll check whether left subtree is present. If it is present, we'll use this search method again on the left child. If it is not, then that means node is not present in that tree. And this is for right child. If this condition becomes false, else part will be executed. These are the three blocks here you can see. All right. Now you may ask what about the duplicate values. If you remember in the previous tutorial while writing the insert method, we took this condition. That means if duplicate values are present, we'll ignore that. That's why here I didn't wrote the condition for that. While inserting the node, if duplicate values are present, it is ignored. So that means our tree will not contain duplicate values. So no need to write the condition for that here. All right. Let's call this method and we'll see how it works. Right. So now here we have object root BST 10. Then we have list of value. Then we are using for loop and we are calling insert method. Then after this, I'll call search. And I want to search six and here you can see six is present. So I'll take six and let's execute this program. Save and execute node is found. You can see this message. Now if I take 60 and if I execute that 60 is not present, so I need to get the message as node, node is not present in the tree. I hope now you are clear with the search method. Now quickly I'll explain you how this program works. So here we can see root BST 10. So 10 will be created first. Next here list one. Next it will insert these values. First let me take six. I'll check whether six is present in the tree or not. When it sees the call for search method, control will go here. Self is nothing but root. Data is nothing but six. It will check whether self.key is equal to data. No, self.key is 10 and data is six. No. So it will check whether data is less than self.key. Yes, right. Data is six. Self.key is 10. So it is true. So it will check whether self. L child is present. Here yes, L child is present. So it will stop the execution of this and it will execute this search method for self.l child. Now, so what it will do is, so search method was applying for this whole tree. Now it will pause that and it will apply search method for this sub tree. Now it is paused. Self is nothing but now this node and data is nothing but six. So it will check self.key is equal to data. Yes, self.key is six and data is also six. Now it will print node is found message. Next it will execute return statement. So now this function call is ended. So now it will start executing this function call. We were here and we don't have any other statement to execute. So this function ends and control will come back to here. And here we don't have any other statement after this. So it will end the execution of the program. Now if I take 60 here, so here data is 60, self is root. First it will check self.key is equal to equal to data. No, 60 is not equal to 10. So it will execute this data is less than self.key. No, data is 60, self.key is none. So it will execute else. It will check if self.r child. Yes, self.r child is present now. Right? It is true. So what it will do is it will execute this function called self.r child search. So now this will be paused and now it will execute this method for this. Here self is nothing but this node, this node, self.r child, this node. So now it will execute if self.key is equal to equal to data. No, data is 60 and its data is 98. No, it will check whether data is less than self.key true because data is 60, self.key is 98. So it will check if self.el child, it doesn't have any child. So this condition becomes false. It will execute else part. No, it is not present in the tree. So we'll get this message. It will print node is not present in tree. Now control will come back to this function call because this function call is executed properly. You know, so control will come back to this. And we don't have any other statement after this. Right? So it will stop the execution of this method and control will come back to here. We don't have any other statement to execute. So it will stop the execution of the program. So in this way, this method works. So that's it for now guys. If you have any confusion or doubt, you can ask me in the comment section. So don't forget to subscribe to my channel. I will meet you in next class till then take care.