 Hello guys and welcome to Amuliya's Academy YouTube channel. We were discussing about binary heap data structure and today in this tutorial we will talk about heap queue module. heap queue is a python module which provides the implementation of the min heap. This module make use of binary heap data structure and this module provides many functions which are helpful to implement priority queues or to find the largest or smallest number in given iterables. So let's see how to use this heap queue module and how the function of this module works. To use heap queue module in python, no need to install anything. Just open up the python file like this and you can import heap queue module like this import heap queue that is the module name and enter. So using the heap queue module in python is easier. Just we need to use import keyword followed by the module name. Next let's see the function of heap queue module and how it works. The first function of heap queue module is heap push. Let's see its syntax first heap queue. This heap push function belongs to heap queue module so we need to take heap queue dot heap push like this and here you need to mention the heap name. Or the list name here we are using list and here you need to mention the item which item you want to enter. What this function will do? This function will insert the item to the heap maintaining the binary heap property. Here in the heap queue module the min heap property. So it will insert the new element to the heap by maintaining the min heap property. So let's see an example. First let me create a list or you can say heap. So now we have empty heap here. Next here let's call the heap push function. Let's insert the element to this heap. So heap queue that is the module name followed by function name heap push. Next here the first parameter is the heap name or the list name followed by the item which I want to insert. Next if I check heap now 10 is inserted. Now if I take heap push if I insert 1 so in the heap one will be present first followed by 10 that is because here one is smaller than 10 and this heap queue module follows the minimum heap property right. So it will insert the element by following the min heap property. Now if I use phi 1 10 phi here you can see the tree right. So this is about heap push function. Next let's talk about the next function that is heap pop. So this heap pop function is also belongs to heap queue module. So you need to take heap queue dot heap pop and here you need to mention heap name. The parameter is heap name or the list name. What this function will do? This function will return the smallest value as well as it will delete that from the heap maintaining the binary heap property. After deleting the root node it will maintain the heap property. So let's see an example for this. Here we have 1 10 phi. So let me use heap queue dot heap pop and here I will use heap. So 1 is removed. It will return the minimum value as well as it will delete that from the list here you can see it will delete that from the heap. This is extracting minimum or maximum value from the heap. Here it is minimum heap that's why we are extracting minimum value the root node. If I use that again phi will be deleted. That is the root node of the tree now that is deleted. It will return the value of the smallest node and it will delete that from the binary heap. Alright, so this is about the heap pop function. Next let's talk about the next function that is heapify. Syntax is like this heap queue dot heapify and the parameter is heap. What this function will do? This function will convert the given list to heap binary heap. So when list of numbers are given and if the numbers are not following the heap property then you can use heapify. It will convert that list to heap in place. Let's take an example here I will take few values like this 1 3 5 2 4 6. Here we have list which is not following the main heap property. Now if I want to transform this list to heap then what I can do is heap queue heapify like this and here you just need to mention the list one. Now if I check list one here we can see the elements are following the main heap property. Notes are arranged so that it is following the main heap property now. So this is about the heapify function. So the next function is heap push pop. heap queue dot heap push pop and here the heap name the list name and item. So what this function will do is first it will push or insert mentioned item to the heap by maintaining the heap property. After that it will return the smallest value from the heap also it will delete that from the heap. This is the combined action it will perform push and pop operation in the single function. So let's see an example for this. So I will create a heap like this. Okay we have list one right now list one dot heap push pop. Let me push 89 and here you need to mention list one. Here we can see one is removed from the heap and 89 is inserted and here every node is following the heap property also binary heap property. So this function will do both push and pop operation in a single function. Right? So this is about this function. Next let's talk about the next function that is heap replace next followed by heap and item. So what this function will do is first it will pop the smallest element then it will insert the new element. So first it will perform pop operation followed by the push operation. So let's see the example for this. Let's take heap q dot heap replace and let's take list one followed by I want to insert the element as 100. So it will return to then if I just keep 100 is inserted. So first it will perform pop operation followed by the push operation in the heap push pop first will perform push operation followed by the pop operation. Alright so the next function is n smallest heap q n smallest here first parameter is n here next iterable next here key is equal to none. It is same as sorted method. This function will return n smallest number in the given iterable. If you mention n s 2 it will give two smallest number of given iterable. For example now here we have a list now if I want to find heap q dot n smallest n smallest and if I want two smallest number from the heap the list 192 are the smallest number. Now you can use this function on any iterable okay. Here you can see this is not following the heap q property binary heap property this is not a binary heap then also it is giving this n smallest numbers. It will give four numbers. If I heapify the heap then you can use okay and next function is n largest and this syntax is same instead of function name here you need to take largest it will give the n largest numbers in the given iterable. For example 26 and 5 are the three largest numbers of the heap okay. So this is about the heap q function. So here you can see using heap q function we can find the n smallest and n largest numbers in the given iterable. Next let us see an example for priority q. I want to implement priority q using this heap q module. So here I take values as tuple in the tuple the first value is priority and the second one is the value or item which I want to insert to the q. So here if I take a list one in the list the first element is this is the priority and this is the item like real. And next here this is the priority and this is the element like this. Now remember that heap q module provides an implementation for minimum heap. So here the smallest value highest priority the element which has smallest value will be popped out first or will removed from the queue first. So now you can just heapify this heap q heapify and here just list one. So we need to import heap q first right okay next if you want you can print list one here. So here I am trying to show you the tree also next now I want to pop the element right. So I will use for loop here. So I will use range as length of list one like how many elements are present in the list one I need to pop that right that is why here I am taking length of list one and here I will print heap q I will use heap pop function here heap pop and from the list one okay. So let us execute this. So first the element will be removed from this is Rhea because it has priority one which is the highest priority here next to three and next four. So this is about the heap q module. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.