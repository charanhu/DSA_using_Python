 Hello guys and welcome to Amulya's Academy YouTube channel. We were discussing about implementation of binary search tree in Python programming language and in the previous tutorial we wrote a method for insertion operation and search operation. Today in this tutorial we will discuss about traversal operation. We can traverse a tree using three different algorithms. The first one is pre-order traversal algorithm. Second one is in-order traversal algorithm and lastly post-order traversal algorithm. I already explained about these three algorithms in detail with example. I will give you the link of that video in the description box. If you haven't watched that, please go and watch that first because to write the method for traversal operation you need to be familiar with working of these three algorithms. And here we will write separate method for these three algorithms. First we will write the method for pre-order traversal algorithm. Next we will write the method for in-order. Lastly we will write the method for post-order traversal algorithm. So let's write the method for pre-order traversal algorithm. In the Python file we have class BST and in this class we have insert method for insertion operation. And next we have search operation to find whether given node is present in the tree or not. Next here we will write the method for traversal operation. First we will write the method for pre-order traversal. So I will take DEF and here I will take the method name as pre-order. And here we don't need any other parameter just take self. Because here we just want to print the nodes of the tree. So we don't want any other parameter here. And here we need to write the body of this method. So let's see how pre-order traversal algorithm works. In pre-order traversal algorithm first we need to visit root node. Next, left node. Lastly, right node. This is the order of node in the pre-order traversal algorithm. Pre means before, before visiting any other node we need to visit root node. So root first, next, left, next, right. For example, if I have tree like this, first we need to visit root. Next, left node. Next, right node. So this is the order in the pre-order traversal algorithm. And while writing the program, first here we can say we want to print the key of the root node. So print root key. This is the first step. Next what we need to do? We need to print nodes in the left subtree here. Next, we need to print after completing that we need to print nodes of right subtree. So first let's print the root key in the program. Print. We need to print the key of the root first. So here self.key. Here to call this method we'll use root.pre-order. So self becomes root. So now if I want to print root.key, I need to take self.key. Here self will represent the nodes. First I want to print root node key. So print self.key. After this, I need to print the left subtree, nodes of the left subtree, right. And left subtree can be empty or it can contain one or more than one node, right. For example, if I take like this, in this tree, left subtree is empty, right. So what it will do? First it will print 10, root.key. Next it will chuck here. Left node is not present. So it will go and print the right subtree or the right node. So we'll get 10 and 100. We need to chuck whether left subtree is present or not. If it is not present, then no need to do anything. If it is present, then for example, if it contains node like this. So this is the root.key. So first we'll print 10. Next we'll come here. This is the left subtree of root key and we need to print the nodes of the left subtree. But here also we need to follow the same rule. First we need to visit root key. Next left node and next right node. So here first I need to visit phi next one, next seven. That means we need to call this preorder method again on this tree left subtree. That is we'll chuck if self.elchide. If it is present, if l child is present, what I'll do is I'll call this preorder method again because we need to traverse the nodes of the left child or left subtree in the same way in the left subtree. First we need to visit root key next left node and right node. So that's why I'll call self.elchide.preorder. We are using recursion here else if l child is not present, no need to do anything. We need to go to the right side. I need to chuck whether right child is present if self.r child. If it is present then also we need to do the same thing. You need to call self.r child.preorder. So now here if I want to call this method preorder, we'll need to pass anything and if I save and execute this. So here we can see 10631798. So this is the result we'll get in the preorder traversal algorithm. Now I'll explain you how this actually works. So firstly root BST10. So we'll get 10 a node. Next list one we'll insert these values using insert method. So nodes will be inserted like this. So we'll get this tree. Next root dot preorder. So control will come here. First print self dot key. Self dot key is 10. So we'll get self dot key that is 10. Next if self dot l child. Here we can see yes self dot l child is present. Left child is present. Then call self dot l child dot preorder. Now this preorder method was applying for the entire tree. Here you can see. Now here we can see another call for this method but for self dot l child. So now it will pause this execution. It will pause the preorder method execution for entire tree and it will start the execution of the preorder method for the left child. So this now self becomes 6. And here dotted lines are representing the paused action. So now here self is 6. So it print self dot key. So it will print 6. Next here it will check if self dot l child. Yes l child is present here right. So it will again call this self dot l child dot preorder. So now it will pause this execution. It will pause the execution for preorder of this left sub tree. First it will execute preorder method for this left sub tree. Now self becomes 3. Now again it will print self dot key. So we'll get 3. Next if self dot l child. Yes l child is present here. So now self dot l child dot preorder. So it will stop the execution of this method for this left sub tree and it will execute preorder method for this left sub tree. Now self is this node 1. It will execute this method for this left sub tree print self dot key. So we'll get 1. Next it will check if self dot l child is present. No it doesn't have any l child right. So it won't execute this. It will go here if self dot r child. No it is not present. It doesn't have right child also. It doesn't have left child and right child. So now execution is done right. So now this method will return. It will return back because execution of this is done. Now it will restart the execution of this and here this is done self dot l child. This is done. So it will check if self dot r child is present. It doesn't have any r child. So this condition becomes false. Now we don't have any other statement to execute here. So this method execution is done. So this is done. So it will return back to its color. It is called from here right. Now this action will restart. Here self is this. This is done. This execution is done. So it will check if self dot r child. Yes here r child is present. So now self dot r child dot preorder. Now it will pause this execution and it will execute this preorder method for this node. Now here self becomes seven. So it will print that if self dot l child no it doesn't have any l child self dot r child no it doesn't have any r child. So its execution is done. So now it will return back to where it is called. It is called from here and in this method we don't have any other statement to execute here. So it will return back to its color that is this. Now 10 and this left sub tree is done. Now we need to visit the right sub tree here. If self dot r child self dot r child dot preorder. So now r child is present and so it will pause the execution of this method for entire tree and it will execute this preorder method for this node. Self is this now 98. So print self dot key and next if self dot l child no it is not present self dot r child no it is not present it doesn't contain l child and r child. So now execution of this method for this node is done. We don't have any other statement so it is done. Now it will return back to its its color that is here. Now we don't have any other statement to execute so it will come out of this and it will return back to the color where it is called. So here we don't have any other statement to execute so it will stop the execution of the program. That's why we got this 10, 6, 3, 1, 7, 98. This is the order of the nodes. If you don't want to print the nodes in the separate line here you can take n is equal to space like this then it will print in the single line. Okay so this is about the preorder method and in the next tutorial we will write the method for inorder and postorder traversal algorithm. Okay so that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you next class till then take care.