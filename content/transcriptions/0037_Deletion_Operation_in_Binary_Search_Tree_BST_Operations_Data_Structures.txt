 Hello guys and welcome to Amolea's Academy YouTube channel. We were discussing about binary search tree operations and in the previous tutorial we discussed about search operation and insertion operation. Today also we will continue the discussion on this topic. In this tutorial we will talk about deletion operation. How to delete a node from a binary search tree. So this delete operation deletes a node from the binary search tree. So it will delete the given node if it is present in the binary search tree. If it is not present then it will print a message. Here user will mention which node he wants to delete. So given node which he wants to delete. If it is present in BST then this operation will delete that node. If it is not present then it will just print a message. That is that given node is not present in the binary search tree. So before deleting the node we need to search for the node. Alright. Unlike search operation and insertion operation we need to perform deletion operation with atmost care. While performing the deletion operation atmost care should be taken that the properties of the binary search tree are not violated and nodes are not lost in the process. We need to be careful about deletion operation. Next let's see how to perform deletion operation. The first step in the deletion operation is I need to check whether binary search tree is empty or not. If binary search tree is empty we can't delete any node from that. That's why we will print a message can't delete. If binary search tree is not empty then you need to search for the mentioned key or search the node which you want to delete. That means you need to perform search operation here. And from this search operation either we can get positive reply that is we will find the node or if mentioned node is not present in the BST then we will get negative result that is node is not found so we will print that message. Node is not found message. If we get positive result from the search operation that is if we found the node then we need to delete that node. Third step is delete the node. The user will mention which node you want to delete. He will mention the key of the node. So first we will check whether binary search tree is empty or not. If it is not empty then we will search for that mentioned key using search operation. If the mentioned node is present in the binary search tree then we need to delete that node. But while performing the deletion operation that is while deleting the node we may face three different situations. The first situation is we may get node with zero children. The mentioned node can be leaf node or node with one child node or node with two child node. Binary search tree is a binary tree so it cannot have more than two child nodes. Mentioned node or the node which user want to delete can have zero child node one child node or two child node. So we need to do different operation in these three situations. So next we will discuss about that. The three cases of deletion operation. The first case is when I want to delete a node that has no children. The case two is deleting the node with one child node. Case three is deleting the node with two child nodes. So first let's concentrate on case one. Then I want to delete a node that has no children. That is nothing but zero children. At that time what we need to do is we need to search for that node and we can delete that node. For example here I have binary search tree. Now if I want to delete 30 then I'll take 30 as my value or given value you can take any name here. First what I need to do is I need to compare 30 and 15 right. So here we can see the value 30 is greater than the key of the root node. So that means if this node is present then it must present in the right side of the root node because this value is greater than the key of the root node. So that's why we'll chuck in the right side direction and this is the right sub tree of the root node. So first here we'll chuck the root of this right sub tree that is this node. We'll check its key with the given value here 20 and 30 both are not equal. And 20 is less than 30. That means we need to search for this value in the right side of this node. So here we'll come here in the right side and we'll compare this node key with given value that is 30 both are equal. That means I want to delete this node and here we can see this is a leaf node. The node that has no children so I can directly delete this like this. If I want to delete the leaf node search for that node and if it is present delete that you can remove the node without any issue. This is the simple case of deletion operation. Now the second case in deletion operation is case 2. I want to delete a node with one child node. What if I want to delete a node which has one child node? Then how to deal with that in that condition. To handle this case we need to replace the node with its child. We need to remove the parent node that is the node which we want to delete and now it has one child node right make it as the parent node. If the node is the left child of its parent the node's child becomes the left child of the node's parent. Correspondingly if the node is the right child of its parent the node's child becomes the right child of the node's parent. I know it is confusing so let's take an example. Here now if I want to delete 20 then what I need to do is first I need to compare the value with the key of the root node. So 15 and 20 is greater so I need to search this node in the right side of the root node here and here we can see 20 and 20 both are equal that means I need to delete this node now. Now I found the node which I want to delete. Now here you can see this node contains one child node right. So in this case when you are deleting a node that has one child node what you need to do is you can delete this node and here this child node will replace the parent now that is here 30 will come here 20 is removed and the child node of 20 will come here we are replacing the node with its child. So this is the second case that is when we are deleting the node that has one child node. Next the case 3 case 3 is when we want to delete the node which has two child nodes. In binary tree maximum a node can have two child node right. Now if I want to delete the node that has two child nodes then how to handle that situation. For that when we are deleting a node with two children we need to replace the nodes value with its largest value in the left subtree or we need to replace the smallest value in the right subtree we have two option here because we have two child node either you can replace the node with the greatest value in the left side or the smallest value in the right side right. Let's see the example now if I take I want to delete the node 10 first will chuck with the root node key so it is smaller 10 is smaller than 15 so we will search in the left side and we will find the node here. Now here we can see this node contains two child nodes right now if I want to delete this node then either you can replace this node with the greatest value in the left side or the smallest value in the right side. For example when we delete 10 here either you can replace this with 7 and here you need to remove this or either you can replace this with 12 you can get the tree like this also. I know it is little bit confusing so I will take another example now I want to delete 56 okay. Now I will simply I will search the node after finding this node now I can replace this node either with the largest value of the left side or the smallest value in the right side that is if I replace this with the largest value in the left side we will get 55 is the largest value in the left side. So 55 comes here and we will have 54 so 55 is replaced here so we can't draw here and here we will get 78 so we will get 3 like this and I replace the largest value in the left side with the deleted node or instead of replacing this with the largest value of the left side we can take the smallest value in the right side also then we will get and here we will have 54 and here we will have 55 so we will get 3 like this. So this is about the deletion operation now here we can see few example and you need to guess what will happen when you perform this operation when you delete the mentioned node. So this is about the deletion operation in the deletion operation first you need to check whether the minus search tree is empty or not if binary search tree is empty then just print a message like tree is empty so I can't delete any node from that if it is not empty non empty that means it contains the node so for that you need to search for the mentioned node given node if it is present then you need to delete that if it is not present just print a message like entered node is not present or mentioned node is not present any message when you search for the node and if it is present then you need to check for 3 condition that is case 1, case 2 and case 3 case 1 is you need to check the node which I want to delete has 0 children or 1 children or 2 children we need to check that first if the node which I want to delete contains 0 children then you can remove that node easily if the node which I want to delete contains 1 children 1 child node then that child node will replace the parent node after deleting that node child node will replace the parent node or if the case 3 is true that is if the node which I want to delete contains 2 child node then either you can replace the parent node with the largest value in the left subtree or the smallest value in the right subtree you need to check the entire subtree and you need to find out the largest or smallest value if you are going for the left subtree then you need to find out the largest value if you are going for the right subtree. you need to find the smallest value in the entire right subtree okay and you need to replace the node, removed node. So, this is about the deletion operation. So, that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.