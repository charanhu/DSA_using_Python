 Hello guys and welcome to Python programming tutorials by Amulya's Academy. We were discussing about data structures and in that we were discussing about doubly linkred list. Previously in the data structure video series we discussed about the theory part of doubly linkred list, how it operates and its operations. Today we will write the program to implement the doubly linkred list in Python. And I will use the singly linkred list program as the base for today's tutorial that means you need to watch the previous few tutorials on the singly linkred list and the program which we have returned to implement the singly linkred list. I will give you the link of all the videos in the description box. Previously while writing the Python program to implement singly linkred list we created two classes. One is called as node class which will help us to create a node. Next we created the linkred list class. And later we added few methods to the linkred list class where each method will do different operations of the singly linkred list. For the doubly linkred list also we will do the same thing. We will use class concept to write the program. We will create two class one is node class and another one is doubly linkred list class. And in the doubly linkred list class we will add methods which will perform different operation of the doubly linkred list. Alright so let's write the program. Firstly here I have the singly linkred list program. Link of all the videos are in the description box. So here we can see class node first. Next here we can see class linkred list. So first I will copy this class node because we are creating the class node today. So I will copy that and here I will paste that in the new file. And in the node class we have initialization method self and data as the parameter self dot data is equal to data self dot reference is equal to none. That means when we create a node data field will be assigned user will give you the data and that will be assigned to data field and the reference is taken as none. If I create a node with the data as 10 then I will get the node like this. Reference will be none by default. Now we need to write the program for doubly linkred list. In the doubly linkred list a node contains data field and two links right next to node link as well as previous node link. So now here I need to take a data field and two links. So for that I will take the first link as n reference that is the next reference. And for the previous reference I will take pref. The variable as pref which will represent the previous reference. So I will take both the references none initially. So now when I create a node with data field as 10 then I will get node like this. We have data field 10 and the previous reference as none and the next reference as none. So this is the initial condition of the node. So now we are done with the node class. Next let us create the doubly linkred list class. So I will take the linkred list name as doublyll for linkred list. You can take any suitable name and inside that first I need to take the initialization method like we did in the single linkred list and here also I need to take the parameter as self because self parameter is must in every method of the class. Next here what I want to initialize in the linkred list. I want to initialize head right. So I will take self.head as none. So initially I am taking the linkred list is empty. We did the same with the single linkred list right. Initially we will take the linkred list as empty. For that I need to assign head as none. Head is the starting point of the linkred list. If I take that as none that means linkred list is empty. Next we need to add different methods to this doubly linkred list class now. And here every method represent the operation of the doubly linkred list. In the previous tutorial while discussing about the doubly linkred list and its operation, we discussed three operation that is insertion operation, deletion operation and traversal operation. So today in this tutorial we will discuss about the traversal operation and in the next tutorial we will talk about the rest two operations. So today's topic is traversing the doubly linkred list. Now traversing is the process where we will go through each node and will print its data. Because doubly linkred list contains two links, link to the next node as well as link to the previous node, we can traverse in both forward direction as well as backward direction. So we can have forward traversing operation and backward traversing operation. In the forward traversing operation we will go to the first node and will print its data and we will go to the next node and we will print its data and we will go to the next node and we will print the data of that node. And in the backward traversing operation we will start from the last node and we will go to the second last node like this way in this direction. So we will get the data of the nodes in the reverse order. First we will get 30 in the next 20 in the next 10. So let's see how to do forward and backward traversing. First we will talk about the forward traversing. So in the forward traversing first we need to begin with the first node and we need to print its data and next we need to go to the next node and next we need to print its data and next we need to go to the next node. We need to do this until we will reach the last node. To do this what I'll do is first I'll take the first node as n means I need to take n as self.head. Head is the starting point of every linker list right. Now if I want first node then I need to take n as self-head. So now n is the first node. Next I need to print n.data, the data present in that. After that I need to go to the next node right. So for that I need to take n as n.n reference. That means here now n is this right. After printing its data I need to go to the next node. The reference of the next node is stored here. Here this is the next node reference right. That's why I need to take n equal to n.reference. So now n becomes 40000 that means this is n now. Next again I need to print the data and again I need to change n value to go to the next node. Right here I need to print the data and dot data of this node and I need to stop because here we don't have any other node. This is the last node. So we need to repeat these two lines again and again that's why I need to include this in a loop. So for that I'll use while loop and here I'll take the while condition as while n is not none. Because here you can see this is the last node. When n becomes this node I need to print the data and dot data that is 30. After that I'll change n value so now n becomes none. That is n equal to n.reference. n.reference is none so n becomes none. Now at that time I need to stop. That's why I need to take while n is not none. Traversing the doubly linked list and single linked list in the forward direction is same. That's why in the single linked list program I'll copy this method. This method is used to traverse the single linked list. I took the method name as print LL so I'll copy this and here I'll paste that. I'll take the same method name if you want you can change. We don't need any other parameter. First here we'll check whether linked list is empty because if linked list is empty there is nothing to print. That's why first I need to check linked list is empty. If you want to check linked list is empty or not you can check self dot head. If self dot head is none that means the linked list is completely empty. If it is not linked list is not empty. That's why here I'll check this condition if self head is none. If s print linked list is empty. Otherwise take the first node as the n and print its data like this. Here to go to the next node you need to take n equal to n dot reference because here I changed link name right so for the next reference you need to take n dot n reference and you need to write these two lines within the while loop and here you need to take the condition as while n is not none. Okay so this is about how we can traverse in the forward direction. So this is the method for that. So next let's talk about the backward traversing. How to print the nodes of the linked list in the reverse order. So for this firstly I'll copy same thing okay like this I'll copy and paste and here I'll take print LL in reverse for the backward traversing I'll take the method name as reverse print LL in reverse and nextly first step is same you need to check self head is none or not if self dot head is none then I'll print the message linker list is empty. Otherwise if linker list is not empty then we need to go to the last node here this is the last node and we need to print its data. After that we need to go to the next node that is the previous node of that and we need to print its data. Next we need to go to the previous node and we need to print its data. So to do this we have two problem one is how to go to the last node. Because if I want to go to the first node I can do that because we know the linked list will start from head so I can take n equal to self dot head but here we want to start traversing from the last node then how to go to the last node and the second problem is after going to the last node how to get the previous node of the last node. So we have these two challenges. So for that the solution is for the first problem that is how to go to the last node. For that what I can do is I can use a loop and initially I can take this as n and I can traverse to the every node and I can reach here the last node. In the previous method what we did we took the first node as n and we'll print its data and we'll go to the next node using next reference but here what I'll do is I'll take first node as n and I won't print its any data I'll just go to the next node I'll take n equal to n dot reference I'll increment the n value and I'll go to the next node okay in this way you can read the last node firstly I need to take n equal to self dot head this will be the n. Next I need to take n equal to n dot n reference that means n equal to n dot reference n become 400000 this node becomes n now again I need to increment the n or I need to change the n value I need to take n equal to n dot reference I need to execute this again so that's why I need to include this in a while loop and here I need to write the stopping condition where you want to stop changing the n value that is after reaching this node I need to stop in this node you can see the n reference is none right if I take this as n n dot n reference is none if I take n dot n reference is not none if if it is not none change n value if it becomes none then stop I'll show you how it works so initially this line will be executed n equal to self dot head so this will become n next it will check while n dot n reference is not none here n dot n reference is 400000 it is not none it will change n value now n becomes this now again it will check while netraference is not none yes 1200 is not none here this condition is true it will change n value now n value becomes n dot n reference so 2000200 becomes n now so that is nothing but this node Now again it will check whether n.n reference is not none. Here we can see this is n and n.n reference is none here. So I need to stop. So it will stop. Now we have n pointing to here. We move to the last node. Okay. Using this code we can reach to the last node. So let's write this code now. So here in the else part first I need to take n.selfhead and here I need to take n.n reference is not none and here I don't want to print anything. Just delete this and increment the n value. So in this way it will reach to the last node. We'll reach to the last node. Now let's take the solution for the next problem that is how to get the previous node. Using previous code we'll reach to last node that is n now. So next I'll print its data. So we'll get n.data. So it will print 30. Now I need to go to the this node right. How to go to this node? We have this previous link reference right. I can make use of it. So I'll take n as n P-R-E-F now. So n becomes 40000 that is nothing but this node. Using previous link you can print the data now. You can get the previous node and you can print its data. So now n will become this after executing this line. Now I need to again print n.data. So execute this line. Now again we need to go to the previous node of this node. So I need to take n equal to n.P-R-E-F. So here I need to include this in a while loop and I need to take the condition that is when while n is not none. Until n becomes none I need to execute. I need to execute these two lines. That is because I'll explain you. We move to the last node. Now n is this. It will check while n is not none. Yes n is not none. It is 2200. So it will print n.data. So I'll get 30. Next n equal to n.previous reference. So n becomes 40000. This node. Now n is this. So it will check while n is not none. Yes it is not none. It is 40000. So it will print its data. So 20 will be printed. Next it will change n values. n equal to n.P-R-E-F. So n becomes 2010. That is nothing but this. Next again it will check while n is not none. So n is not none. n is 2010. So it will print its data. So 10 will be printed like this. And n will be n equal to previous reference. So n becomes none now. Now again it will execute while n is not none. No. Now n is none. So this condition becomes false. So it will come out of the loop. Right. So here again I need to take a while loop and I'll take n is not none. And here you need to print its data. So I'll take copy this, paste this, print n.data. And here you need to take n equal to n.previous reference. Now we are done. We are done with the forward traversing as well as backward traversing. But to check whether this method works properly or not. Firstly we need to add few elements to that. For that we need to see insertion operation. So that we'll see in the next tutorial. For now we can just print empty linkred list. So for that I'll take doubly ll the class name. And I'll create the object from that. I'll take the object name as dl1 the blue linkred list. And here dl1 dot print ll. I'll call this method. For now it is empty. We'll get message as linkred list is empty. Sorry, this is this spelling mistake. So here we can see message linkred list is empty. If I take print ll reverse, if you call this method and if I execute this it will print linkred list is empty. So that's it for now guys. In the next tutorial we'll talk about the insertion operation. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in the next class till then take care.