 Hello guys and welcome to Python programming tutorials by Amoleas Academy. We were discussing about how to implement Linked List in Python and to implement Linked List we are using class concepts and in that we were discussing about adding or insertion operation. We already wrote a method for adding the element at the beginning of the Linked List and at the end of the Linked List and in the previous tutorial we saw how to add the node after an existing node. We wrote the code for this. Today we will discuss about this how to add an element before given node. So now we have node class, Linked List class and in the Linked List class we have these methods traversal add begin add end and add after and today we will write the program to add a node before the given or existing node. For example I will take I want to add new node here before this node. While adding a node after the given node we don't need to be careful about the different situations right. We discussed about that in the previous tutorial but if I am adding an element or new node before the existing node or before given node then we need to be careful about few things. That is if I'll add an element before the first node then the new node whatever the new node I am adding that will become the first node of the Linked List then head should store the reference of that new node right. So we need to be careful about this that is if we are adding the element before the first node. If we are adding the new node before the first node then that will become the first node of the Linked List then head need to be stored the reference of that we need to be careful about that and the second situation is in the rest places. You can add the element before this node or you can add element before this node in the rest positions. If we are adding the element or new node before the given node then we need to be careful about two situations. One we need to check whether we are adding before the first node. In that case we need to write the different code and next if we are adding the element in the different position that is before the second node or last node then we need to write the separate code for that. All right so first we'll discuss about inserting the element before the first node what will happen. Here we are adding the element before the given node so I'll take the method name as add before and here you need to take parameter as self and data because we are inserting the element if you are inserting any node then data must be a parameter then here x. x is nothing but the node before which you want to add the new node. For example here if I want to add the node before this node then this will be x. I need to add the new node before x right now first let's check if we are adding the node before the first node. The first step is same you need to create a node so create the node to create the node will use node class and will create a node with some data and the link or reference. Next what we need to do we need to store the reference of the new node in the head and we need to store the reference of the first node in the new node like that right. It is nothing but adding the element at the beginning of the linker list. If you are adding the element before the first node that means we are adding the element at the beginning of the linker list. So you need to copy that code. So we wrote the separate code for that right add begin method so copy that code. All right so I'll explain you what is happening here. First step is we need to check whether we are adding the element before the first node to check that you need to write like this self.head.data. Self.head is 1010 this node self.head.data is nothing but 10 self.head.reference is nothing but 2100. So here I'm checking self.head.data whenever you'll write self.head.data that is nothing but the data of the first node here 10 whether that is equal to x whether user want to enter the new node before this first node will check like this self.head.data is equal to equal to x value. If it is true then that is nothing but we want to add the element at the beginning of the linker list so write the code. So here we have class node class linker list and in that we have traversal function add begin add end and add after add after node. Today we'll write Def let me take add before data and x whenever you are adding the element between the linker list you need to mention these parameters self.data.x in the previous tutorial also we wrote the same parameter right x is nothing but the data field or the node before which we need insert the new node all right next what I need to do is I need to check whether we are inserting the element before the first node so I need to take self.head.data if you want to access the information of the first node data of the first node you can write like this self.head.data is equal to equal to x as I said x is nothing but the data field right if I want to enter the new node before the first node then I need to write the x as the first node data for example the first node is 10 and if I want to insert the element before that then I need to write x as 10 okay here I can check like this self.head.data is equal to equal to x if it is true then just copy this code add begin it is equal to adding the element at the beginning of the linker list adding the node at the beginning of the linker list so we already discussed about this so what you need to do is you need to create the new node using node plus and next you need to change the new node reference whatever the reference stored in the head store in the new node reference and next change the head to the new node we already discussed about that in detail so let me explain that quickly so you need to create a new node with the data and link as none for example data is 100 link is none initially it will be like this this will be the new node right you need to change the reference of this to here so where this reference is stored this was the first node of the linker list this reference was stored in the head that's why we'll take new node dot reference is equal to self.head whatever the reference stored in the head assign here so that's why it will become 1010 and it will point here now next you are creating a new node that is the first node of the linker list so you need to point head here right self.head is equal to new node 9,000 100 you need to store that in the head so in this way that adding the element at the beginning works so that's why I wrote this code but here problem is if the linker list is empty then that time self.head is none right now if I write this code and if I execute this code when the linker list is empty that means here self.head is empty that is nothing but none so it will become none dot data none dot data is not a proper syntax right so we'll get error so if we are using this code and if the linker list is empty then we'll get error because of that before this you need to chuck whether linker list is empty or not when we access self.head.data if the linker list is empty we'll get error so to solve that problem first before this you need to chuck by the self.head is none that is nothing but linker list is empty or not if linker list is empty just print a message like linker list is empty and stop the execution of this method so if linker list is empty I can't add an element before given node right that is not possible that's why just do this and take a return statement what it will do is it will just print this message and it will come out of this method it won't execute any other statement if it is not empty that means it contains few nodes so you can access self.head.data we don't have any problem with that if we want to add the new node before the first node then we need to write the code like this and you can just return it if it is not then what we need to do so whenever we'll add the new node before the given node in this condition we need to be careful about two things one is whether we are adding the element before the first node so we already wrote the code for that next condition is in the remaining position if you are adding the new nodes before the second node third node fourth node or the last node then the first step in that is we need to find the previous node of the given node for example if I take this as the x so x is 30 so we want to add the new node before this node then I need to go to the previous node of the x that is this node first I need to go to the previous node after this I need to add the new node after previous node first step is we need to go to the previous node then we need to add the new node after that previous node after going to the previous node the process is same as adding the element after the given node we discussed in the previous tutorial right we wrote a method that is add after method but here we are adding the new node after the previous node of the given node so we need to follow these two steps so while writing the program how to find the previous node here we'll have two questions that is how to identify the previous node and how to go to that position so first let's see how to identify the previous node if I take this as x then this is the previous node right how we will get to know this is the previous node that is its next node data is equal to x here this is the previous node its next node means this node its data is 30 and x is also 30 so when we chuck the data of the next node if it is equal to the x value that means we are in the correct position that is we are in the previous node of the given node so for that we need to write the condition like this to identify the previous node of the next node we need to write like this if here this is the previous node previous node next we need to chuck the data of the next node so for that we need to write dot apex dot data and I write previous node dot reference that means three thousand three hundred this node so when this is previous node this is the previous node dot reference if I take previous node dot reference dot data that means 30. The data of the next node. So we can access the data of the next node like this. We need to write the current node, this node dot reference dot data. If it is equal to equal to x, that means we are in the correct position. We got the previous node of the given node x. So we need to stop the execution and it will execute the break statement. Alright, now we know how to identify the previous node. Now previous node is that node whose next node data is equal to x value. Right. Now how to go to previous node? We need to find the previous node and we need to go to the previous node. In the linked list, we can't go directly to a node. For that first, we need to start from the first node and we need to traverse to the each node and we need to reach the particular node. We can't directly go to a particular node. So for this, to move to the previous node, first I'll take the reference in the head as n. That is nothing but I'll take the first node as n. First step is I'll take n is equal to self dot head, whatever the reference stored in the n. So first node will become n. Next, I'll chuck the next node of n. That is nothing but the second node data if it is equal to x. So for that, I'll use this previous node dot reference dot data here. Instead of previous node, I need to take n because I took the variable n here. So here take variable n n dot reference dot data is equal to equal to x. So in the first node, we are checking the data of the next node, whether it is equal to x. If it becomes true, that means this is the previous node of that. If it is not here, it is not right. We took x as 30 and it is 20, 20 is not equal to 30. Then I need to go to the next node. Right. That is now here, we are here. We need to go to this node. Next node, how to go to the next node? For that, you need to take n equal to n dot reference. So here n dot reference is nothing but the link or reference of the next node. So here n becomes this node now. Now again, I need to check the n dot reference dot data is equal to equal to x. The next node of this node, its data is equal to x or not. Here it is true because here it is 30 and I took x also 30. So both are equal. So we found the previous node. This is the previous node of the given node. But if we didn't find that, we need to again increment n equal to n dot reference. That is, we need to do this step again and again. We need to go to the each node and we need to check the data of its next node, whether it is equal to equal to x. If it is not, then we need to go to the next node. So to repeat this, I'll use a while loop here. And here I need to take a condition. Right. When that condition becomes true, then I need to execute this body. If condition becomes false, then I need to stop the execution of this while loop body. So what is the condition here? To find the x and previous node, we need to search the entire linked list. Right. We need to iterate this until we reach the last node. So when we are here, that is when we when n becomes this, I need to stop. I don't want to execute this body because when I when we are here, when this is n, n dot reference dot data, n dot reference becomes none, none dot data will get error. So when this node becomes n, I need to stop the execution of the program. Right. In this node, n dot reference is none. So here you need to type, take the condition like this. If n dot reference is not none, in this nodes, n dot reference is not none. But in the last node, when n becomes the last node, the n dot reference is none. At that time, you don't want to execute this body. So I'll take the condition like this, while n dot reference is not none, execute this. So this is the code to find the previous node of the given node. Now, initially, I'll take this as n and I'll check n dot reference dot data. That is, we'll check the data of the next node. Here, we are not checking the data of the first node with the x. You may ask why that is because we already wrote a separate condition for this. If we are adding the element or the new node before the first node, then we wrote the separate condition. Right. That's why no need to check the data of the first node. All right. So let's write the program now. So here after this, I need to take n as self dot head. And next, I need to while n dot reference is not none. If it is not none, I need to check if n dot reference dot data is equal to equal to x. We are checking for the next node. That's why execute the break statement. That is nothing but if we found that node, then stop. The purpose of the while loop is just find out the previous node of the x. Execute the break statement. Otherwise n is equal to n dot reference. Go to the next node. All right. After executing this while loop, we'll get the previous node of the x. If it is present in the link list, if it is not present, then we need to print a message. Right. So this while loop becomes false or the control will come out of this while loop because of two condition. One is when n dot reference becomes none or the second condition because of this break statement when we found the previous node of the x. So we need to take that two condition. If n dot reference is none, that means we didn't found that node in the link at least. So just print a message. The node is not found. We'll go through this while loop and if it is not none, that means this loop is executed because of this break statement. That means we found the previous node of the x. You just need to write the code now. And next here, after finding the previous node and after moving to that place, what we need to do, we need to change. We need to add the new node after the previous node. So using this code, we found the previous node and we'll go to the previous node. After that, you need to add new node after the previous node. To add the new node first step is you need to create the node in the program will use the node class and create a new node with the data field and link. And this next step is now this is n. n is pointing to the previous node of the given node. Now you need to change the reference of the new node to this node, right? Because we are adding the new node between these two nodes. So that's why we need to change the reference of the new node to here. So this node reference is stored in this node. So now I need to take new node reference is equal to n dot reference because this node is n. So here it will become 3300. So it will point to here. Now I need to change the reference of n here. I need to point this to here. Not here. So for that I need to take this is n. So n dot reference is equal to new node. When we'll create a new node, it has some reference, right? Like 4,000 hundred. I need to store that here 4,000 hundred. Now here we can see new node is added before the x given node. So now we need to write this code. We need to go to the previous node of the new node and we need to add the new node after the previous node. This code is same as adding the element after the given node, which we discussed in the previous tutorial. Here you can see you did the same thing, right? So just copy this code. So we are done with the program now. So let's execute and see whether it works properly or not. Next I'll use add before here. We have only one node now, 10. And I want to add the new node that is 20 before 10. Okay, if I do that, if I execute that, here we can see 20 is added before 10. If I again take another and here I want to add 30 before 10. Then here we can see 20, 30 and 10. If that node is not present in the linked list, for example, 100, it is not present in the linked list now, right? So now if I execute this, node is not found and it will print the remaining nodes of the linked list because we are calling this print LL, that's fine. Or if linked list is empty, we don't have any nodes in the linked list. And if I execute this, we'll print linked list is empty message. We are getting twice, that is because of here in this method also we used this message link list is empty. All right, so this is how you can add the element before the given node. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.