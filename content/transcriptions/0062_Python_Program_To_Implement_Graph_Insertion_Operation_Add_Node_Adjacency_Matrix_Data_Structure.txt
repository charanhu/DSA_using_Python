 Hello guys and welcome to Amulea's Academy YouTube channel. In the previous tutorial we discussed graph insertion operation. That is we saw how we can insert a new node or a new edge between the given vertices in the graph. And today in this tutorial let's write some code. Now after understanding how to insert a new node or an edge between the vertices in the graph, now we can easily write a function to perform graph insertion operation. We can write this for function easily. So today let's write a function to add a new node to the graph using adjacency matrix representation. And in the next tutorial we'll talk about this. So alright now we want to write a function to insert a new node to the graph and here we are using adjacency matrix representation. Here we have an undirected unweighted graph and this is its adjacency matrix representation and this is the list of nodes present in the graph. And here you can see I represented this adjacency matrix in the nested list form. As I said in python to represent the values in the matrix form we'll use nested list. So this is the nested list. So in the function we need two list. First list is to store the all the nodes of the graph and the second list is to store the matrix. So open up a python file. First let's take a list nodes. In this list we'll store all the nodes of the graph. Next we need another list graph. I'll take graph to store the matrix adjacency matrix. Here I'm not taking the nested list because I'll add the inner list later. Here in this representation this row or list represent the connection of A with all the other nodes. So I'll add this list later. Now I'm taking graph as a single list, simple list. I'm not taking here nested list because we'll add this list later. So that's why simple list. If you want you can keep the count of the nodes present in the graph. How many nodes are present in the graph? For that you can take a variable. So here I'll take node count as a variable and initially it will be zero. After adding a node I'll increment the node count. After this we need to define a function for add node. So we'll define the function in the top. I'll use D F followed by the function name. I'll take the function name as add node and in the add node we need a parameter that is we need to add a node. So you need to take a node here. Fine. Inside this here now if I want to add a new node to this graph what I'll do I'll call add node and here I'll write down the node for example F right. So before adding the node we need to check one condition that is whether that node is already present in the graph or not. If that node is already present then we won't add that node to the graph. So that's why here the first condition is I need to check if we in okay I'll use in membership operator I need to check whether we the node or what X is present in the whether that is present in the nodes list. All the nodes of the graph will be stored in this list. So I'll check whether we is present in nodes. If it is present then it will be evaluated as true this condition is evaluated as true that is I'll print a message the node is already present in the graph okay we'll print this message if it is already present else if it is not present then we need to add that node to the graph then let's see how to add that okay if F is not present in the graph then we need to add that to graph. Now here you can see F is added now after adding this node the count of the nodes in the graph is incremented by one right now count of nodes is changed it is incremented by one. So here in the program also we need to do that we need to increment node count by one. So node count equal to node count plus one number of nodes present in the graph is incremented by one so increase the count. Next here now after adding this node to the graph we need to add this to the node list also right this is the list which contains all the nodes of the graph now here I need to add that to here to this list we need to append the new node to the this node list. So here all the vertices are stored in this nodes list so after incrementing the count I'll append the new node to the nodes list. In the program I took the list name as nodes for this for this I took the name as graph after inserting F here I need to append that to this list nodes.append new vertex we did changes to this list. Now we need to do changes to this adjacency matrix after adding the new node what we need to do here we need to add another row and column to this adjacency matrix right. So first I'll add column we need to add an extra column that means here we need to add an extra value we need to append a new value to the list now here the new value will be 0 we need to add like this 0 0 0 0 we need to append 0 to the every list here here we need to add this column for every row that's why I'll use a loop here I'll take a for loop and you can take a variable here n in for n in here I want to add a new column for every row so we need to do changes to every row of the graph that's why I'll iterate over this graph so when I use for n in graph initially n value will be 0 so that will be the first list or first row and I can append the new value here new column to this so here what I need to do is here n is the inner list n dot append we need to add the value at last and what value we need to add we need to insert 0 right here we need to insert 0s right for the new column so for that I used for loop to access every row and after that will append a new value that is 0 to every row so for n in graph initially n is the first row of the graph append 0 after that n becomes the second row so append 0 after that n becomes the next row append 0 so it will add a new column for every row now after this we need to add new rows right here when I add a new node to the graph in the adjacency matrix we need to add a new column as well as new row here new row is nothing but new list here right in the nested list we need to add a new list here every row is a list in the nested list representation every row is a list so here we need to add another list and we need to store 0s so that's why I'll take a list here initially it will be empty then here you can see in this list we need to add 0 0 0 0 0 here I need to add 0 6 times because number of nodes present in the graph is 6 so we need to append 6 0s to the new list because there are 6 column present here right so that's why I'll use for loop and I'll take for I in range of node count so node count is number of nodes present in the graph and here you can see we need to add 6 0 to this list new list or we can say new row right why 6 because there are 6 nodes present in the graph we need 6 row and 6 column that's why I'm using range node count we want to append 0 6 times here so temp dot append 0 why temp because this is the new row I named it as temp it is a list so we are appending 0 to this after completing this I need to append this temp that is the new row to the graph first what we are doing is we are creating this separately okay we are taking a list and we are appending 6 0s next I need to append that to this graph also right that's why graph dot append temp we need to add that row to this graph that's why here graph dot append temp now here we are done so now here if I print graph before adding nodes I'll print graph also next I'll copy this control control v after adding and here I'll call add node and I'll add a new node for example a now if I execute this okay we are getting error why I'll tell you here node count this is defined outside this function so this is a global variable if we try to modify a global variable inside a function we'll get error that's why we are getting error here because here node count is 0 here node count is a global variable we are trying to modify that so for that here to solve the issue you need to use global keyboard and you need to take node count now if I execute this will not get error so before adding nodes it is an empty graph is also empty as well as node is also empty after adding the nodes this is the nodes and this is the adjacent symmetrics now let's add another node and I'll add a and here we can see a is already present in the graph so it won't add that to graph if I add b here a and b and here you can see nested list and if you want to print this nested list in the matrix form then you can use two for loops so let me write a function for that d f print graph okay and here use a for loop in the matrix form number of row and number of column is nothing but number of nodes present in the graph right so here for i in range node count and for j in range row and column okay we are taking nested loops and to print the graph graph i j here you can take n is equal to space that is that is we want to print every row in different lines but in a row we want columns in the same line and we want space between every value of the column that's why we are taking n equal to space and here just use a print function for the new line we want inner list in the different lines that's why print function now here I'll use print graph I'll use print graph I'll call this function here you can see in the matrix form 0 0 0 0 if you want you can print the node count also can add other okay here the values of the matrix is 0 0 0 why that is because when we add a new node there will be no connection between the nodes we didn't add any edge here that's why we are getting 0 0 0 in the matrix so this is about the add node function in the next tutorial we'll discuss about the add edge function how to add an edge between the given two vertices all right so that's it for now guys thank you for watching don't forget to subscribe to my channel i will meet you in next class till then take care and be safe