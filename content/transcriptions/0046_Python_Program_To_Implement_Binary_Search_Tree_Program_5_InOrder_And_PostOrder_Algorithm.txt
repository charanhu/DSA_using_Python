 Hello guys and welcome to Amelie's Academy YouTube channel. We are discussing about the implementation of the binary search T in Python programming language and in the previous tutorial we discussed about pre-order traversal algorithm and we wrote a method for that. Today in this tutorial we will discuss about in-order and post-order traversal algorithm and we will write the method for that. So first we will write the method for in-order traversal algorithm. So here I will take DAF in order. So I am taking the method name as in order and here we just need self. We do not need any other parameter and here we need to write the in-order method body. So let us see what is the order of nodes in the in-order traversal algorithm. In in-order traversal algorithm first we need to visit left node next root followed by the right node. And we need to follow this order in left subtree as well as right subtree. So here this is the root node and this is the left subtree and this is the right subtree. As I said in the left subtree also we need to follow the same rule first we need to visit left node next root and right node. So here first what I will do is I will check whether left subtree is present. If it is empty then no need to visit the left subtree. So first I need to check whether left subtree is present. If it is present then I will call this in-order method recursively on the left subtree. Next I will print root key. Next here also for the right node I will do the same thing. I will check whether right subtree is present. If it is empty no need to do anything if it is present then I will call this in-order method recursively. So here we just need to change the order of these statements. That's it. Here first we need to visit left child so I need to write this ctrl c. I need to check whether L child is present. If it is then call this in-order method recursively in order. Next print root key after visiting the left subtree left node you need to print the root key in the middle. Lastly I need to check if self.r child. If it is present then call self.r child in order call this method recursively. Here you can see in the preorder first we need to visit root key. Next L child next r child. Here first L child root node next r child. So here just print a message this is preorder traversal algorithm. So preorder here and here also you can use end. Okay now we are done with the in-order method. So let me call that let's execute this. You can't use this like this just print here before calling the method just take preorder otherwise we'll get confused which is preorder which is in order. So that's why we can't use that up. We can't use that in the method. So if I do that you saw the output right here you can see preorder is this in order is this in the in order traversal algorithm we'll get the nodes in the sorted order in the ascending order here you can see that 1367 1098. Alright so this is about in order traversal algorithm. Next let's write the method for post order traversal algorithm. So here the post order I'll take the name as post order and we need just self. So what is the order in the post order traversal algorithm? First we need to visit left node right node next root in the last we need to visit the root node right. So first left node and if left subtree is present then you need to follow the same rule. So first I'll check whether self.l child is present if it is present then I'll call this method recursively post order then I need to check if self.r child is present. If it is s then self.r child call the post order method on the r child. Lastly you need to visit the root node print self.key. This is the order in the post order in the post order first we need to visit the l child r child and lastly we need to print the key root ski. So now if you observe these three methods here you can see the order clearly in the pre order we'll visit root ski. After that we'll check whether l child is present left subtree is present. If left subtree is present we'll call this pre order again because we need to traverse the left subtree in the same way. We need to visit root node l child r child that's why we are calling this method again. After completing this we need to visit the r child we are checking whether right subtree is present if it is present call this method again and coming to the in order in the in order first we need to visit left child next root next r child. In the post order we need to visit l child r child lastly root. Okay let's call this so and call root dot post order and is equal to. So here we can see pre order in order and post order sorry here you need to write post order pre order in order and post order if you have any doubt you can construct the tree from this and you can traverse that manually and you can compare the output and here I won't trace in order and post order method because in the previous tutorial I explained you how pre order method works line by line so that's why I won't trace this method today but this is the exercise for you you need to trace these two methods you need to see how it works and if you have any doubt you can ask me in the comment section. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.