 Hello guys and welcome to Python programming tutorials by Amuliez Academy. We are discussing about LinkedList program and we were using class concept to implement single-linked list in Python and we already created node class and linked list class and in the linked list class we are creating the method to perform different operation and we already created a method for traversal operation and insertion operation. We were discussing about deletion operation and in the previous tutorial we created a method to delete the node from the beginning of the linked list and end of the linked list. Today we will discuss about another scenario. Today we will discuss about how we can delete the node from the middle of the linked list. Today we will write a method which will allow us to delete the node from any position of the linked list whether the node present in the starting or ending or in middle. Here user will choose which node he wants to delete. He will give the value of that node and we need to delete that node. It can be present in the middle of the linked list or at the start or at the end. Right so let's write the program. In the deletion operation the first step is we need to check linked list is empty or not. If linked list is empty that means we can't delete the node from the empty linked list. So first step in the deletion operation is you need to check linked list is empty or not. If it is empty then we'll print a message like linked list is empty you can't delete a node like that. If linked list is not empty then we can perform the deletion operation right. As I said today we are writing a method which allows us to delete the node from any position. We are deleting by value. User will give you the value of that node and we need to delete that node. It can be present at the end start or in the middle. If the user mentioned node or the given node is the second node, third node, fourth node or the last node of the linked list then no problem the code is same for all that scenarios. But if we are deleting the first node of the linked list then the code is different. So first we need to take that condition. We need to check the given node is first node or not. If it is the first node then it is like deleting the node at the beginning of the linked list. So you need to point head to the second node. I already explained about that right. If it is true then head need to point to the second node. So the first step is here if linked list is not empty then first I need to check whether the given node is the first node whether we are deleting the first node of the linked list. If s then head the need to point to the second node. We need to perform those operations. If not if it is not the first node then we need to go to the previous node of the given node. For example if I want to delete this node you need to go to the previous node of that given node. If this is the given node user want to delete this node then we need to go to the previous node of that node and we need to change its reference. We need to change its reference to the next node. If it is not go to the previous node and change the reference. All right so this is the step we need to follow while deleting the node by value. So to write the program now first step is we need to check linked list is empty or not right. To check whether linked list is empty or not we need to check head. If it is none head is the starting point of the linked list. If it is none means linked list is empty. So first I need to check self.head is none. I need to take that condition to check linked list is empty or not. So let's write that. In the python file we have class node linked list class and in that we have traversal operation add begin add end operation and next we have add after add before delete begin delete end. We have so many methods and all the videos link are in the description box. Now today we are creating the method called delete by value. So I am taking the method name as delete by value. You can take any name. So here we need self parameter with that we need user input x user will select which node you want to delete he'll give that value of that node right. So we need this x parameter. So first step is I need to check linked list is empty for that I need to check self.head is none. If it is none means I need to print a message. I'll just print a message because linked list is empty. We can't delete the element or node from this linked list. And here I'll use return statement. So what this return will do is after checking whether head is none. If this condition is true it will just print this message and it will come out of this method. Now next. So we wrote the method for this part if linked list is empty will print a message. If it is not empty then what we need to do we need to check the given node is first node or not right here you can see. So to check whether that is first node or not in the program I took x as the user mentioned node. X is nothing but the data of the node which we want to delete. Now we need to check the first node is the given node or not whether we want to delete the first node or not. So to check that I'll compare x with the first node data here x is nothing but the data field of the node which we want to delete right. So we need to compare that with the first node data. So to compare the first node data we need to take self.head.data because here head stores the reference of the first node. If I want to access the data field of the first node you can write it like this self.head.data. If you want reference then you can write it as self.head.ref. So here we want data field so x is equal to equal to self.head.data. I'll compare that. If this condition becomes true means we want to delete the first node. So what I need to do if it is true I need to point head to the second node. So to point head to the second node here I need to take head equal to I need to store the reference of the second node. The second node reference is stored in the first node. So I need to take self.head.ref. We already discussed about in the previous tutorial while explaining about how we can delete the node from the beginning of the linked list. So I won't explain much about this here. I need to point head to the second node and the second node reference is stored in the first node. To access the reference of the first node I need to use self.head.ref. In the program here no need to use else because here I used return. So here I need to check if x is equal to self.head.data. The data of the first node. If it is true that means we want to delete the first node. To delete the first node I need to take the self.head as the reference of the second node. So self.head.reference. The second node reference is stored in the first node. So I'll use self.head.ref. So the reference of the second node will be stored in head now. Next I'll use return here. If you don't want to use the else part then you can write like this or you can use if else if else like that also. Now here we also done with this. So we checked link it list is empty or not. We checked if it is not empty then we checked this condition if given node is first node or not. If given node is not the first node. If it is the second node third node fourth node or the last node then how to write the code for that. So as I mentioned if it is not the first node then go to the previous node of the given node. Here for our example I'll take the given node as this okay this is the x x is nothing but 30. I want to delete this node. For that I need to go to the previous node of this node. Now the question is how we will go to the previous node of this node. In the link it list to check the data of the next node I can use like this. End.reference.data. So here if I take this as n then end.reference is nothing but 3200 that is nothing but this. Now this is end.reference. Now if I take end.reference.data that is nothing but 30. If I take end.reference.reference then this 4400. Here in the program the requirement is we need to go to the previous node of the given node. Here this is the given node x and we need to go to the previous node. So to do this from the previous node we need to check the data of the next node. We need to compare whether that is equal to x. I need to check like this end.reference.data is equal to equal to x. When this is n I need to check end.reference. The next node data is equal to equal to x. If it is true here in this case it is true because I took this as the x then this is the previous node of the x. So we are in the correct position right. So to check the next node data we need to use like this end.reference.data is equal to equal to x. Here also we need to do the same thing. If it is true then we need to do something that I will explain later. Before that here I took this as the end right but how to travel to this position. To travel to the previous node I need to take head as n. That is nothing but I need to take the first node as n initially. So initially I need to take n is nothing but self.head whatever the reference stored in head that means the first node is n now. Now we already know the given node is not the first node right because we already wrote the condition for that. If given node is the first node then we will perform different operations. If we are executing this part that means the given node is not the first node. We are not deleting the first node. So no need to check the data of n now because we already know this is not the node which we are deleting. So that's why I will check the data of the next node. Now n is this node the first node and to check the data of the next node what I will do end.reference.data is equal to equal to x. Here for example I took x as 30 right. So now here end.reference.data is nothing but 20. 20 is equal to equal to 30. No right it is not that means this is not the previous node of the given node. So now what I need to do I need to increment the n. I need to go to this node now. The next node I need to travel to the next node. So to do that I need to take n is equal to n.reference. I need to assign the n value. So now here n.reference is nothing but 50000. So n becomes this node. Each node contains the reference of the next node right. So here n becomes this node second node. Now again I will do the same thing. I will check n.reference.data is equal to equal to x. Here it is true because n.reference.data is 30 because this is n. So this will become n.reference. So n.reference.data is 30 and the given node is also 30. So it matches. That means we found the previous node of the given node now. I need to stop here. So I'm doing this to find out the previous node of the x node or given node. When I found that I need to stop. Otherwise I need to increment n by n.reference. So we need to do this again and again here we found the x value that's why we need to stop. If we didn't find the x value we need to do this again and again that is we need to increment the n node. That is we need to go to the next node and we need to check the data of the next node with the x until we will find the x or we'll complete the comparison of the x with the whole linked list. We need to execute this again and again. So that's why I need to include this in a loop. So here I'll take y loop and here in the y loop I need to mention the condition. If that condition is true then I need to execute this statement. So let's check the stopping condition of this. One is this when reference.data is equal to equal to I need to stop. Otherwise I need to traverse the whole linked list. So for that I can take n.reference is not none. When n.reference becomes none I need to stop. Otherwise I need to check the data of the next node and I need to increment the n. Why I'm taking n.reference is not none. That is because initially the first node will be n right. So I'll check the data of the next node. n.reference.data is equal to equal to x. So here 20 is equal to equal to x. For example I'll take x equal to 50 okay. So I'll check 20 is equal to equal to 50 no. So I need to execute this n equal to n.reference to 1. Now n becomes this and again I'll check the data of the next node. 30 is equal to equal to 50 no. So I need to increment n value and equal to n.reference. Now n will become this. Again I'll check the data of this n.reference.data that is the next node data. 40 is equal to equal to 50 no it is not right. Now what I need to do I need to increment n. So n equal to n.reference. Now we don't have any other node to compare right here. We don't have n.reference.data now because here n.reference is none here. So when n.reference is not none we need to do this. When n.reference becomes none I need to stop. In this node n.reference is none right. At that time I need to stop. So I need to take the condition like this. While n.reference is not none compare the value and if it is not equal then increment the n value. So in this way we can find the previous node of the given node. So let's write this code first. So here I need to take n is equal to self.head and while n.reference is not none. If you take n is not none here when n is pointing to this n is not none here n is 4,400. So it will check this n.reference.data is equal to equal to x. n.reference is none none.data will get error there. So that's why you take n.reference here n.reference is none if x is equal to n.reference.data or you can take n.reference.data is equal to equal to n. If it is true just execute break statement here. So because I am using while loop here to come out of the while loop we need to use break statement. When this condition becomes true means we got the previous node. So just come out of the loop. We are using this loop and the if condition to just to find out the previous node of the given node. If else then just increment n is equal to n.reference. Using this code we are searching for the previous node of the given node. And after executing this code we can get two outcome that is control can come to this place in because of two cases. One is when we found the previous node of the given node or when n.reference is none. When is here this condition becomes true that means when we found the previous node of the given node or when n.reference become none. So I need to take that two condition if n.reference is none that means we chucked for the whole linked list we didn't found that mentioned node. So just print a statement here in the linked list. Else as I said control can be come out of this while loop because of two condition when we found the previous node of the current node or when n.reference becomes none. Here we already took that condition. If n.reference is not none that means we found the previous node of the given node. So at that time what I need to do is so when we found the previous node change the reference we need to change the reference of that node. For my convenience I take this as the x. So that means this will be n this is the previous node of the given node. Now what I need to do is I need to change this reference to this node because we need to delete this node. So I need to change the reference of this node n to this node. So let's see where this node reference is stored here right in this node because every node contained the reference of the next node. So here what I need to take is n.reference because this is n here n.reference is nothing but this place is equal to I need to take this reference. What is this? This is the thing about n.reference.reference because when I take this is this is n.reference for now when I take n.reference here 3200 that is nothing but this node. So this node is nothing but n.reference to access the its reference I need to take n.reference.reference. So now whatever the reference stored here that will be stored here. Now it will store 4400. Now if I traverse the link list it will start from head 1011. So this is the first node next it contains the link of 50000. So this is the second node it contains the link of 4400 that is that means this is the third node it contains none that means it is the stop of the execution this node is removed now right. So here in the else part I need to take n.reference is equal to n.reference.reference. So we are done. So let's see whether it works or not. So here instead of delete end I'm using by value here I need to mention the value which node you want to delete. We already have 10 20 30 that means it is in the order like 30 20 and 10. So if I want to delete 10 I'll mention 10 and let's execute this here we can see 30 and 20. 10 is removed. If I mention 20 30 and 10 20 is removed now and if you want to take 50 it is not present in the link list now. So we'll get message node is not present. So node is not present message. Or if you delete the first node for example here when we have 30 20 10 30 is the first node. Now if I want to delete that here we can see 20 and 10 and if linker list is empty and if I try to delete a value can't delete linker list is empty and another message here we can see linker list is empty that's we are getting from this print LL method. Okay so in this way we can delete a node by mentioning its value. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.