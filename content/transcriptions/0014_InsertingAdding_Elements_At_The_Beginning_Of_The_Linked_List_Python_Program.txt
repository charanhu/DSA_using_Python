 Hello guys and welcome to Python programming tutorials by Amalia's Academy. We were discussing about how to implement Linked List in Python. In the previous tutorial we saw how to create a node, how to create a Linked List as well as how to traverse a Linked List. We wrote a method for traversal operation. We can perform many operations using single Linked List. But here in this video series we are discussing about three operations that is adding elements, moving elements and traversal operation. In the previous tutorial we wrote a method to traverse the Linked List. Next we'll discuss about these two operations. So first we'll discuss about adding elements, how to add the element to the single Linked List and how to write the program for that. As we discussed previously we can add or insert the elements in the different position of the single Linked List. We can add at the beginning, we can add the element at the end or in between the nodes. We need to discuss these these scenarios while adding the elements to the single Linked List. So first we'll write the code for this, how to add the element at the beginning. So when we add the element or the node at the beginning of the Linked List, that node, the newly added node will become the first node of the Linked List and that reference will be stored in the head. Here we can see this is our first node here and the reference of this first node is stored in the head. Now we want to add a new node at the beginning of the Linked List. So let's see how to add that. So for that the first step is we need to create the node. In the insertion operation or while adding the element to the Linked List, the first step is we need to create the node. So here we are discussing about how to add the element at the beginning of the Linked List. So I'll take the method name as add begin and I'll take the parameter as data. So I don't want any other parameter. I want data. That means whenever we'll create a new node, we need the data for that data field. Right. So that's why we'll take that as the parameter for this method. And here as I said, the first step while adding the element to the Linked List is we need to create the node. Now the question is how to create the node here. So here to create the node, we can use this node class. We defined the node class in the previous tutorial, right? Using the node class, we can create the nodes. So here the first step is using the node class create a node. I'll give the name of the new node as new node. And here I'll pass the data. So I am creating a node using this node class. If you remember in the node class, we initialized fields of the node here data as data reference as none. Whenever we'll create a node, we need to pass the data as the parameter. Right. So here also we are doing the same. So here using the node class, we are creating a node and here, for example, if data is 100, okay? So it will create a node with the data field as 100 and the link or reference as null. Because in the node class, we took reference as null, right? None. This is the new node with the data as 100 because here we took data as 100 and the link as none or null. And when a new node is created, it will have a reference. So I'll take the reference as 1010, okay? Some random reference. Now the first step is done. We need to create a node to create the node while writing the program will use the node class. Now the second step is after creating the node, what I need to do is I need to change the link of the new node. So the reference of the new node, I need to make this two point here. The first node, the previous first node. So for that, I need to change the new node reference to head. Whatever the reference is stored in head, I need to store that here. We discussed these steps in the previous tutorial. New node reference will be head. Whatever reference is stored in head, I need to store that here. The new node will point to the first node of the linker list now. So instead of this, it need to store the 1000 hundred. So how to do that here in the program? So for that, you need to take new node reference equal to head. Whatever reference stored in head, store that in the new node reference. Now new node will point to the first node of the linker list. Next, here we are adding this node at the beginning of the linker list. That means this will be the first node of our linker list. If this is the first node of our linker list, that means head needs two points here, right? Head should store the reference of this node, the first node, right? So for that, what I need to do is, I need to point head to the new node. Here the third step is, I need to point head to the new node. Whatever the reference of new node, when we created a new node, there will be a reference, right? That will be stored in head. The reference of the new node will be stored in the head because now new node is the first node of the linker list. So here, instead of pointing here, it should point here, head need to point here, and here it should store 1010. That is the reference of new node. So now here we can see, starting from head, so 1010 is the first node. So it will go here, this is the first node. So the next reference of this is 1100. So it will go here. So this is the next node, and it stores the reference of the next node. That is nothing but 1350. So this will be the next node. It stores the reference of the next node 1730. So this will be the last node. It travels like this. So the last step is, head should contain the reference of new node. So while writing the program, I need to take head is equal to new node. So whenever we'll create an object from the class, here node is nothing but a class. When I take new node equal to node, that is nothing but we are creating the object from that class. And this new node will contain the reference of the newly created object. In the previous tutorial, after creating the node class, we created the object from that class, and we printed that. It will print the location where it is present. Here also the reference of this object, new node is stored here in the new node. That's why I took head is equal to new node. To understand this class, you need to watch the previous tutorial. In this way, you can add the new element. We need to follow the three step. The first step is create the node. To create the node, we are using the node class. Second step is, you need to change the newly created node reference. You should point to the first element. As we know, the reference of first node is stored in the head. That's why I need to take new node reference equal to head. Whatever the reference stored in the head, we need to assign that to new node reference. Now, the new node will be pointing to the first node. There it is the previous first node of the linked list. This node. Next, what I need to do is now we created a new node that will be the first node of the linked list. Now, that's why we need to store the reference of new node in the head. That's why I will change the head to the reference of new node. So, let's write the program. So, here this is the class node. This is the linked list class in that this is the traversal operation. We discussed about this in the previous tutorial. Now, the if I take the method name as add begin. I am adding the element at the beginning of the linker list. Let's take the parameters. The first parameter should be self and the second parameter is data. While inserting or adding the element to the linked list, we need to mention the data which data you are entering to the linker list. Each node will contain the data field and link, right? While adding a node, you should mention the data field. So, that's why I took data. Done. So, next here. The first step is we need to create the node. To create the node, I will create the object from the node class. So, here we have right node class. We are creating the object from that. So, while creating the object from that, we need to mention the data. So, here I will take data. So, it will create a node with the data field and link or reference as the none value. So, now we created a new node. Now, the next point is after creating the new node, we need to change the node. We need to change the reference of the new node. Now, it is pointing to the none value. Now, we need to change that. We are adding the new node as the first element of the linker list, right? That's why in the new node reference, we need to store the link of the previous first node of the linker list. Previously, before adding this, this is the first node of the linker list, right? Now, we are adding this element. That means this will become second node and the next node of this node, new node. Each node will contain the reference of the next node, right? For new node, this node will become the next node. So, the reference of this node will be stored here. For now, we didn't completely added this node to linker list. So, for now, this node is the first node and the reference of this first node is stored in the head, right? So, I need to assign that to new node reference. Here, I need to change the new node reference, new node, R E F. Initially, it is none, but we want to change that. I'll change that to self dot head. Whatever the reference stored in the self dot head, store that in the new node reference. After this, the new node will be the first node of the linker list, right? And as we know, the reference of the first node will be stored in head. Now, the new node is the first node. So, we should save or we should store the reference of new node, that is the first node of linker list. Now, we need to store that reference in the head. So, for that, I'll take self dot head is equal to new node. So, the reference of newly created node is stored in this new node. Okay, that's why we are taking like this. So, we are done with the code, right? Let's see this works or not. We have created a object from the linker list, LL1. Next here, let's insert few element. LL1 dot add begin. I need to add a data. So, I'll add 10. Next, whether it is added properly or not, to see that we'll print the linker list, we'll traverse through the linker list and we'll print the linker list. I'm calling this method. This will go through each node and it will print the information present in that. LL. So, here we can see 10. Before adding this element, linker list was empty. Now, we added the element at the beginning of the linker list, so it is printing 10. So, now, let me add another node. So, here I'll take it as 20. So, let me print that now. So, first it will print 20 next 10 because we are adding at the beginning of the linker list. So, first we'll add 10. After that, we'll add 20 at the beginning of the linker list. So, first it will print 20 next 10. Okay, so this is about how to add the element at the beginning of the linker list. So, next, we'll write the method for at the end and between nodes. So, that will discuss in the next tutorial. So, that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then, take care.