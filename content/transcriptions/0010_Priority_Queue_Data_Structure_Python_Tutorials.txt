 Hello guys and welcome to Python programming tutorials by Amoleus Academy. We were discussing about data structures and in that previously we discussed about Q and how to implement Q in Python. Today in this tutorial we will discuss about Preyori TQ. Q is a linear data structure which works on FIFO methodology. The first in first out method. Preyori TQs are the modified version of the Qs in which each element is associated with the Preyori T and is served according to its Preyori T. If elements with same Preyori T occurs they are served according to their order in the Q. Q works on FIFO methodology. Here I will enter an element 10. We will come here next I will enter 20, next I will enter 30, next I will enter 100, next I will enter 70, next I will enter 50 something like this. So in Q the element which comes first will be served first that is which will be performed first which will be removed first from the Q. After that 20 will be removed after that 30 will be removed after that 100 will be removed. It works based on the first in first out method and insertion and deletion is done in the different ends. Preyori TQ is also Q. Here also the insertion and the removal of element is done in the different end. But the removing the element is based on the elements Preyori T. Each element will be associated with the Preyori T and based on that Preyori T it will be removed from the Q. If you went to buy a ticket then you will stand in the line. The first person in the line will first buy the ticket right. After that the second person in the line will get the ticket. It will works on the FIFO methodology. But in the hospital the critical condition patients are treated first right. It is based on the Preyori T. If the person condition is critical then he will be treated first. The Preyori TQ works like that. Ok so the difference between the Q and Preyori TQ is in the Q the first in first out the oldest element in the Q is removed first. But in the Preyori TQ it is not on the oldest or new element it is based on its Preyori T. For example just imagine that 20's Preyori is more than this 10 then 20 is removed first. After that the element which has highest Preyori that will be removed second. So the next question is how to set the Preyori T. In some cases the value of the element itself is considered for the designing the Preyori or you can take the tuple in that you can take the value and its Preyori T. So you can set the Preyori T in two ways. You can take the value of the element itself as the Preyori T of the element or you can take the file element and it's Preyori T as the tuple value. If you are taking the value of the element itself as the Preyori T then in that also you can take it in two ways. One is you can take the lowest element as the highest Preyori Xghsedows we can take the highest element are highest Preyori T. For example, if I take the lowest the element highest priority that is nothing but lowest element will have highest priority. Then in the queue it will chuck the lowest element here 10 so that will be removed first. Next 20 will be removed. Next 30 will be removed. Next 50 will be removed. Next 70 will be removed. Next 100 will be removed. Or if you take highest element high priority the highest element will be removed first. The 100 will be removed first. Next 70, next 50, next 30, next 20, next 10. So here the elements are removed based on its priority. And how to set the priority? Either you can take the element itself as the priority or you can take the tuple value in that you can take the priority and the value. So the next question is how to implement priority queue in Python. You can use list for that. You can use list to implement the priority queue or you can use the priority queue class from the queue module. There is another method called heap queue module but I am not discussing about that here. To remove the element based on its priority here first we need to sort the list. If I want to do this that is lower the number higher priority first I need to arrange the number in the ascending order. Then I need to remove the element if you are entering the element from this side and if I am removing the element from this side. So in the list we will create the queue first then we will add the element using the append method. After appending the value we need to sort the queue and next we will use the pop method to remove the element from the queue. So let's see the example. Next I need to take. So now we need to sort the queue because only one element is present. But next I will add 40. So I will sort this using sort method. Next I will use append and here I will add 20. I need to sort this. So if I check queue now it is 10, 20, 40. Okay it is sorted. So for the first time if I pop first 10 will be removed, next 20 will be removed, will remove 40. The lower value will be removed first. This is not the best way to implement the priority queue. The best way to implement the priority queue is using the binary heap. So the next method in the priority queue class the entries are kept sorted using the heap queue model. It will use the binary heap data structure and the lowest value entries retrieved first. So next we will implement the priority queue using this class. Here import queue priority queue create an empty queue. Next to put the element you need to use put method and to get the element you need to use get method or you can use put no wait or get no wait method also. I explained about this in the previous tutorial you can watch that. So here I will use 10 and I will enter 60 and I will enter 20, 40 and if the same numbers are entered for example 40 and 40 if two numbers has the same priority then it is removed based on its order. So now to remove this you need to use get function. 10 will be removed first. Next the next lowest number will be removed that is 20. Next 40. Next 40 again. Next 60 is removed. So this priority class will take the lowest value as the highest priority and it will remove the lowest value first. Alright so this is about the priority queue. Next as I said if you want to add the tuple it is the priority and value for example like this one that is the priority and here I take value I will take its priority as 4. I need to sort this and if you want in the reverse order that is the highest value priority here you can take reverse as 2 it will sort the element using the descending order and here you can see the queue. So now if I pop you can take the element like this also. Alright so this is about the priority queue. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.