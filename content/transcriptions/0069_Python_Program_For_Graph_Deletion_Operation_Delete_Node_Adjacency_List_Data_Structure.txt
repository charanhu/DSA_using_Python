 Hello guys and welcome to Amulie's Academy YouTube channel. We were discussing graph deletion operation and in the previous tutorial we wrote a function for delete node operation as well as delete edge operation using adjacency matrix representation. Next, let's write a function to perform this operation using adjacency list representation. Today in this tutorial we are writing a function to delete the given node from the graph using adjacency list representation. The delete node operation deletes the given node from the graph and it also deletes the edges connected to that given node. For example, if I want to delete node C here, if I call the operation delete node on the node C, the node C will be deleted from the graph as well as the edges connected to C that is this edge and this edge. We need to delete these two edges also. Now when I perform delete node operation, what changes I need to do in the adjacency list representation. Here for the adjacency list representation we are using dictionaries and in the dictionary, key is representing the nodes of the graph and value is representing the list of adjacent nodes. Now when I delete node C, first step is we need to delete that key from the dictionary. So I need to delete this key and value pair. So first step is we need to delete this. Next, we need to delete the connection also, right? The edges connected to C. That's why we need to check value of every key and here value is nothing but a list, right? And in that list we need to check whether the deleted node that is C is present in the list or not. If C is present, then we need to remove that from the list. For example, here you can see first I need to check the value of key A. This list is the value of key A. So here C is present and here we are deleting the node C. That's why I need to remove this from this list now. After completing this, I need to check the next key that is B and I need to check its value and I need to check whether C is present. Here C is not present so no need to delete that from the list. Next check the next key. That is D. I need to check whether C is present in this value. Yes, here C is present so I need to remove that from this list. Next I need to check the next key. I need to check its value whether C is present. If it is present, delete that from the list. Now we want to write the function for delete node operation and while deleting the node we need to mention which node I want to delete. And while writing the function first step is we need to check whether V is present in the graph. Here V is nothing but the vertex or node which I want to delete from the graph. If it is present then only I can delete that. That's why first condition is we need to check whether V is present. If V is not present then we will just print a message. If V is present first we need to delete the key V from the dictionary and also its value. We need to delete the key and value pair of V, the node which I want to delete. As I said in dictionary every key presents the nodes of the graph. If you are deleting the node V in the graph then first I need to delete that key value pair from the dictionary. Next we need to check the value of every key and we need to check whether V is present in that list. If it is present then remove that from the list. We need to follow these steps while deleting the node in the adjacency list representation. Okay so let's write the function. Here we have our program. In this program here you can see a dictionary graph dictionary and in this program we already defined add node and add edge operation. Now here next we want to define delete node function. DAF delete node. I will take the function name as delete node. I will take the parameter as V. V is the node which I want to delete from the graph. And next here first step is we need to check whether V is present in the graph or not. So if V not in graph here graph is a dictionary. So we are checking whether V given node is present in the dictionary or not. If it is not present in the dictionary that is not in we are using not in membership operator. So this condition becomes true only when V is not present in the graph then we will print a message like this else. If V is present in the graph then control will come here. If this condition becomes true that means V is not present in the graph so we will print this message. If this condition becomes false that means V is present in the graph. So in the else case we need to delete that node. To delete the node the first step is after confirming V is present in the graph what we need to do we need to delete the key and value pair of node V. In this graph if I want to delete see here I need to delete this key and value pair. So to delete this key value pair from the dictionary I will use pop method I will call graph dictionary name pop and here I will mention V that is delete V from the graph. It will delete the key value pair. So this step is done after this what we need to do we need to check the value of all the other keys. In the values I need to check whether the node V is present in that list or not. If the node V is present in the list in the value of other keys we need to remove that from the list. So for that first we need to take key as a. We need to check its value. Next we need to go to B. We need to check its value we need to go to D. We need to check its value we need to go to E we need to check this value. So, we want to perform this operation again and again that is why here I will use a loop that is for loop and here I will use for loop on graph for i in graph. Here i will represent the key of dictionary. So, next here we want the value of every key. So, here I will take a list list 1 and here I will call graph of i. Here value of every key is a list right and we want value of every key here to check whether the deleted node is present in the list or not. So, for that we are using like this. Next what I need to do I need to check the v is present in that list or not. So, for that you can write like this v in list 1 if v in list 1 whether v is present in list 1. If it is present then what we need to do we need to remove that. So, for that list 1.remove v. I will check if v is present in list 1 using membership operator. If it is present then remove that using remove method. Here list 1 is a list right that is why I will use remove method on that. It will remove that node from the list. That is it we are done here. If v is not present in the list 1 don't do anything that is why we are not taking else part here. So, now we are done here. So, let's execute this function and see whether it works properly or not. And here if you see add edge function here we can see we wrote the condition for directed graph. Now this program is written for directed graph. Graph will look like this. Now if I delete if I delete a and if I execute this here we can see b is empty, c is empty. So, this is for directed unweighted graph and now if I delete c here you can see c is deleted. Now if I delete b here you can see I will paste this like this. This is the graph. Now if I delete node here and if I delete c and here you can see c is deleted. If I write print graph before deleting then you can see the changes. So, this is for directed unweighted graph. Now if I want to work this for undirected unweighted graph. So, we need to remove this you need to take v1. Now I will take different values. Here I will take few different values like this. So, now if I delete c and if I execute this here you can see c is deleted. You can see the graph also right. You can understand this. This method is working for the unbated directed graph and unweighted undirected graph. Now I want to modify this program for weighted graph then how to do that. In the weighted graph we will have value as nested list. So, when I apply for loop on this graph initially i value will be the first key and its value is this. It is a nested list. That is why here what we need to do is first let me make this weighted graph. So, here list 1 and list 2. I already explained about this how to modify this added function for weighted graphs. Okay this is for now weighted undirected graph. Here what we need to do in the delete node. So, first we need to delete the key and value pair that is done. Next we need to check value of every key that is why we are using this for loop. Initially I will take list 1 equal to something. Here list 1 is a nested list. We will get a nested list. Now what we need to do we cannot take like this instead of this. I need to take another for loop okay for j in list 1 and in that I need to check if v is equal to equal to j of 0. So, here j will become the first inner list and here you need to remove that from the list 1. List 1 remove j. Next here you can use a break statement that is because after deleting j from the list no need to check that list again right. Here this program work for the simple graph when there is a single edge between the nodes okay. It will not work for the multiple edges. That's why here we can write break statement. After deleting the node from the list no need to check the list again. This break statement terminates the innermost loop this loop. Now here while calling the add edge you need to give the value also. So, cost I want to delete node c. So, let's see whether it works or not. Here sorry you need to mention the cost. Now we deleted c that's why here you can see c is deleted from a. C is deleted from b also. C is deleted here and from d also okay. So, here you can see. So, in this way you can modify this function for weighted graph. In the weighted graph you need to take another loop and you need to check the value like this okay. And one more thing in the previous tutorial while discussing about the delete node operation in the adjacency list representation I told you. If you are dealing with the undirected graph no need to check the value of every key. Here I won't explain about that method because you may get confused with two three methods. If you are interested then you can try that. I'll try to give that code in the description box. So, this is about the delete node operation using adjacency list representation. First we need to check whether v is present in the graph. If v is present in the graph then first I need to remove that key value pair. Then we need to check value of every key and we need to check in that list whether the deleted node is present. If it is present we need to remove that. So, that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.