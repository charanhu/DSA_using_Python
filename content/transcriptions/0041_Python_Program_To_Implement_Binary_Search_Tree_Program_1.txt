 Hello guys and welcome to Amuleus Academy YouTube channel. We were discussing about binary search tree. Next, let's see how to implement binary search tree in Python programming language. Here to implement binary search tree, we are using class and object concept. So before starting this video, I'll assume that you have basic knowledge about class and object concept in Python programming language. So here we want to implement a tree, specifically binary search tree. And tree is a collection of nodes, right? And here I'll take every node of binary search tree contains three part, that is the first part is key or data or value. And the second part is left child and the third part is right child. While writing the program, as I said, we are using class and object concept to implement binary search tree. So here every node of tree will be an object. So here we'll create a node like this. This is an object and every node will contain three parts. One is key. So here we'll mention key and here this is the left child. It will contain the link or reference of the left child. If this node doesn't contain the left child, then the reference will be none. And here it will contain the link or reference of the right child. And if right child is not present, then it will store the reference to none. Here is an example. This is a tree, binary search tree. This is the root node which contains 10 and this is the left child of this node and this is the right child of this node. And this node doesn't contain any child. And here this node contains two child nodes. So 15 and 100. 15 is the left child and 100 is the right child. So here in our program we'll represent this tree like this. Here every node will be an object. This is the first node and it contains three parts. 10, 500 is the reference of its left child and 200 is the reference of its right child. Next coming to this node, it contains key and it doesn't contain left node. So that's why the link or reference is none. Here it doesn't contain right child. That's why none. Coming to this node 20 that is the key 7900 is the left child link or reference. And here we can see 3200 that is the link or reference of the right child. And both this node doesn't contain left and right child. That's why we can see none here. Right. So we are representing three like this in our program. Here every node will be an object and every object will contain three parts. That is key left child and right child. All right. So let's write the program in the Python file. First I'll take a class here to implement binary search tree. I'll use only one class. If you want, you can use two class that is you can take a separate class to create a node like we did in the linker list. In the linker list, we used class node and class linker list to class to implement linker list. But here we'll take only one class. We won't take separate class to create the node. So here I'll take class here. I want to implement binary search tree. That's why I'll take the class name as binary search tree. If you want, you can take any suitable name. Class name is a little bit lengthy. If you want, you can take BST, also short form of binary search tree like this. Take a suitable class name and inside this class, first I'll take the initialization method. That is, I'll take init method underscore underscore. You need to take two underscore. Next, IENIT followed by double underscore. init method is the special method of class and it is called when object is created. When object is created, this method is called automatically. No need to call this explicitly to call any other method. I need to mention the object name dot method name, right? But no need to call this method. It is an initialization method. It is a special method of class. It will be called automatically when object is created. This method allows the class to initialize the attribute of class. And next here, first I'll take self parameter. If you observe closely in every method of class, the first parameter will be self. Here self represent the object itself. Self is used to represent the instance of the class. Instead of self, you can't take any name here. The first parameter of every method represent the object itself. There is no rule that you need to take that parameter name as self. You can't take any name, but most used name is self. That's where we'll take the first parameter name as self followed by here. I'm taking this initialization method to initialize the attribute of the class. That is, we'll create an object from this class, right? As I said in our program, every node is an object. So when I create an object, that means I'm creating a node and every node contains three parts, right? Key, left child and right child. First I need to initialize that, right? That's why we are taking this initialization method. So here I'll take next parameter as key. What we are doing is when we create an object, we need to mention the key. So when we are creating a node, that is an object, we need to mention the key of that node. With that, we can create a node like this. Self.key is equal to key. We'll initialize key and here for left child, I'll take eL child is none. Initially, we'll take it doesn't contain any left child and here for our child, that is the right child, I'll take none. So what we are doing is first here, we'll create an object from this class. That means we are creating a node and at that time, while creating the node, I need to mention the key of that node and initially I'll take eL child and our child as none. So now we are done with the initialization method. Now if I create a object from this class BST, here I need to pass key. If I didn't pass key, I'll get error because here we can see in the initialization, we took key. So I need to mention key here and here self is nothing but the object itself. So here root. So now if I print root dot key like this and if I execute this, here we can see 10, none and none. An object is created key is 10, eL child is none, our child is none. Now if I want, I can create another node, that is another object from this class, then I can make it as left child or right child of the root node, a root object like this. If I want to make that as the left child, then I can take root L child is equal to BST 5. Now another object is created and that object is the left child of the root node, root object. Now if I print like this and if I execute this, here we can see another object. After creating this node, if I print this, first 10, none, none, next it is 10, here root key is 10 and root dot L child is this, we have left child, that's why we are getting this. Next our child is none and next it was printing root L child dot key, that is 5, root L child is none, root L child dot R child is none. So it is somewhat like this, here you can see the image right. But in our program, we are not adding the elements like this to insert the new element to the tree, we are using insertion operation and for that we will write the separate method and that we will discuss in the next tutorial. So that's it for now guys, thank you for watching, don't forget to subscribe to my channel, I will meet you in next class till then take care.