 Hello guys and welcome to Amulya's Academy YouTube channel. We were discussing about binary search tree and in the previous tutorial We discussed about binary search tree operations and next today in this tutorial Let's see how to find smallest node or the largest node in binary search tree So first let's talk about how to find the smallest node in binary search tree the very basic property of binary search tree states that the smaller value will occur in the left subtree as we know the binary search tree are ordered when we insert any node to tree will follow this if the key of a node is Smaller than or equal to the root node then we need to place that in the left subtree If it is greater than the root node then we need to place that in the right subtree This is the BST root in search of any new node in the binary search tree works like that now if I want to find the smallest value or smallest node in the given binary search tree then I need to search that in the left subtree right and If left subtree of the root node or node is null then the value of the root node will be the smallest as compared to the nodes in the right subtree if I have a tree like this Now if I want to find the smallest node in this binary search tree I need to search that in the left subtree because we know the smallest values will be present in the left subtree Here this is the left subtree of node here also the smallest value will be present in the left side like this Okay, one is the smallest node in this binary search tree and it is present in the left side if I have a tree like this Then this is the root node as well as this is the smallest node in this binary search tree Because it doesn't contain any nodes in the left side. That means 30 is the smallest node in this binary search tree So if left subtree is null or none then the value of the root node will be the smallest value in the binary search tree All right, so let's take an example. So here we have a binary search tree Now if I want to find the smallest node in this binary search tree I need to search in the left subtree so this is the left subtree of the root node and In this left subtree also, I need to find the smallest value in the left side for this sub tree This is the root node and this is the left subtree and in that this is the left most value, right? So one is the smallest value in this binary search tree if you want to Find the smallest value in the binary search tree manually then you need to Chuck for the left to most value. This is the left most value, right? The value of the left to most the leaf node Next let me take another example. So in this example, this is the smallest node That's why it is present in the left side, right? Okay, so in this way you can find the smallest node or the value in the binary search tree Next let's talk about the greatest value or the largest value in the binary search tree If I want to find the largest value in the binary search tree or the largest node Then we need to find the value of the right most node of the right subtree In the right side will have the values which will be greater than the root node in the right subtree So in the right most side will have the node with largest value of the BST for example In this binary search tree, we can see this is the greatest or the largest value of this BST Right? This is the node with the largest value and it is the right most node of this BST and If the right subtree is empty then the value of the root node will be the largest value in the binary search tree That is right sub tree is completely empty then value of the root node will be the largest value If right subtree is empty that means we have nodes in the left subtree and root as We know in the left subtree we can have nodes with keys lesser than the root node That's why the value present in the root node will be the largest value at that time. So let's take an example In this binary search tree, this is the right most leaf node So this node contains the largest value in this BST 100 is the largest value here Here here also 100 this is the node which contains the largest value in this BST smallest will be the leftmost child of the left subtree largest node will be the rightmost child of the right subtree So in this way you can find the node with the smallest and largest value in the binary search tree Because binary search tree is ordered you can find them easily Next if I want to find the total number of nodes in the binary search tree Then how to do that? Total number of nodes in binary search tree equal to Number of nodes in the left subtree Left subtree plus number of nodes in right subtree plus 1 that is the root node number of nodes in the left subtree plus number of nodes in the right subtree plus 1 If we do this, we'll get total number of nodes in the binary search tree. That is Now here if I want to find the total number of node in this binary search tree Then first I need to find out the total number of nodes in the left subtree and total number of nodes in the right subtree. Then I need to add that and later I need to add one to that that is the count of root node. Then we'll get the total number of nodes of BST. All right so this is about the binary search tree. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.