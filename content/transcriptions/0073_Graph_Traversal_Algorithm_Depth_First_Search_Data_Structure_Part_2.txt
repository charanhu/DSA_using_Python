 Hello guys and welcome to Amuleus Academy YouTube channel. We were discussing Graph traversal operation and in the previous tutorial we saw how we can traverse a graph using DFS traversal algorithm. DFS or depth first search algorithm is a graph traversal algorithm which uses the idea of backtracking. In the DFS graph traversal algorithm we can start the traversal operation from any node of the graph. You can choose any node as the starting node. Then you need to visit that node. After visiting the starting node we need to visit the one of the unvisited adjacent node of that starting node. Next after visiting that node we need to visit the one of the unvisited adjacent node of that node. So we need to continue doing this. Here we can see we are visiting all the nodes present in one path. After reaching the dead end in that path we need to search for the another path that we haven't traversed through and we need to visit the nodes present in that path. After reaching dead end in that path also we need to do the same thing that is we need to search for the another path which we haven't traversed through and we need to visit all nodes present in that path. So we need to traverse a graph like this in DFS algorithm. And after reaching the dead end in one path, to search for the another path will use the idea of backtracking. And backtracking is a problem solving technique that considers searching every possible combination in order to solve a problem. And we are using this concept when we reach the dead end in one path. To search for the another path, we will use this concept. When we reach the dead end in one path, we need to move backward in the same path. And we need to search for the another new path. And we need to visit the nodes in that path. Okay, so this is about the concept of DFS algorithm. After visiting all the nodes of the graph, we need to stop. But how we will get to know that all the nodes of the graphs are visited. For that you can do this. So, I will start from A. Okay, next I need to visit the one of the unvisited adjacent nodes of A. So here B, D, C are the adjacent nodes of A. So I will visit B. Next I will visit E. Next I will visit G. Here I can see I reach the dead end. So here I need to use the backtrack concept. I need to take one step back. And here I need to search for the another new path. That is here you can see E is adjacent to F and it is unvisited. So I will visit this node. Now here you can see again we reach the dead end. Okay, so we need to move back. And we don't have any other node to visit here. We don't have any unvisited adjacent node of E. So take one step back. Here also we don't have any unvisited adjacent node of B. So take one step back. And here you can see C and D are unvisited which is adjacent node of A. So visit that. So here I will choose D. Okay, I will visit D. Next we can see D is adjacent to E but it is already visited. So don't visit that again. That means dead end. So backtrack come here. C is unvisited. So visit this node. We don't have any other node to visit. Right? So backtrack A. Here A is the starting node. We started this traversal operation from this node. Now here you can see we reached the A and we don't have any unvisited adjacent node of A. All the adjacent node of A is visited. That means here the traversal operation is completed. Alright, next. In this same graph if I start the traversal operation from D then what will happen? If I take D as the starting node then what will happen? Let's see that. So I will visit D. After that I need to visit the unvisited adjacent node of D. That is E. I will visit that. Next you can visit G or F. So I will visit G. We will read the dead end. So I will use the idea of backtracking. I will take one step back and I will search for the new path. Here we can see unvisited adjacent node of E. So I will visit that. Here we read the dead end. So I will take one step back. Here we can see we don't have any unvisited adjacent node of E. So I will take one step back. After that here you can see we reach the starting node and we don't have any other node to visit. Here we can see D is not adjacent to any other node. Now what to do? Here you can see traversal operation is not completed. We started from the D even though all the adjacent node of D is visited. But in the graph still we can see these nodes are unvisited. Because there is no path from D to A or D to B or D to C. That's why we can't reach ABC from D. That is because it is a weakly connected graph. As I said you can choose any node as the starting node in the graph. So when a weakly connected graph is given and if I choose a node like this to start the traversal operation then we can't reach all the nodes from this node. Then at that time what to do? This problem is not only in the directed graph. We will face this problem in the undirected graph also when the graph is disconnected. The graph is not connected and if I want to traverse the whole graph using DFS algorithm we can't visit all the nodes of the graph. So what to do in this situation? I will make a separate video on this so we will discuss this separately. For now don't worry about this. So this is about the DFS algorithm. Next you can use this DFS algorithm to find whether there is a path between given two nodes and also you can use this DFS algorithm to find the connectivity of the graph whether the graph is connected or not. And also you can search for a node whether node is present in the graph or not. Ok so this is about the DFS traversal algorithm. So that's it for now guys. Thanks for watching. Don't forget to subscribe to my channel. I will meet you next class till then take care. Thank you. Thank you.