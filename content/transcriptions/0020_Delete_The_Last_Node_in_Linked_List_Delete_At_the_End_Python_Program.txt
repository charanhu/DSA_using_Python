 Hello guys and welcome to Python programming tutorials by Amoleas Academy. We are discussing about how to implement Linked List in Python and in that we are discussing about removal operation or deletion operation and in the previous tutorial we saw how we can delete the node from the beginning of the Linked List. So today in this tutorial we'll see how to delete the node from the end of the Linked List. So we'll delete the last node of the Linked List. This is what we discussed in the previous tutorial. As I said previously, in the deletion operation the first step is we need to chuck the Linked List is empty or not. Before deleting the node from the Linked List we should know whether the Linked List is empty or not. If it is empty we can't delete any node from that right. So the first step is same we need to chuck whether Linked List is empty. If it is empty we just need to print a message. If it is not empty then here we need to remove the last node of the Linked List. Here the last node is this. So to remove or delete the last node of the Linked List we should travel to the previous node of the last node. That is here this node. We need to delete the last node so we need to move to the previous node of the last node or we can say second last node. Go to second last node here in the second last node you need to change the reference of the second last node to null or none. Change reference to none. If Linked List is not empty go to the second last node of the Linked List and change its reference to null. That means it will become the last node of the Linked List. In the Linked List every node contains the reference of the next node. If the node contains the reference to null that means that is the last node of that Linked List. Now here it contains null it doesn't contain the reference of any other node that means it is the end of the Linked List. It is the last node of the Linked List. Now here we can see this node is removed from the Linked List. Alright so let's write the program. To write the program first we need to chuck whether Linked List is empty or not. For that we need to chuck head is none or not. We'll check self.head is none. If it is none that means Linked List is empty we'll just print a message. In the python file here we have Linked List program. This is the class node and here we have Linked List class. In the Linked List class we have traversal operation. Add begin add end add after add before operation as well as in the previous tutorial we wrote the method to delete the node from the beginning of the Linked List. Here we can see all the video links are in the description box you can go and chuck that. Now today we need to write the method to delete the node from the end of the Linked List. So I'll take the method name as delete end. You can take any suitable name and here also we don't need any parameter. So I'll just take self. Now the first step is we need to chuck the Linked List is empty or not. To understand these programs you need to be familiar with the previous programs previous methods. So if you didn't watch that video so please go and watch that. If self.head is none that means the Linked List is empty so you can just print any message. So here I'll copy the same message like Linked List is empty so we can't delete nodes. Here you can take return or I'll take else part. So if Linked List is empty we'll just print message. If it is not empty then what we need to do here we can see. We need to go to the second last node while calculating my whether I can directly go to the second last node. I know this is the second last node but while writing the program how to identify the second last node. To identify the second last node here we can see last node means it contains the reference to none, if I want to identify the last node the node which contains the reference as none that is the last node of the Linked List and to identify the second last node the second last node is that node it's next node contains the reference to None. That means we need to find that node whose next node contains the reference to none. For example, just take this node as x. Then we need to check the reference of the next node. To do that, to get the reference of the next node, I can take like this x.reference.reference. Here when I take this as x, x.data is nothing but 30, x.reference is nothing but 3400. That is nothing but x.reference is the next node. 3400 is the reference of the next node. So if I take this as x, x.reference is nothing but this node, the next node. In that, if I take x.reference.data, that is 40, if I take x.reference.reference, then that is nothing but the reference of the next node, this node. To check the reference of the next node, I can take like this x.reference.reference. You need to remember this first. I'll explain you where we use this. Now coming back to the step here, when LinkedList is not empty, we need to go to the second last node. To go to the second last node, first we need to go to first node, next second node, next it's the next node, like that. We need to traverse to the each node of the LinkedList. So to do that, what I'll do is first, I'll take the first node as n, the reference of the first node as n. I'll take n is equal to self.head. The reference of the first node, I'll take that as n. That means now the first node is n.data is nothing but 10. n.reference is nothing but 50000. But I don't want this node, right? I want this node, the second last node. I can't directly go to this node like this. For that, I need to first go to the next node of this n. So to go to the next node, I'll reassign the n value. I'll take n is equal to n.reference. Now here, as I said, if it is n, then n.data is 10. n.reference is nothing but 50000. So now when I assign n equal to n.reference, that means 50000 will become n now. That is the reference of the next node. n node will become n. Now this is n. Now again, n.data is 20, n.reference is 2200. But we don't want this node also, right? We want to go to the second last node. To go to that, again, I'll increment the n value. I'll reassign the n value. I'll take n equal to n.reference. Now, n value become 2200. That is nothing but this node will become n now. This is our required node, right? So until we'll get the required node, we need to increment or reassign the n value. That means we need to go to the next node. Here, how we will get to know, we reached the second last node. We are in the second last node. For that, you need to take this condition. I need to take here a loop, while loop, and I need to check while n.reference.reference is none. Previously, I took this node as x. That's why I took x.reference.reference. But here in the program, I took n variable n. So this node will become n. And n.reference is nothing but 3400. But I want to check the reference of the next node. So n.reference.reference. So this, when it is none, I need to stop. I need to stop. I don't want to go to the next node now. I'll explain you again. So initially, I take the first node as n. And I'll increment the n to go to next node again and again until I'll get to the second last node. And the condition to identify the second last node is the reference of the next node of the second last node should be a none. That's why here, first I took n equal to self.head. And I'll take a loop while n.reference.reference is none. Every time it will check the reference of the next node. If it is none, then I need to stop. Otherwise I need to increment the n value. That is nothing but I need to go to the next node. So here, initially n equal to self.head, n becomes the first node. It will check what while n.reference.reference is none. Here n.reference is nothing but 50000 dot reference is nothing but 2200. Here, this is n.reference now. When this is n, this is n dot reference. So n.reference.reference is nothing but 2200. It is not none. Right? I need to check whether it is none or not. If it is none, that means we got the second last node. Now stop. If it is not none, I need to increment n or reassign n. So here, the condition is I'll check while n dot reference dot reference is not none. If it is not done, increment the n value or reassign the n value. So now n will become this node. When I take n equal to n dot reference, n becomes this node. The next node. This again will check while n dot reference dot reference is not none. Now here we can see this is n here and n dot reference is nothing but this node. Its reference is nothing but 3400. It is not none. Right? The next node of this n is not none. That means it is not the second last node. So I need to increment the n value. It is not none. This condition becomes true. So it will increment n value. Now n becomes n dot reference. Now this will become n. Now again, I'll check while n dot reference dot reference is not none. Here we can see this is n. So n dot reference is nothing but 3400. So that is nothing but this is the n dot reference node. In that reference is nothing but this and it is none. That means no need to go to the next node. Now we got the second last node. Now where n is pointing that is here, this is the second last node. So in this way, we can search for the second last node. So here to search for the second last node, first step is I need to take n is equal to self dot head. And next I need to take while loop and here I need to take n dot reference dot reference because we are checking the reference of the next node is not none. So here I need to check is not none because if it is not none, that means I need to go to the next node. That's why I need to increment the reference. If it is not none, increment the n value, go to the next value. If it is not, that means we got the n value after completing this while loop, we'll get the second last node until it is not none, increment the n value. When this condition becomes false, that means we got the second last node and n is pointing to that now. So now by using this, we can get the second last node and this is the second last node. Now I am n is pointing to that. Now I need to change the reference of n to none. Now, so I'll take n dot reference because now this node is called as n and n dot reference is this equal to none. I need to assign the n dot reference as none. So that the link will be break, this link will break and this node will be removed from the linked list. So here n dot reference is equal to none. So now we are done with the program. Here from the linked list, this last node is removed. Here in the head, it contains 1011. So this is the first node. It contains 5002. So this is the second node. It contains 2200. So this is the next node, 2200. And it contains none now. So that means it is the last node. This node is treated as it is removed from the linked list. So let's see. It works properly or not. So first I'll take the empty linker list and I'll use delete end method. So I need to get this message. Linker list is empty. So we can't delete node. Linker list is empty. We are getting linker list is empty because of this method. We are calling print del L that's fine. And in the from the delete end method, we'll get this message. Linker list is empty. We can't delete nodes. Now if I add few elements, for example, let's add 2030. So 30 will be first next 20 next 10. Show you the linker list. So I'll comment this. So we have three nodes like this 30 20 and 10. Now if I delete the node from the end of the linker list, we'll get 30 and 20 10 will be removed. So let's see that. Here we can see 30 and 20 10 is removed. So in this way, this delete end method works. But now if I execute this delete end method, when the linker list contains only one node like this, here we can see our linker list contains only one node that is 10. And now if I delete that, and if I execute this, here we'll get this error. Then type object has no attribute reference. That is because if linker list contains only one node, then the reference will point to none. And now if I take n equal to self dot head, the first node will becomes n. And if I check n dot reference dot reference, here n dot reference is none. And here we are calling none dot reference. And that is not the proper syntax to use. That's why we are getting the error. That's why here we need to include another condition when the linker list contains only one node. And we need to write that condition before this condition. So here you can use a leaf like this a leaf. And here you can take self dot head dot reference is none. If the linker list contains only one node, that is the first node of the linker list. So head will point to that. And if its reference is none, that means it is the only one node of that linker list. So you need to take the condition like this to check whether only one node is present in the linker list or not. And here, if only one node is present, then you need to take self dot head as none. When I delete this node, linker list becomes empty. That is nothing but head need to point to none. So you need to take like this. So now if I execute this code, here we can see we will get the message linker list is empty. Right? So you need to include this condition also here. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.