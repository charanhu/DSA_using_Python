 Hello guys and welcome to Python programming tutorials by Amalia's Academy. We are discussing about how to implement Linked List in Python and we are using class concepts for that and previously we created node class, Linked List class and in that we defined the traversal method, method to perform the traversal operation. Also we saw how to add the element at the beginning of the Linked List and how to add the element at the end of the Linked List. So today in this tutorial we will see how to add or insert the node between the nodes of the Linked List. We want to add the nodes in between the Linked List. We can insert the node in the middle of the Linked List in two ways that is we can insert a node after a node or before a node. I'll show you the example. Here we have a Linked List right it contains three nodes this is the first node and the head contains the reference of the first node. Now if I want to add a node between the Linked List. So here we can see new node we created the new node. Now if I want to add this node after this node this is the X node. So if I want to add this node after the X node then we'll get Linked List like this. The operation is different right we need to write the different code because here we can see if I want to add a node after an existing node for example here after this then X node need to contain the reference of the new node and new node should contain the reference of the next node of the X. Previously this node was the next node of this node. Now we need to insert this node between these two nodes. So if we want to insert an element or node after the node we need to write the separate code. If I want to insert an element before a node for example here we can say this is the X and this is the new node here the node which is in the red color. If I want to add or insert the element before a node then we need to write the separate code. So if you want to insert or add the node in between the Linked List then we need to check for two scenarios whether we are adding after a node or before a node. We need to take a particular node and we can add the new node after that particular node or before that particular node. We need to check for these two conditions. So today we'll write the code for this if I want to add the element after the given node and we'll discuss this in the next tutorial. Alright so let's write the program. We already have node class, Linked List class and in the Linked List we have traversal method, add begin method and add end method. Today we are adding the element after a node. So here we can see we have Linked List which contains three nodes. Today we are writing a method to insert after node. So I'll take method name as after node. You can take any method name. So table method name and we need to take the parameter. So the first parameter is self common and the second parameter is whenever we are performing the insertion operation data parameter is must. The new node should contain a data field. So we need to mention the data and we need to mention another parameter here that is x. X is nothing but the after which node you want to enter the new node. For example if I want to enter the new node after this node so then this node will be the x node. The data stored in this will be the x. After 20 add a new node. That's why we are taking this parameter. So next as I said we are inserting a node after a given node. So that's why the new node, whatever the new node we are entering that can be a second node of the Linked List or third node or in between nodes it can be any node or it can be last node. It can't be the first node of the Linked List right because we are adding the new node after a node. So it can't be the first node it can be second node third node fourth node or the last node. So that means no need to worry about any special situations. Adding the element at the second position third position fourth position or the last position is same here. The code is same for all the situations. If it is the first node then we need to worry about that situation but here new node can't be the first node because we are adding the element after a node. Now to insert a node after a given node. First step is we need to find out the position where we want to insert. Here if the given node is x here I took the parameter name as x right that is the given node after that node we need to insert the new node. So if I take this as the x then I need to insert the new node here after that node so the first step to insert the new node is you need to find out the x where it is present. So find x first it can be present in any position in the Linked List. So you need to check the entire Linked List to find the x. So to find x what I'll do is I'll take the first node as the n the head contains the reference of the first node right and I'll assign a new variable to that n. So the first node becomes n. Endor data is nothing but 10. Endor reference is 200. So now I'll check the data present in n that is endor data is equal to equal to x. Here x is nothing but we'll give the data field. If you want to insert a new node after this node then we'll take x as 20. Insert after 20. So I'll compare the data field of each node with the x. So here first I'll check n.data is equal to equal to x. So here 10 and if I take x as 20 it is not equal. So that means it is not the required node. So what I need to do if it is false I need to go to the next node right. I need to go to the next node and I need to compare whether that is the x node or not. To go to the next node I'll use n equal to n.reference. I'll re-assign the n value. I'll take n value as n.reference. Here n.reference is nothing but 200. That is the reference of the next node. So now n becomes this node the next node. Now again I'll do the same thing that is I'll check the data of n.end.data with the x value. I'll compare n.data and x here like this. And if it is true we found the x value right. So stop the execution we found x. If it is not then we need to increment the n value. We need to go to the next node. Here we can see n.data is 20 and as well as the x value. So it will match n.data is equal to x true. So that is nothing but we found the x value. So we need to stop the execution here. But if it is not x value then we need to move to the next node. For that we need to use this n equal to n.reference and we need to compare the data. That means I need to execute this statement. That is I need to compare the data of each node with the x as well as if the data is not matched to be the x I need to increment the n value. We need to do this continuously until we'll get the x value or after traversing the entire linked list. I need to execute this statement again and again for that we need to include this within the loop. So here I'll take the loop as while loop and here I'll take the condition as while n is not initially n value will be self.head that is nothing but n is this first node. So I'll check whether n is not none. It is not an empty linked list. So n is not none here. n is 1010. So it will execute this while loop body. It will check n.data is equal to equal to x. The data present in that node and x it will compare both. Here it is not equal. That means it is not the x node required node. So it will increment the n. That means we are going to the next node. Now n will be the this node. Now again I'll check when n.data is equal to equal to x. Yes here true right. I took this as the x value and n.data and x is equal here. That means we found the x. That time we need to stop the execution. So for that we'll use break statement here. What this break statement will do when we found the x node. It will stop the execution of the that loop. It will come out of that loop. We are using these codes to find the x position where it is present to find the x node. After finding the x node we need to come out of this loop. Here first we need to take the first node as n and we need to compare the data present in that with the x. If it is equal that means we found the x node. So we need to stop there itself. If it is not then we need to go to the next node and I need to compare the data present in that with the x. So I need to do this continuously until I'll get the x node or after comparing the every node of the linked list. Here we took while n is not done it will help us to execute the loop body again and again till the last node. And here n equal to n dot reference helps us to go to the next node. And if here we are using n dot data is equal to equal to x it will chuck the data of each node with the n. So first let's write this code. So here we have a program which we wrote in the previous tutorial class node. Class linker list in that we have traversal method add begin method add end method. Next today we are writing d if you can take add after any name the method name then self data and x. First step is I need to find out x where it is present. So for that first I'll take n is equal to self dot head whatever the reference stored in head I'll assign that to n. So that means the first node of the linked list is n now. So n dot data is nothing but the data of the first node end or reference is nothing but the reference stored in the first node. So now I need to traverse to the linked list because we need to find out the x node where it is present. So for that I'll use while loop while n is not none I'll use this condition if I want to traverse the entire linked list I need to use this while n is not none condition and here I'll check x is equal to equal to n dot data. So what I'm doing is first here we can see I took n equal to self dot head right and if n is not the empty linked list that means now the n is the first node. Then I'll check the data present in the first node that is n dot data and x. x is nothing but here the mentioned node after that we need to insert the new node we are searching for x now that's why I'm checking x is equal to equal to n dot data. If it is true that means we found our x so we need to stop I'll use break statement come out of the while loop no need to do anything just come out of the while loop we got the x node if it is not if the data present in the first node is not the x value then what we need to do we need to go to the next node if I want to go to the next node what I need to do I need to assign the n value I need to reassign the n value and dot reference I need to take n is equal to n dot reference every node contains the reference of the next node right that means n becomes the next node now. So now again it will perform this while n is not none and it will check whether that is the x value if it is not it will go to the next node and it will it will check until it will reach the last node it will check for the x value here we used break statement that's why no need to use else part if you are you can take else and n equal to n dot reference also because we are using break when this condition becomes true it will come out of the loop no need to write else case now what we did is we are searching for the x when we found x will just come out of the loop or we can come out of the loop for another reason also if n is none that means while condition become false it will come out of the loop right. So here the while loop can be terminated or we can come out of the while loop because of two condition one is when we found the x value that is if x is equal to n dot data if we found x then we will come out of the while loop or if n is none if n becomes none that is we served for the entire linker list but we didn't found the x then also we will come out of the loop right. So to write that's two condition if n is none if n is none it will come out of the loop. So if n is none just print a message that is item is not present in the list the node else that means the node is present if this condition is not true that means the node is present and we found that now n is pointing to x the given node here we can come out of this while loop because of two condition when n becomes none or when we found x is equal to n dot data when we found x value x node. So here first we took if n is none just print the message node is not present if n is not none that means we found the x so what we need to do after finding the x let's see that. So here the first step was we need to find the x so now we got the x value if it is present in the linker list then now n is pointing to the x using this we found the x value now what we need to do is we need to create a new node with data for example hundred and it will be pointing to none initially so to insert the node here we know where to insert now the position after x we found x now now what we need to do is we need to create the new node so here in the else part the first step is create the node to create the node i'm using node class and here we need to pass the data so it will create the node with the data as well as reference as none here we have node class right we are using this so we have node now next step is after creating this node now we need to change the reference of the new node this is the new node right now we need to change the reference it is initially pointing to none but we want to point this to here this node right now we need to insert that between these two node that means this node will become the next node of this new node so it should contain the reference of that so that's why we need it need to point here now let's check where the reference of this node is stored here right in the en we can see the reference now n dot reference is nothing but 3300 now what we need to do we need to store that reference here in the new node so what we need to take new node reference is equal to n dot reference right it need to contain the 3300 it need to point here the next node of the new node you should contain the link of the next node that is 3300 here where it is present now here this is n now so n dot reference is nothing but 3300 so now what i'll do is i'll take new node reference is equal to n dot reference we need to take the reference we need to change the reference of the new node and the next node reference is stored in the en now new node reference is equal to n dot reference next step now here we can see it is looking like this we created the new node and this new node is pointing to the next node now now what we need to do is we need to change the n dot reference right it need to point to the new node this is the n dot reference this is new node reference so now the n dot reference should point to the new node right so i'll take n dot reference is equal to new node n dot r e f equal to new node here whenever we will create a node it will have a reference right for example 50000 now this node the x or the n node should contain the reference of the new node because we need to insert that after that so here for that i'll take n dot reference is equal to new node the reference of the new node will be stored in n now now here we can see new node is added this is the first node this is the second node and this node contain the reference of new node so 5200 so this will be the third node it contains the reference of the next node that is 3300 so this will be the next node so now let's execute and see whether it works properly or not so here we have linked list we created an object from that we have add end method next i'll take now linked list contains the only one node that is 100 so i'll add add after so we have only one node after that i need to add here we can see first we need to mention the date of new node next where we want to add the element so i'll take data as 200 and after 100 i want to add that after 100 so let's execute this so we'll get first 100 node next after that's 200 so here we can see 100 and 200 200 is pointing to none here i'm calling add end add begin so it will be like this and here i'm adding after 100 so let's execute this here we can see 10 after 10 we are adding 100 so 100 200 20 next if i enter a node which is not present in the linked list for example here instead of 100 i'll write 500 i want to add this new data 200 new node 200 before 500 but 500 is not present in the linked list right if i execute this i'll get node is not present in the linked list and it will print the existing linked list 10 120 it won't insert that element and if the linked list is empty and if i try to enter the element like this it will just present node is not present in the linked list and linked list is empty will print from this we are printing we are traversing through the linked list we are calling this method right that's why it will print linked list is empty okay so this is about how we can add the element after an existing node so that's it for now guys thank you for watching don't forget to subscribe to my channel i will meet you in next class till then take care