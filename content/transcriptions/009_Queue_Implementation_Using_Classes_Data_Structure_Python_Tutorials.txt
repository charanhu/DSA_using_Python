 Hello guys and welcome to Python programming tutorials by Amulya's Academy. I am back with the data structure tutorial and previously in this series we were discussing about Q and how to implement Q using list. Next we will see how to implement Q using different classes of different model. So in that first we will talk about the double ended Q class from the collections model. This deck or DQ or double ended Q is a class which contains many methods and in this you can enter the values from both ends. That is it provides the methods which allows us to enter the data from both ends. Here you can enter the data as well as you can remove the data from this side also you can enter the data and you can remove the data. This is the left side and this is the right side and if you want to enter the data from this side then you need to use the append method here and if you want to remove the element from this side you need to use the method name pop. When we implement this stack using this class we use these two methods right. Now if you want to enter the element from this side then you can use append left method because this is the left side. You are appending from the left side and now if you want to remove the element from this side you need to use pop left. Now we want to implement Q. Q works on the FIFO technology right first in first out. The insertion and removing the element is done in the different ends. So to implement the Q you can use append left to insert the value and you can use pop to remove the value or you can use append method to insert the value and you can use pop left to remove the value. So let's see the example for this. First I'll use append left and pop. Okay so first we need to import the collection model because this class belongs to collections model done. First I'll create an empty queue. I'll take the queue name as Q and here collections dot double ended queue or deck or DQ you can call whatever you want and now it will create an empty queue. Next I want to add the element right. As I said we'll use the append left method so Q and I'll use append left and I'll add the element 10. Next I'll again use this and I'll add 20. Now again I'll use this and I'll add 30. Now here I can chuck this 30-20-10. So elements are inserted from this end. Now if I want to remove this I can use the pop method so you can use Q dot pop. It will remove 10 first because 10 is entered first so 10 is removed first. That's how Q works right. Next 20, next 30. If I use again it will give the you are popping from an empty queue. This is the one way to implement the queue using double ended queue class or you can use append method to insert the element and you can use the pop left method to remove the element from the another side. So here I'll show you the example for that. Here I'll append right. So here you can see Q now. So now if I want to remove this you need to use pop left. 10 is removed first because 10 is entered first. That is removed next. 20 is removed next. It is a empty queue. Next if you want to chuck whether Q is empty or not you can use like this not Q. You can chuck like this. It will give true or you can chuck the length of Q is equal to equal to zero condition also. In the double ended queue classes we can see the methods similar to the list methods. Next if you want to see the element present in the rare side or friends side then you can use the indexing method. You can use the index and you can access that element without removing that you can see which element is present in the front side and rare side. So for that first let me add few element to the queue because now Q is empty. Next here if I write Q of minus one it will give you five. The last element entered to the queue and if you want to chuck the next element which you are removing from the queue without removing that then you can use this. Or if you use another method that is to insert the element if you use append left then you can see the different values. Alright so in this way you can implement the queue using the double ended queue class. Next we will talk about the another class called as queue class from the queue module. Module name is queue and the class name is queue. If you remember while implementing this stack we used the LIFO queue from the queue module. So here we are using the next class present in that queue module that is queue class to implement queues. Before starting with the queue let me tell you few things about this queue module and queue class. So this queue module contains different classes like queue, LIFO queue, priority queue like that and here you can create the queue like this queue and queue and here you can mention the maximum size. If maximum size is equal to zero or less than that then it will be an infinite queue otherwise you can give a maximum size to the queue. You can assign a maximum size to the queue and this queue class contains many methods. You can use the queue size method to get the size of the queue. You can check whether queue is empty or not using queue.empty or you can check queue is full or not when you use the maximum size then you can check whether queue is full or not using queue.full method or you can put the element to the queue using queue.put. So for put the syntax is like this you need to put the item and here there will be block the default value is true and there will be a timeout. So what it will do is it will put the item to the queue. If block is true and timeout is none it will block until the free slot is available. Once the queue is full it will block the item until the free slot is available. It won't give the queue full message instead of that it will wait until the free slot is available. If you don't want that then you can make block as false or you can set a timeout. You can set one minute or anything. So after waiting for one minute it will print the message. When you take maximum size of queue is 3 when you enter the fourth element instead of printing the queue is full message it will block until you will get a free slot. If you don't want that you can set block as false or you can fix a timeout or you can use another method that is called put no wait. In this this syntax is like this item. It is similar to this when block is false. So it won't wait for the free slot when the queue is full it will just print the message queue is full. You will get this condition queue is full only when you will set the maximum size of the queue to a number greater than 0. Otherwise it will be an infinite queue right. To enter the element either you can use put method or put no wait method. To get the element you can use get method or get no wait method. In the get method also what it will do is here block is true timeout is none. It will get the element from the queue. It will remove the element from the queue. Once queue is empty what it will do is it won't print the queue empty message instead of that it will block until the item is available. To avoid that you can set block is false or you can set a timeout like one minute or something after one minute it will just print a message or you can use get no wait and there are different methods in this class if you see the documentation you will understand this. So for now to implement the queue what I am doing is I am using the queue class from the queue module to add the element I am using the put method and to get the element I am using the get method. So let's see the example. So be careful about the module name and class name okay and here we can see queue. So I am using this I won't take the maximum size so it will be 0 that means it is an infinite queue. Next I will use this queue.put or you can use put no wait so I will add 10 right. So it will be an object so it won't show you the output. Next if I want to get this 10 will be removed first 50 will be removed first next 30 will be removed. So now if I again press this it will wait until the element is available because now block is true because I use the get method right. So in this way you can implement the queue okay. So that's it for now guys thank you for watching don't forget to subscribe to my channel. I will meet you next class till then take care.