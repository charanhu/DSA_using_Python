 Hello guys and welcome to Amolea's Academy YouTube channel. In the previous tutorial we saw how we can store graphs in computer memory. We discussed adjacency matrix representation and adjacency list representation. And today in this tutorial we will see which channel operation we can perform on graphs. So today's topic is graph operation. Here we will discuss 3 basic graph operation that is insertion, deletion and traversal. So we will start from the first operation that is insertion operation. This operation adds or insert a new node or an edge to the graph. Graph is a non-linear data structure consisting of nodes and edges, right? Nodes and edges are the two components of graph. So in the insertion operation we can add a node to the graph or we can add an edge to the graph. So first let's see how to add a new node to the graph. So first we will discuss add node or add vertex operation. This operation adds a new node to the graph. For example here we have a graph so let's take apcte. Now if I want to add a new node to this graph then I can add it like this. Now f is added to this graph. Now this graph is not a connected graph because node f is not connected to any other node but this is a graph. This is a disconnected graph but it is a graph. After inserting a new node to the graph the number of nodes present in the graph will be incremented by one and the count of the edges will remain same because while adding the new node we are not adding any new edge. That's why the count of edge will be remain same but the number of nodes present in the graph will be incremented by one. Because of that if we use adjacency matrix representation that is if I use adjacency matrix to store the graph in computer memory then after adding the new node the count of the row and the column of adjacency matrix need to be incremented by one. Because here we can see when we add a new node the number of nodes present in the graph will be incremented by one and in the adjacency matrix number of row and column is nothing but the number of nodes present in the graph. So when a new node is added in the adjacency matrix we need to add a new row and column. So here we have a graph this is undirected and unweighted graph and this is its adjacency matrix representation and this is its adjacency list representation. Now if I add a new node to this graph for example like this f. Now the new node is added here operation is add node and here I took f. So a new node will be added to this graph and after adding this in the adjacency matrix representation we need to add a new node. This is the list which contains all the vertices of the graph. So here f and another node will be added to this list and here we need to add another row and also another column. This is for phi that is f and here you need to store the values 0 because this new node is not connected to any other node right that is why its degree is 0. So that is why we need to store zeros here. There is no edge from that node to any other node. Okay when we add a new node in the adjacency matrix representation we need to add a new row and new column. What about the adjacency list representation? This is simple. Here you need to add a new key because this is the dictionary right? Value will be empty list. Okay so this is about the undirected graph. What will happen when we add a new node to the undirected graph? Let's see what happens when we add a new node to the directed graph. Here we have a directed graph and this is its adjacency matrix representation and this is its adjacency list representation. Now we will perform add node operation and I take the data as x. So here a new node will be added like this and the degree of this new node will be 0. There will be no edge present between this node and any other node because this is the newly added node. We just added a node and in the adjacency matrix representation here x7 a new row and column is added for the new node. This is 7 that is for x and value is 0 because there is no edge from the new node to any other node and any other node to new node. In the adjacency list representation we need to add new key and value will be empty list. For adjacency list representation we will use dictionaries right? In the dictionaries when a new node is added here we need to add a new key and its value will be empty list because it doesn't have any adjacent nodes that's why it is empty. So this is about the directed graph. Next let's see an example of weighted graph. Here we have a weighted and undirected graph. So this is its adjacency matrix representation. This is its adjacency list representation. Now if I want to add a new node perform add node operation. So it will add a new node like this. No need to mention any cost because in the weighted graph cost or weight is associated with the edge. It's connected with the edge not with the node. That's why no need to write any cost here while inserting the new node. And in the adjacency matrix representation a new node added this is fifth and value stored will be 0 because degree of this new node is 0. What about the adjacency list just create a new key and this is empty. This is what happens when we add a new node to the graph in the directed undirected and weighted graph. Okay so this is about the add node or add vertex operation. Next let's see how to add an edge to the graph. So the next operation is add edge. So what this operation will do. This operation will add new edge between the mentioned vertices or given vertices in the graph. So when we perform this add edge operation we need to mention two vertices between which we are adding the new edge. So we are adding the new edge between v1 and v2. So I'll show you the example and I'll tell you what happens when we add new edge in the directed undirected and weighted graph. So let's start from the undirected and unweighted graph. Here when I perform add edge let me take two nodes okay. Here I want to add new edge between E and F. So I'll mention E and F. So when we perform add edge operation first you need to check whether the mentioned nodes or the given nodes are present in the graph or not. Here you can see E and F and both are present in the graph. So here add an edge between E and F like this. So this is the manual representation. Let's see what changes we need to do in the adjacency matrix representation. When I add a new edge between two vertices in the graph what changes I need to do in the adjacency matrix. What you need to do is here you can see we are adding an edge from E to F because this is an undirected graph. There will be an edge from E to F and F to E. If this matrix is called as graph then first I need to change graph E to F. I need to make this as one then I need to change graph F to E. I need to change it to one. Here index of E is four. So here instead of E index is four and index of F is five. So four five. First I need to change graph of four and five. I need to store the value one in this place. It is fourth row and fifth column I need to store one. Then in the fifth row and fourth column graph of F and E. We have an edge from F to E also right. So F is five and E is four here. Here also you need to store one. So when we add a new edge in the undirected graph you will store between the vertices V1 and V2. Graph of V1 row and V2 column as one. And graph of V2 row and V1 column as one. That's what we did here. Here E is at four and F is five. So that's why graph of fourth row fifth column as one. That is nothing but we have an edge from E to F. Then five to four here. There is an edge from here. When we add an edge from here to here. First E to F I need to make it as one. And here there is an edge from F to E. So I need to make this as one. Then coming to the adjacency list representation. In the adjacency list representation this is undirected graph. Here this is a graph dictionary. In the adjacency list of E that is here we need to add F. Now F is also adjacent to this. So here you need to add F. In the adjacency list of F you need to add E. Because now E is adjacent to F. You need to change graph of E and graph of F. If this is a graph dictionary dictionary name is graph. You need to change the adjacency list of E and F. Both. Because this is an undirected graph. Next let's see in the directed graph. Okay so now if we add an edge, add edge E to X. Add an edge from E to X. This is a directed graph. If we are adding the edge now E to X. Okay E is the starting point. X is the ending point. So edge will be added like this. This is the starting node. This is the ending node. That's why we'll get the edge like this. So in the adjacency matrix you need to change graph. If this matrix name is graph. Here we can see now there is an edge from E to X. There is no edge from X to E. So you need to change here graph of E X. So here E is 4. X is 7. So in the fourth row and in the seventh column you need to add 1. There is an edge from E to X. That's why we'll rewrite this value as 1. We'll store here 1. But there is no edge from X to E. That's why I'm not changing this. So now coming to the adjacency list representation when I add a new node from E to X. You need to change the adjacency list of E. Now there is an adjacent node to E. So here add X. No need to change the adjacency list of X because here there is no edge from X to E. We need to change the adjacency list of starting node. So this is about the directed graph. Okay, next let's see weighted graph. So now here in the weighted graph when I perform add edge operation. Here first you need to mention two nodes, two vertices, E to F. And I need to mention the cost also. So now add an edge from E to F and the cost is 8. So in the adjacency matrix representation because this is an undirected graph, first we have an edge from E to F. And here we need to store the cost that is 8. Next we have an edge from F to E. So F to E and here also cost is 8. You need to do these two changes here because this is the undirected and weighted graph. And in the adjacency list representation you need to change the list of both E and F. So in the E you need to add F with the cost 8. And in the F you need to add E with the cost 8. So this is about the insertion operation. In the insertion operation we can add a new node to the graph or we can add a new edge between two vertices. So here we saw how we can insert a new node or new edge in the undirected, directed and weighted graph. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.