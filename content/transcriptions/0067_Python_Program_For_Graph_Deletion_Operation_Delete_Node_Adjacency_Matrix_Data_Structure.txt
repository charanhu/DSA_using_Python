 Hello guys and welcome to Amuleus Academy YouTube channel. We were discussing graph deletion operation and in the previous tutorial we saw how to delete the given node or an edge between the given vertices in the graph. Next let's write some code. Today we'll write the function for deletion operation. So we can write a function to delete the node in the graph using adjacency matrix representation as well as using adjacency list representation and also we can write a function to delete an edge between the given vertices in the graph using adjacency matrix representation and adjacency list representation. So first let's talk about the adjacency matrix representation. Let's write the function using adjacency matrix representation. In this tutorial I'll write a function for delete node or delete vertex operation using adjacency matrix representation. Alright to write the function let's open up the python file. Okay here we have the program which we discussed in the previous tutorial. Here we wrote add node and add edge function using adjacency matrix representation. Today we'll write a function for delete node operation. I'll take function name as delete node. You can take any suitable name. Here parameter is V. I need to mention which node I want to delete right that's why we need this parameter. So here in the delete node operation the first step is I need to chuck whether the given node is present in the graph or not. Here V is the given node so I need to chuck whether that node is present in the graph or not. Here we are writing this program using adjacency matrix representation and in this program we took two list. One is nodes list another one is graph list. In this nodes list we'll store all the nodes of the graph and in this graph we are storing the adjacency matrix. So here if I want to chuck whether a node is present in the graph or not. Here in this program you need to chuck whether V is present in the nodes list or not. Here nodes list is the list which contains all the nodes or the vertex of the graph. So here first step is you need to chuck if V not in nodes. So here I'll use not in membership operator. Here this condition becomes true only when V is not present in nodes. Here we used not in membership operator right. That's why if the given vertex or node is not present in the nodes this condition becomes true. At that time I'll just print a message here. V is not present in the graph. If the given vertex is not present in the graph then how to delete that right. We can't delete that okay. I'll just print this message and I'll end this function. If this condition is false if V is present in nodes that means the given node is present in the graph. So what I need to do I need to use else condition here. If the control comes to here that means the given node is present in the nodes that means it is present in the graph. Here I'll take an undirected unweighted graph. Now here if I want to delete first step is I need to chuck whether C is present in the graph. So for that we'll chuck whether C is present in the nodes or not. So this is the nodes list and this matrix is called as graph in our program. So first I'll chuck whether C is present in the nodes. Yes it is present here you can see. So that condition becomes false in the program. So the control goes to the else part. Next now what we need to do. First step is I need to delete row and column from the adjacency matrix right. So here C is present at second index that's why we need to delete this row. Second row and second column in the graph. We need to delete the second row and second column from the adjacency matrix. To delete this row and column first we need index of C. For matrix we used nested list. In the nested list index can be 0, 1, 2, 3, 4 like that. Here the vertex is C. So first I need to get the index of C in which position it is present. That's why first step is here. You need to get the index of the node which I want to delete. Here I take a variable and here I'll use nodes. I'll use index method. Here nodes list contains all the nodes or vertex of the graph. From that we need index of the node which I want to delete. That's why we are using this. Now we know in which index the node which I want to delete is present. Next after that after getting that here I want to delete this node from this node list also. Right here we are deleting this from the graph. That means now C is no more present in the graph. That's why we need to delete that from the nodes list also. And also we need to decrease the node count by one because one node is deleted. That's why node count will be decremented by one. So here next step is I'll decrement that by one. And from the nodes I'll remove. Here remove is the list method V that is the given node. This is deleted from the nodes list and also I decremented the node count. Now node count is four. Now coming to this adjacency matrix here we need to delete the second row and second column. Right in the index one variable we store the index of the node which I want to delete. That is two here in this example. So I need to delete the second row and second column. So for that first I'll delete the second row. To delete this second row I'll just write graph that is the list name dot. Here I'll use pop method index one. Just pop index one. Okay you can represent this in the nested list like this right. So we are deleting this. Pop will remove that row. And now this row is deleted. Now we need to remove this column. Now here you need to chuck every row and you need to remove the second column. You need to go to row zero delete this. You need to go to row one delete this. After deleting this this will become the next row. So delete this next row delete this. So we need to go to every row and we need to delete the second column. That's why I'm using a loop here. I in graph. So here I will represent the inner list and in I I need to pop index one. Now here we need to delete the second column. So to delete the second column first we need to go to every row. That's why I used for I in graph. Initially I will be first inner list. In that I'll delete the second column. Then again I'll go here and I will be next row and I will delete the second column. Like this we'll delete the second column of every row. Okay so now we are done. All right so this method will work for undirected unweighted graph, undirected weighted graph, directed graph. It will work for every type of graph. So here in this program you can see there is an weight while adding an edge. That means this is an weighted graph. So this program is working for weighted graph and if you see add edge here this is for weighted undirected graph. So let's see whether this method now works for weighted undirected graph. So here we have graph after this. So now we have node A node B and there is an edge from A to B. And its cost is 10. Now if I delete node A. Okay so here we have an unbound local error. I hope you know why we got unbound local error. Here node count is a global variable and we are doing changes to the global variable inside the function. That's why we are getting that error. To solve that issue you need to take global keyword and node count. Now if I execute this program it will work fine. Here you can see. Okay graph after deleting we have only one node and we don't have any connection. That's why. Okay so let me add one more node here like this. Let that see and here I'll delete C. Here you can see the graph also. And now here if I delete a node which is not present in the graph. If I execute this here you can see D is not present in the graph. This will print this message. So this is about the delete node function. First you need to check whether given node is present in the graph. If it is not present just print a message and come out of the function. If it is not then first find the index of the node which I want to delete. Then decrement the count node count and remove the node from the nodes list. Then remove the row of the given node from the adjacency matrix. Then delete the column. Okay so this is about delete node function using adjacency matrix representation. So that's it for now guys thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care and be safe.