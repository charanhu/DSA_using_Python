 Hello guys and welcome to Python programming tutorials by Amoleus Academy. We were discussing about how to implement Linked List in Python and we are creating the Linked List using class concepts. And previously we created the class node Linked List and we also wrote the code for traversal operation as well as to add the element at the beginning of the Linked List. We are discussing about three single Linked List operations, adding elements, removing elements and traversal operation. We already wrote the code for increases traversal operation. And in the previous tutorial we were discussing about and how to add the element to the Linked List. While performing the Insertion operation we can add the element in therosation of the Linked List, that is at the beginning of the Linked List, at end of the Linked List or between the nodes. So in the previous tutorial we wrote the code for this at the beginning of the Linked List. How to add the element at the beginning of the Linked List. Today we'll write the code for this. to add the element at the end of the linker list. All right, this is the code which we discussed in the previous tutorial, how to add the element at the beginning of the linker list. So we have no class now, linker list class traversal method and add begin method. Next we want to add the element at the end of the linker list. So I'll take the method name as add end and I'll take the parameter as data. So if I want to add or insert any element to the linker list, then we need to pass the data also because every node contains data field and link, right? So while creating the node, we need to take data. So I'll take the parameter as data and in the insert operation, the first step is we need to create the node to insert any element to the linker list to insert any node. First, we need to create that, right? So the first step of the insertion operation is we need to create the node. So to create the node, I'm using node class here and we are passing the data. So here we can see, we already defined this node class and using that node class, we'll create a new node. For example, if I take data as 200, then this node class will create a new node with element as 200 data as 200 and the link as null or none. When we use node class to create the node, it will take the data field and link or reference as null or none. So here we are taking the new node name as new node. So here I'll give node name as new node. When we create a node, it will have a reference. So I'll take this as the reference. So the first step is we need to create the node to create the node we are using the node class. Here we want to insert the element at the end of the linker list, right? So before inserting the element, first we need to check whether linker list is empty or not. If it is empty, that means whatever the node we are adding, that is the first node of the linker list, right? So we need to write the separate code for that. If linker list is not empty, then we need to perform some other operation that we'll discuss later. First we'll concentrate on this. If linker list is empty, that means we are adding the first node and we need to store the reference of this first node in the head. While writing the code after creating a new node, I need to check whether linker list is empty. How to check linker list is empty? If head is none, that means the linker list is empty, right? Head is the starting point of the linker list. It contains the reference of the first node. If head contains none, empty value, that means we don't have any other nodes. It is the empty linker list. Okay, that's why we need to check if head is none, that means the linker list is empty. At that time, here I think that linker list is empty. So we are creating a new node using the node class. So here we can see we created the new node. Now this is the first node of this linker list. So we need to store the reference of this in the head, right? So when head is none, when linker list is empty, what we need to do is we need to take head is nothing but new node. If linker list is empty, store the reference of the newly created node in the head. Okay, so this is the first step. If linker list is not empty, we need to perform the some other operation. Before discussing that, we'll write this code. All right. So here first, we have class node. And this is the class linker list. And in this, we have traversal operation. The method name is print LL. Here we can say add begin method also next. We want to add. So I'll take D F at the ends. So I'll take method name as add end. Here also you need to take self and data, because while inserting a node, you need to pass the data. So the first step is we need to create the node. When you are performing the insertion operation, first step same, you need to create the node. Here I'll take the new node name as new node. And I'll use node class to create the new node. So here we can see I'm creating an object from the node class. Here we define the node class. Whenever we'll create a instance from the node class, it will create a node with the mentioned data. For example, here we can see we passed some data, right? And it will take reference as none. So it will create a node like this. So now we have node. After this, the second step is we need to check the linker list is empty or not. We have a node now the newly created node. Before adding that to linker list, first we need to check whether the linker list is empty or not. If it is empty, that means the newly created node is the first node of the linker list. So we need to store the reference of the newly created node in the head, right? So that's why I'll check if self dot head is none. If you want to check whether the linker list is empty or not, you need to check self dot head. If it is none or not, if it is none, self dot head is none. That means take self dot head as new node. So the reference of the newly created node in the head else. If linker list is not empty, then we need to perform the operation here in the else part. So let's see what we need to do. If the linker list is not empty, if linker list is not empty, then we need to go to the last node, because we want to add the newly created node at the end of the linker list. So we need to go to the last node. This is the last node. Now the question is how to go to the last node. So for that, what I'll do is I'll take a variable called n. Firstly, I'll assign the reference of the head, whatever the reference stored in head to n. I'll take n is equal to self dot head. So that is nothing but 1010 is n. This element is n now initially. So if I want n dot data, that is 10, n dot reference is nothing but 1350. But here we don't want this node, right? We want this node, the last node. So I need to move to the next node. So to go to the next node, I'll re-assign the n value. Here, first I took n as self head. Next, I'll take n as n equal to n reference. Initially n was this and the n dot reference is nothing but this value. Now I want to go to the next node. That's why I took n equal to n dot reference. Now n value becomes this. Now this node becomes n. Now n dot data is nothing but 20 and n dot reference is nothing but 1730. But we don't want this node also, right? We want the next node. That's why I'll again execute this n is equal to n dot reference. Now n value becomes this. Now here n dot data is 30 and dot reference is null. Now here we can see we moved to the correct position, right? If I want to go to the last node, then then I'll take the first reference as n, whatever the reference stored in head as n. To go to the next node, I'll re-assign the n value. I'll take n as n dot reference. I'll continuously re-assign the n value until I'll get n reference as none. When the n is this node, here we can see n reference is none, right? At that time I need to stop. Now we are in the correct position. We are in the last node. So first I need to assign n is equal to self dot head. If I want to go to next node, I need to use a loop. Here I'll use the while loop because we know the stopping condition when n reference is none, right? When this is n value, n reference is none. Here we need to stop, right? If n reference is not none, then we need to re-assign the n value. We need to change the n value. So here in the else part, first I'll take n is equal to self dot head. Next I'll take while condition while n reference is not none. This is the stopping condition, okay? If n reference is not none, if n is pointing to the last node, then n reference will become none. If n is not pointing to the last node, then n reference contains the reference of the next node, right? At that time it is not empty. If n reference is not none, you need to increment the n to n reference. So now we are in the last node. Now what we need to do? We need to change the reference now, n dot reference, okay? Here instead of pointing, it is pointing null now. Instead of that, we need to point this to newly created node. So we need to take n dot reference is equal to new node. So now this is the n value, right? So we need to change the n dot reference, n dot reference to new node. That's it. So it won't point to the null now. It will point to the next node. So this will become the last node now. So here we are using this while root to move to the last node. After going to the last node, come out of the loop and here take n dot ref is equal to newly created node. First I will take n as the self dot head. That is the first reference, the link of the first reference. So the first node becomes the n value. Next I need to go to the last node. So I'll use the while loop. So after completing this node will be in the last node. Next what I need to do, I need to change the reference of the last node to newly created node. All right. So we are done with the program. Here we can see. Now let's see how this works. Here we already have add begin. Next I'll add LL1 add end. So I'll add 100. So let's execute this. So here we can see first time calling add begin. So 10 will be added at the beginning. Next time calling add and 100. Next time calling add begin. So 20 will be added first. So 20, 10, 100. That will be the order of the node. Here we can see. Now if you want to represent that using the arrow mark and all, then you can go to this print LL and here after the end of data, here you can take an arrow mark like this. And here you can take n is equal to space. So n is equal to space is nothing, but it will keep the control in the same line. After printing the 20, it will keep the control in the same line for the next node. 10, 100 will be printed in the same line. So let's execute this again. Here we can see 20, 10, 100. It is pointing to the none. It is the last node. Now here by copy this, I'll add another node at last. So I'll add 500. Here we can see 500 at the last. And if I remove all the nodes here, now linked list is empty. So if I execute this here, we can see linked list is empty. Here we can see. Now if I add element at the end, LL1 dot add end, I'll add 100. So when we are adding the element at the end, but here link list is empty. So that will become the first node of the linked list. So if I execute this, here you can see, right? So in this way, you can add the element at the end of the linked list. While adding the element to the end of the linked list, you need to create the node and you need to check whether the linked list is empty or not. And if it is not empty, you need to move to the last node and you need to change the reference of the last node to new node. All right. So in the next tutorial, we'll see how to add the element between the nodes. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you next class till then take care.