 Hello guys and welcome to Amolea's Academy YouTube channel. We were discussing graph deletion operation and in the previous tutorial we wrote a function for delete node operation using adjacency list representation. Today let's write a function to perform delete edge operation using adjacency list representation. So first let's see how to delete an edge from the undirected unweighted graph. Now if I want to delete this edge in this graph then I need to mention delete edge cd. That is while calling delete edge function or delete edge operation we need to mention two vertices v1 and v2. Right? Here v1 is c, v2 is d. Now here I want to delete this edge so this operation will delete this edge. After deleting the edge this graph will look like this. And next let's see what changes we need to do in the dictionary after deleting an edge from the graph. So here we deleted an edge between c and d. That's why first we need to do changes in the value of key c. First we need to get the value of c and here we need to delete d. Because now c is not adjacent to d. This edge is deleted. That's why we need to delete d from this list. So we need to perform graph of c, remove d. We are using graph of c to access this value, this list and in that we need to remove d. That's why we are using this. So here c is nothing but v1, d is nothing but v2. We need to perform this operation. And also now there is no edge from d to c. So d is not adjacent to c. That's why we need to do changes here also in the value of key d. Here we need to remove c because now d is not adjacent to c. So we need to perform graph of v2.remove v1. That is graph of d.remove c from the value of key d.remove c. So this is in the unweighted undirected graph. So let's write the function for this. So here we have our program. So here in this program we are using a dictionary graph. In this program we are implementing graph using adjacency list representation. So here we are taking a graph that is an empty dictionary. Later we'll add node and add edge using these two functions, add node function and add edge function. In the previous tutorial we wrote delete node function. Today let's write delete edge function. Def delete edge. I'll take the function name as delete edge. And here I need to mention v1 and v2. We need to mention two vertices. While adding an edge or deleting an edge we need to mention v1 and v2. And here the first step is we need to check whether v1 and v2. That is the given two vertices are present in the graph. Whether it is present in the graph or not. So for that I'll use if v1 not in graph. You are familiar with these two conditions, right? Because we already discussed about this condition many times. Before deleting the edge first we need to check whether v1, v2, the given two vertices are present or not. If it is not present then we can't delete any edge from that, right? If v1 and v2 are not present that means that two vertices are not present in the graph. If vertices are not present then how to delete the edge between them, right? That's why first we need to check this condition. We already discussed about this condition many times while adding edge as well as while deleting the edge using adjacency matrix representation. So I won't explain you about this again, right? If the control comes here in the L-spart that means both v1 and v2 are present in the graph. Now what we need to do? We need to delete the edge between the v1 and v2. For that first I need to get the value of key v1, graphofv1.remum, v2. Here graphofv1 is used to access the value of key. In the dictionary if I want to access any value then we need to mention its key. Here graphis dictionary v1 is the key. We are accessing the value of v1. In that list we are removing v2 and also we need to perform graphofv2.remum, v1. I already explained you why we are writing this condition, right? Now we are done. But there is a graph like this and if I perform delete edge between b and c. B and c both nodes are present in the graph that's why control will come here and it will perform graph v1 remove v2. And there is no edge between b and c. So that means c is not present in the value of b. So if I try to do this now we will get error. Because c is not present in b and b is not present in c. Because both are not adjacent to each other nodes are present in the graph but there is no edge between them. At that time this function fails. That's why what we need to do is before performing this operation we need to chuck. If we want to remove v2 from graphofv1, right? So I need to chuck whether it is present in graphof v1. If v2 in graphv1. If it is present then only perform this operation. Now here you can see in this condition first it will chuck if v2 in graphv1. Here v2 is c. Whether c is present in the value of b. No it is not present. So this condition fails. So it won't execute this code. Now I didn't write the separate condition for this case. That is I didn't chuck whether v1 is present in graphof v2. That is because this is an undirected graph. If v2 is present in the graphof v1 that means v1 will be present in the graphof v2. This is an undirected graph. That's why. That's why no need to write the separate condition for this. Okay now we are done. We wrote this function for undirected undirected graph. Now to execute this program first we need to do some changes in this functions. We want this function to work for undirected undirected graph. So we need to do changes in the add-add function and here we need to add v2 as well as v1. It is for undirected undirected graph. No need to do any changes for delete node because we are not using delete node function here. We are not calling this delete node function. That's why I'm not doing changes to this. Now we are done. So let me take few values. Okay so here you can see here we are representing this graph. Okay. Now let's delete an add between c and d. So here delete edge called delete edge and here pass c and d. Let's execute this. So here we have this before deleting the edge cd. Next here you can see this is after deleting the edge. Here we are doing changes to c. Here d is deleted from the d, c is deleted. So this is working for undirected undirected graph. Now we need to change this for directed graph. In the directed graph when I delete an edge for example we are deleting this edge from f to c. At that time what we need to do? We need to access the value of f and here we need to go here and we need to remove c from this. That's it. So here if I write f and c this is v1 and this is v2. So we need to access the value of v1 that is f and I need to remove c from that. That is v2. So here no need to do this second step because this is a directed graph. And also here in the add edge make this for the directed graph. So remove this. Now we are done. So next here I will take few different values here. Here mention f, c and execute. Here edge is removed from f to c. That's why here you can see changes here. Now this is working for unweighted directed graph. Now what about weighted graph? If I want to delete an edge in the weighted graph then how to write this function. Here you can see in the weighted graph values are nested list. It is not a simplest it is a nested list in which we have the node as well as the cost. Now if I want to delete an edge for example c to D. Now this what do we need to do? First we need to go to c and I need to delete this because now c is not adjacent to D. So I need to delete this entire list. Next I need to go to D because this is an undirected weighted graph. Here go to D and remove this. Got it right. So for this first what you need to do is while calling delete edge you need to mention the cost also here. Done. Next here before deleting this I need to take a variable and here I need to take v1 and cost and because we are writing it for the weighted undirected graph take another list and here v2 and cost. And now we need to remove this from the graph of v1 because here the values of key is nested list so that's why we need to create a list list of node and cost. Now here you need to check temp is present in graph of v1. If it is present then here remove v2 that is temp1. So here temp1 because I need to check v2 is present right here and here we need this also because undirected graph so here temp. If you are getting confused where to use temp1 and temp c here this is v2 that's why here we want we want to remove v1. So v1 cost is temp that's why I need to write temp. Here temp1 because here v1 you need to delete v2 from here so v2 cost temp1. Here we are checking whether temp1 in graph v1 or you can check whether temp is in graph of v2 also. As I said it is an undirected graph so if this is present in the graph then in v2 temp also present. Now in the adage you need to remove this here. Make this work for the weighted graph list 2 here also mention cost and also while calling this let's take some different values. Now let's remove c2d and cost is 1. Let's execute this sorry indent it correctly now okay here you can see lots of value. Here we are deleting an ad from c2d that's why chuck c where is that. So here is c and its value d and 1 is deleted and the here c and 1 is deleted you can see right. Now if I mention some different cost like this then if I execute this it won't do any changes to this okay in c here you can d1 and present and d c1 is present it won't do deletion because this edge is not present. There is an edge from c2d but cost is not 10 that's why it won't perform the deletion operation. If you want to print the message at that time here you can use else condition and here you can write the message some message okay so this is about weighted undirected graph. Now you know how to modify this program for weighted directed graph right you just need to remove this that's it. Alright so this is about the delete edge operation how to delete the given edge using adjacency list representation alright so that's it for now. So thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.