 Hello guys and welcome to Amelia's Academy YouTube channel. We are discussing graph deletion operation and in the previous tutorial we wrote a function to delete the given node from the graph using adjacency matrix representation. Today we will write a function to delete an edge between the given vertices using adjacency matrix representation. So to write this function open up the python file and here you can see add node function, add edge function, delete node function. Next let's write the delete delete edge function. Define delete edge. I will take function name as delete edge and here you need to take v1 and v2, the two vertices. Here no need to take the cost parameter for weighted graph also because here we are writing the program for the single edges graph. We are not writing this function for multiple edges. If you want to write this function for multiple edge graph then first check how you store the multiple edges in the adjacency matrix representation. Then according to that you can modify the program. So here delete edge v1, v2. The first step in the delete edge function is you need to check the given two vertices are present in the graph or not. Like we did while adding an edge between the given two vertices. So here first I will check if v1 not in nodes. So nodes is the list which contains all the nodes of the graph or the nodes present in the graph. So first I will check whether v1 the first vertex is present in the graph if it is not present here this condition becomes true when v1 is not present in the nodes because here we used not in operator right not in membership operator. So this condition becomes true only when v1 is not present in the nodes. So that time I will bring this message v1 is not present in graph. The first vertex is not present in the graph. Next if the first vertex is not present in the graph then we will print this message and we will come out of this function. If v1 is present if this condition becomes false that means v1 the first vertex is present in the nodes. So I need to check whether second vertex is present in the graph or not. So I will use the same condition v2 not in nodes. I will check whether v2 is present in nodes or not. Here this condition becomes true only when v2 is not present in the graph. So at that time I will print this message. If v2 is not present in the graph just print this message. To delete the edge first the given two vertices need to be present in the graph v1 and v2. That is what we are doing here. We are checking that here whether v1 is present or v2 is present. Next here I will use else condition. If both the nodes are present then I need to delete that node right. Here now let's write the function for undirected graph. It can be weighted or unweighted graph. So in the undirected graph here we have undirected graph. If I want to delete this edge okay c to d then what changes I need to do in this graph. No need to do any changes to this. This is the nodes list. Here we are deleting an edge. We are not doing any changes to nodes. That's why no need to do any changes to this list. So in the program we took nested list name as graph. So here graph here c is v1 and d is v2. So first I need to do a graph of v1, v2 is equal to 0. I need to make that value as 0 in the graph as well as graph of v2, v1 as 0. That is when I delete this edge. Now there is no edge from c to d and d to c. That's why here I need to change this. I need to make this as 0 as well as I need to make this as 0. What is this? To get this I need to use graph of v1, v2. Here v1 and v2 are the nodes. But in this nested list we can't use nodes as the index of the matrix or nested list. So here in this nested list we can't use nodes as index. Because in the nested list index can be a number like 0, 1, 2, 3, 4. It can't be nodes right. That's why first you need to get the index of v1 and v2 from these nodes. Here v1 is c, v2 is d. So first I need to get the index from this nodes list. We need to get the index of v1 and v2. That is c and d from nodes list. Then here we need to write that index, graph of 2, 3 and make it as 0. Next here graph of 3, 2, make it as 0. Okay, what we need to do? First I need to find the index of v1 and v2. So for that index 1 use nodes dot index of v1. Next index 2, nodes index v2. First find the index of v1 and v2. Next you can take graph of index 1. That is the index of v1. Next index of v2 equal to 0. Make this value as 0. As well as graph of index 2 and index 1 make this value as 0. Now we are done. This is for undirected graph. It can be weighted or unweighted. Okay, so let me see whether this works properly or not. Now here this program is executing for undirected weighted graph because here we can see we are mentioning weight. Okay, now I will use delete edge and I will delete the edge from A to C. Before deleting the edge let me print the graph also. So here where is that? Print graph control here. Before deleting that, okay, now execute this. Here you can see before deleting this, this is the graph. After deleting this, this is deleted and this is deleted because we deleted an edge from A to C. That's why. Here you can see the graph. And now if you want to write this for unweighted undirected graph, then you need to do any changes here. In this function, you need to do any changes because in the weighted graph, in the adjacency that instead of storing one, we will store the cost of the edge, right? Here after deleting edge, if it is a cost or value one, we need to make that as zero. That's it. Which value is stored in that index is doesn't matter. We are making that value as zero. Whether it is one or the cost of the edge, that doesn't matter. We are deleting the edge and we are storing zero in that place. That's why here, this function works fine for the weighted and unweighted graph. And next, let's modify this function for directed graph. Okay, if I want to delete this, okay, A to C, this edge, A to C. Okay, now what changes we need to do here? You need to go to the eighth row, C column, that is, A is the index is zero, C is two. So go to zero throw, second column and here you need to make this as zero. And rest value is same. There is an edge from A to C and I'm deleting that. Even though if there is an edge from C to A like this, we are not deleting this. Okay, we are deleting this edge. So that's why while deleting the edge in the directed graph, you need to do this. V1, V2, make it as zero. Here first find the index of V1 and V2 from the nodes. So here find the index of V1 and index of V2 and make that value as zero in the graph. No need to change the V2 row and V1 column. Here this is V1 and V2. So we need to change the value present with the V1 row, V2 column. Okay, so here in this case, this is not needed and we are done. Now this will work for directed graph. I need to go to add edge and here also make this for directed graph. So like this, now we are done. Now execute this. Okay, here we have this was the graph. Okay. And now this is deleted. Okay, so this is about the delete edge function. First you need to check whether given two vertices are present in the graph. If it is present, then find the index of both the vertices and do changes in that index in the graph. Okay, so this is about the deletion operation using adjacency matrix representation. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then take care.