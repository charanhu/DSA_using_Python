 Hello guys and welcome to Amulie's Academy YouTube channel. We are discussing graph operations and previously in this series we saw how to perform insertion and deletion operation on graph. Next, let's talk about the graph traversal operation. Graph traversing means visiting every node or vertex of the graph. The process of visiting every node of graph in an order is called as graph traversal operation. And here we will discuss two traversal algorithms, DFS and BFS. Both are traversal algorithms but in these algorithms the order in which nodes are visited is different. So, let's learn DFS and BFS in detail. First here let's see what is DFS and how to traverse a graph using DFS traversal algorithm. Okay, first of all DFS stands for depth first search and in this algorithm we will begin the traversal operation from the starting node. We will start the traversal operation from the starting node. Traversing means visiting every node of the graph, right? And to do that, to visit every node of graph we need to start from somewhere, right? So here we need to start this operation from the starting node. Now the question is how to choose the starting node or I can say from where to start the traversal operation. In graphs every nodes are equal, right? If I want to traverse a tree, tree is also a special type of graph, right? In tree we have a special node called root node so we need to begin the traversal operation from the root node. But here in graph we don't have any special node. All the nodes are equal. Then how to choose the starting node or from where to start the traversal operation. So answer for this question is you can choose any nodes as the starting node for the traversal operation. You can start the traversal operation from any node of the graph. So here we have a graph. I'll choose this as the starting node. Okay. I'll start the traversal operation from here. So first step is start the traversal operation from the starting node and visit the starting node. will visit this. So I will print this. A is visited. And the next step is we need to visit the adjacent node of the starting node. Now in graph a node can have many adjacent nodes. A node can have more than one adjacent node. Here also, A is the starting node and A is adjacent to B, C and D. So there are three adjacent nodes for A. So now which one to visit first. This is also your choice. You can visit any adjacent node. You need to visit the unvisited one of the adjacent node of A. So here I will choose B. So I will visit B. I will print that. Now A and B are visited. Next step is you need to visit the unvisited adjacent node of B. Here B is adjacent to D, E and A. A is already visited. So no need to visit that again. So D and E are left. So you can visit either D or A. You can choose any node. So here I will visit E. Next is you need to visit the adjacent node of E. Unvisited adjacent node of E. Okay here E is adjacent to B and D. B is already visited. So I will visit D. Now D is also visited. Now what we need to do? I need to visit the adjacent node of D. Unvisited adjacent node of D. So D is adjacent to A, B, E as well as C. And in which A, B, E is already visited. So left is C. So I will visit that node. Now here you can see we visited all the nodes of the graph. So now we are done. Okay. So this is DFS algorithm. Okay. So let's take another example. First we need to start from the starting node. And you can choose any node as the starting node. Here I will choose A as the starting node. So I will visit that first. Next I need to visit the adjacent node of A. A is adjacent to B here. So I need to visit that. Now after that I need to visit the adjacent node of B. Here B is adjacent to A and C. A is already visited. So I need to visit C. Now next I need to visit the adjacent node of C. D, E, B are the adjacent node of C. C is adjacent to B, D, E. B is already visited. So we need to visit either D or E. Here I will visit D. Next visit the adjacent node of D. D is adjacent to C, Yum K. C is already visited. You can choose between M and K. Here I will take K. Next visit the unvisited adjacent node of K. Now here you can see K is adjacent to D and D is already visited and K is not adjacent to any other node. Now what to do? In the previous example we did face this situation. Here traversal operation is not completed because here we can see unvisited nodes in the graph. And also we don't have any option here to move forward because K doesn't have any unvisited adjacent node. Now what to do? So in this time you can backtrack. That is you can take one step back. So now move back here. Take one step back. So we will come here D. D is already visited. I know that now what I need to do? I need to check whether D contains any unvisited adjacent node. Yes here M is not visited. So I need to visit that. Now after M we don't have any unvisited adjacent node of M because M is adjacent to D that is already visited. So now what to do? You need to take one step back. So we will come here. And you need to again check whether this node contains any unvisited adjacent node. No right? All the nodes adjacent nodes are visited. Now what you need to do? Backtrack. Take one step back. Come here and check whether C contains any unvisited adjacent node. Yes E is unvisited right? So visit that. Now again check whether E contains any adjacent node which is unvisited. Yes F is unvisited here. So visit that. Now check whether F contains any unvisited node. No. And also here we can see all the nodes are visited. So we are done. Okay. So these are these steps of DFS algorithm. So I'll give you a short summary of this DFS algorithm. In the DFS algorithm we need to start traversal operation from the starting node. Consider the starting node as the current node and print that node. That means visit that node. This is the first step. And the second step is visit the one of the unvisited adjacent node of the current node. Make that node as the current node and print that node. Then follow step two until we reach the dead end in that path. After reaching the dead end, if still graph contains unvisited nodes, then we'll backtrack until we find another path that we haven't traversed through. Or I can say return to the most recent node that has not been completely explored and repeat step two. Last step is if all the nodes are visited then stop. In DFS algorithm, I need to start from the starting node and I need to visit the adjacent node of the starting node. We need to visit one of the unvisited adjacent node of a current node. That means DFS algorithm sticks with one path. It will follow that path until it ends. After reaching the dead end, it will come back. It will backtrack. It will take one step back. So we'll start from the starting node. And until we reach the dead end, we will visit the nodes in that path like this. Here we visited node till K. After reaching the dead end, what we need to do? I need to backtrack. The algorithm tries to go deeper from the adjacent of last visited node. So it will take one step back. This is the last visited node and it will check whether it contains any unvisited path. It will visit the nodes in that path. That's why this algorithm name as depth first. If you see in tree, we need to start from the root node, visit its child node. Next visit its child node. Next visit its child node. It will choose one path and it will visit all the nodes present in that path. After reaching dead end, it will come back. So in tree, I can say before visiting sibling, visit child node. Okay. So this is about depth first search algorithm. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then take care and be safe.