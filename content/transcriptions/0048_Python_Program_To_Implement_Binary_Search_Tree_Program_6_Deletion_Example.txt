 Hello guys and welcome to Python Programming Tutorials by Amulya's Academy. We were discussing about binary search tree implementation and in the previous tutorial we discussed about delete method. Today in this tutorial I will explain you how delete method works with few examples. So this is the delete method which we wrote in the previous tutorial and this is the main program where we will create object first, BST of 10. So 10 will be the root node. Next we have list of values. We will insert that to the tree. Next we are calling preorder method to print the nodes according to the preorder algorithm. Next we have root.delete and here we need to mention which node I want to delete. First let's take a node which doesn't contain any child node. So zero child node. Let's see how this method works for that. So before that I need to write down the tree for this right. So we will get tree like this when we insert the given value to the tree. Here first let's check when I call delete method for this node how it works. So we are calling delete 98. So here data is 98 and self is nothing but root. So first it will check root.key is none. No root.key is 10. So it won't execute this. It will check if data is less than self.key. Here data is 98. Self.key is 10. So 98 is greater than 10. So this condition falls. So it will go here. Aleaf and it will check data is greater than self.key true because data is 98. Self.key is 10. So it will execute if self.art child. So when I see the data is greater than the root.key I'll check whether our child is present or not. Here our child is present self.art child is not none. It is some value. So what it will do? It will take self.art child equal to self.art child delete data. So now it is calling delete method on this because here we can see the function call for this method. What it will do is it will stop the execution of this now. It will pause this and it will execute this first. This function call first self.art child delete data. That is now it will execute this function body for self.art child. So here it will pause the execution of this and will come here. So now data is same that is 98. Self is nothing but self.art child. This now 2002 now. So it will check if self.key is none. No here it is 98. It is self now. So it is not empty. So it will check whether data is less than self.key. So 98 is not less than 98. Data is also 98. Self.key is also 98. But it is not less than. So this condition become false. It will check whether data is greater than self.key. No, both are equal not greater than self.key. So it will come here in the else part and it will check if self.l child is none. Yes self.l child is none. Right here you can see it's l child is none true. So it will take temp is equal to self.art child. So temp becomes none here and it will check self equal to none. So it will make self as none. Self is nothing but this. It will make this as none and it will return temp. So it will return temp. temp is nothing but none here. So it will return none. So what it will do is it will return some value. Now after executing return we can't execute any other statement. So where it will return it will return this temp value to the place where it is called. So this is called here. It will return this temp value to here. So now it will become none. This function returns none. So self.art child becomes none. So self.art child becomes none. So here this will become none. Next we don't have any other statement to execute here. Next it will execute the last statement of this method that is return self. So self is nothing but this now. So so function call returns to here. Okay here we called root.delete98 right. So it will return back to here and it will print next lines after deleting thing and it will print the nodes in the p order. Okay in this way this method works. Let's take another example. Here let's delete a node which contains one child node that is three. Here if I want to delete three. So here data is three. Self is nothing but root. It will check self.key is none. No. This is self. Root node. So self.key is none. No. So it will check data is less than self.key. The data is three. Self.key is ten. So this condition becomes two. So it will check if self.el child. Yes self.el child is present this. So it will check self.el child equal to self.el child.el child delete data. So that is nothing but we can see the function called to the delete method and we want to apply that on self.el child. Now it will execute this method for left sub tree. This the execution of the this method for entire tree is paused now. It will execute this for this. So it will check self.key is none. Here self is this self.key is six. Six is not none. So it will check whether data is less than self.key true data is less than self.key right. Three is less than six. So it will check if self.el child. Yes it is self.el child is present. So it will call self.el child.el child delete data. So now here you can see we are applying delete method on this sub tree. We are pausing the execution of this delete method on this and will execute this now. So now self becomes this. It will check if self.key is none. No self.key is not none. It is three. So it will check whether data is less than self.key no data is three self.key is three. No data is greater than self.key no. So it will come here in the else part and it will check if self.el child is none. No here. L child is not none. Here you can see we have a node here. So it won't execute this and it will check if self.er child is none true self.er child is none. So what it will do temp equal to self.el child now it is become temp and self equal to none. So it will delete this. It will make this none and it will return temp. So it will return this one one one. Okay. Where it will return? It will return back to this now. So from after executing this method for this it will return some value to this where it is called. So this was called here when I executed this self.el child.delete data. So now it will return this now one one one. So now self.el child becomes one one one. So here this will become one one one. So this is deleted and it is pointing to here now. Now we don't have any other statement to execute here in this method. Right after executing this self.el child delete we don't have any other statement to execute. So it will come out of this and it will return self. Self is this now one zero zero one. It will return back to here. Now in this delete method for entire tree we don't have any other statement to execute. Right. So it will return self. So control will go back to here where it is called. Here we called it for three. So it will go back to there and next it will print the tree. Next let's take an example the node which contains two child nodes. So I want to delete 10 data is 10. So it will check whether self.key is none. No. So next it will check whether data is less than self.key. No. Here data is also 10 self.key also 10. So data is greater than self.key. No. So it will come here it will check whether self.el child is none. No. Here it contains the child. If self.r child is none. No. So both this condition become false it will come here. Node equal to self.r child. Now self.r child becomes node. Now we need to search for the node with the smallest key in the right child. So that's why we are performing this while node.el child. So here we can see node.el child is none. It doesn't have any l child. So this while condition become false. So it will take self.key is equal to node.key. I'll take self.key is equal to node.key. Node.key is 98. So we are modifying this. We'll take 98 here. Both are 98 now. Next self.r child equal to self.r child.delete node key. So what it will do it will pause this and it will execute this function call for self.r child now. So here node.key is 98. So we are calling this on 98. Now here data is 98. If self.key is none. No. Self.key is 98. So data is less than self.key. No. Because here data is also 98. Self.key is also 98. So both this condition become false it will come here. If self.el child is none. Yes. So temp equal to self.r child self equal to none. It will make it as none. Then return temp. So it will return self.r child. That is the temp value. There is nothing but none here. It will return none to here. This function body and it was paused here. So self.r child becomes none. So here self is this self.r child becomes a none. Then it will execute return self. So it will return to the method where it is called. That is the here in the main program. Okay. In this way this node is deleted. Now if I want to delete a node which is not present in the tree then how to do that. For example if I take 100. Data is 100 here. If self.key is none. No. If data is less than self.key. No. Data is greater than self.key too. Because data is 100 here. Self.key is 10. So self.r child is present. It will check. Yes self.r child is present here. So it will take self.r child equal to self.r child. delete data. So it will pause the execution for this entire tree and it will start to execute this method for this now. So now here self is this. So it will check whether self.key is none. No. It will check data is less than self.key. No because data is 100 self.key is 98. So it will come here and it will check whether data is greater than self.key. Yes 100 is greater than self.key. So it will check whether self.r child. No. It doesn't have any self.r child. It is false. So it will execute else. Print given node is not present in the tree. Right. After executing that it won't execute else part. It will execute this return self. What is self here? This is self. Right. It will return this result to the caller of this function. This method that is here self.r child delete data. It was called from here. So self.r child become this value 2002. Now we don't have any other statement to execute. Next it will execute return self and it will return back to its caller. I hope now you understood how this delete method works. And if you have any confusion you can ask me in the comment section. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.