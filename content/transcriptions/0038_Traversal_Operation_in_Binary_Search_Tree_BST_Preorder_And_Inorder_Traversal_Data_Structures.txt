 Hello guys and welcome to Amolias Academy YouTube channel. We were discussing about binary search trees and in that we were discussing about its operations and previously we talked about search, insert and delete operation and next in this tutorial we will discuss about traversal operation. How to traverse a given binary search tree? Traversing a binary search tree is the process of visiting each node in the tree exactly once in a systematic way. In linear data structure that is stack, queue, linked list, the elements are traversed sequentially. We will go to the first node, next we will go to second node, next we will go to the third node, in that we will traverse the linear data structure sequentially. But tree is a non-linear data structure. Here the elements can be traversed in many different ways. There are different algorithms for tree traversals and these algorithms differ in the order in which the nodes are visited. And here we will discuss about those algorithms in detail. So the first traversal algorithm is pre-order traversal. While performing the traversal of a BST in pre-order, we will take that tree is non-empty. If tree is empty that means it does not contain any node so there is no question of traversing that tree right? Empty tree. That's why we will take a non-empty tree. To traverse a non-empty binary tree in pre-order, we need to follow the following operation or steps. First is you need to visit the root node. While traversing a BST in pre-order, first step is you need to visit the root node. Next you need to visit left subtree and finally you need to visit right subtree. So this is the order of traversing in pre-order traversal. For example, if I have a tree like this, here first I need to visit the root node. Root node is 30. Next I need to visit the left subtree. Here this is the left subtree and the left subtree contains only one node so here 10. Next you need to visit the right subtree so 20. So we will get the values or nodes in this order. In the pre-order traversal, we will get 30, 10 and 20. First you need to visit the root node. Next you need to go to left subtree. Next you need to go to the right subtree and you need to perform this operation recursively. That is first we will go to the root node. After visiting the root node, we need to go to the left subtree. Here also you need to follow these three steps. In the left subtree, you need to go to the root node. Next left subtree, next right subtree. You need to perform this operation recursively. Let's take an example. Here I have a binary search tree. Here this is the root node and here we want to perform pre-order traversal. In the pre-order traversal, first I need to go to root. I need to visit root node. Next left subtree, lastly right subtree. So let's visit tree using this pre-order traversal. So first we need to visit the root node. This is the root node and its key is 21. So I will write down that 21. Next I need to visit left subtree. This is the root node, this is the left subtree of that root node. This is the right subtree of this root node. So first here we need to visit left subtree. This is the left subtree. So now we need to visit these nodes. As I said in the left subtree also you need to follow these steps. You need to start from root. So this is the root node of this left subtree. So I need to take 10. Next I need to take left subtree. And this is the left subtree of this node and this is the right subtree. So now after visiting root node I need to visit left subtree. This is the left subtree and here in this left subtree we need to follow the same rule. We need to start from root Next left next right so this is root. This is the right subtree. So we need to start from root. So I need to write five. And next I need to visit the left subtree. Now this is the left subtree of this node and this is the root node of this left subtree so I will write down that and here you can see this node does not contain any child node this is the leaf node so it does not contain left subtree and right subtree so now we are done with this. Now here in this subtree we are done with root node left subtree we need to visit right subtree so here 7. Now we finished visiting this left subtree this is the left subtree of this node we finished 10 left subtree we need to visit right subtree now so 12 comes here. Now we finished this left subtree we visited all the nodes of this left subtree so this is completed now so root node is completed here left subtree is also completed now I need to move to the right subtree this is right subtree here and here we need to apply same we need to start from root left subtree right subtree so 30 25 and 100 this is the root node so we need to start from here next left subtree so this is the left subtree so 25 next this is the right subtree so 100 I will take one more example so here we have another binary search tree so let's traverse this tree using p order traversal algorithm so first we need to begin from root so 30 next we need to visit the left subtree nodes here this is the left subtree and this is the root of that left subtree so first I need to visit root next here we can see this is the left subtree after visiting root node I need to visit the left subtree so this is the left subtree of this node so first I need to visit the nodes of this left subtree so here 7 is the root node of this left subtree so first I need to visit the root node so I need to write down the 7 next here one is the left subtree one nine is the right subtree so now we are done with this left subtree so now we are done with root node left subtree so we need to visit right subtree that is Now, we finished with this left subtree. Root node is done, left subtree is done. So we need to visit the right subtree. So here, first we need to begin from 50, next 40, next 100. So this is the order. When we visit the nodes of the three in preorder traverse algorithm. All right. So next, let's talk about next type of traversing algorithm that is in order traversal. So the second traversal method is in order to traverse the non-empty binary search T in in order. We need to follow the following operation and we need to perform that recursively. Here, first we need to visit left subtree. Secondly, we need to visit root node. And finally, you need to visit the right subtree. You need to traverse right subtree. So this is the order in in order traversal. First you need to visit left subtree, next root, next right subtree. And you need to perform this recursively. If I have tree like this, first we need to visit left subtree that is 10. Next we need to visit root node that is 30, next 50. So in in order traversal, we'll get the numbers or keys or values in the ascending order. Here you can see 10, 30, 50. Because BST is ordered, if you perform in order traversal, then we'll get keys or values in the ascending order. Alright, so let's take a few more examples. So here I'll take the same tree. Previously we traversed this tree using pre-order traversal algorithm. Now let me traverse this using in order traversal algorithm. And I perform pre-order. We got output like this. So here we need to visit left subtree first, next root and lastly we need to visit right subtree. Right, so if I perform in order traversal, let's see what we'll get. So we need to begin from the left subtree of the root node. So this is the left subtree, this is the right subtree, this is the root node. And in the left subtree also we need to follow this rule. So in this left subtree, this is the root node, this is the left subtree and this is the right subtree. So we need to begin from the left subtree, that means we need to begin from here. And in this left subtree also you can see this is root node, this is left subtree, this is the right subtree, and we need to begin from the left subtree. So here you can see this left subtree contains only one node. So here first we need to write down this tree. We visited the left subtree, next we need to visit the root node, that is phi, and we need visit the right subtree, that is 7. So 3, 5, 7, this is completed now. We successfully visited this left subtree. Now this is the left subtree of this root node. So we completed left subtree, that means we need to visit root node now next right subtree that is 12. Now left subtree is completed. So root node 21, then we need to visit the right subtree. Here also we need to follow same order. First visit left subtree 25, next 30, next 100. So here you can see the nodes. And here the numbers or values are in ascending order. Let me take one more example here. Let's traverse this binary subtree using in order traversal algorithm. So we need to start from the left subtree. So this is the left subtree of root node. And in this left subtree, this is the root node, this is the left subtree, this is the right subtree. And in this left subtree, this is the root node, this is the left subtree, this is the right subtree. So we need to start from here. So one, seven, nine. So left subtree is completed, next 10 and 20 root node and right subtree. Now left subtree, this left subtree is completed of this root node, next here root node, next in this right subtree 40, 50, 100. In this way you can traverse the binary subtree using in order traversal algorithm. Now to check whether you understood this concept properly or not, I will give you few exercise that is I will give you two binary subtree. You need to traverse this binary subtree using in order and preorder traversal algorithm. So pause this video and write down your answer. Okay. Now you can check your answer. You can compare your answer here. All right. So this is about the preorder and in order the two traversal algorithm. And we have two more traversal algorithm that we will discuss in the next tutorial. Okay. Before finishing this video, I know when we have different traversal algorithm, it is normal to get confused with the order of visiting nodes in which algorithm I need to take root first, left subtree, right subtree. Okay. It is a little bit confusing. So to solve this problem, I can give you a small tip. As we know in binary search tree will have left subtree root node and right subtree binary search tree is a binary tree which follows this rule. That is the key of the left subtree nodes should be less than or equal to root node. And the key of the right subtree should be greater than root node key. Here root is the starting point of tree. So it is very important. So now in preorder, what is pre means before, right? If you visit root node before any other nodes, then that is the preorder algorithm. Here if I shift root from here to here, root left subtree, right subtree. This is the order of preorder and and in order, keep the order same. Don't change anything. Left subtree root, right subtree in the pre pre means before. So before visiting any other node, we need to visit root node. So I shifted root node here. So that's why this is the order in preorder. First visit root node, left subtree, right subtree in order is nothing but keep the same order. Don't change anything. This is left subtree root, right subtree root will come in the middle in the middle. And for next two algorithms, let's see what is that in the next tutorial. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class till then take care.