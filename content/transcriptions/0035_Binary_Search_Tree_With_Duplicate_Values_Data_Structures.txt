 Hello guys and welcome to Amulya's Academy YouTube channel. We were discussing about tree data structure and in the previous tutorial we discussed about binary search tree. Binary search tree is a special type of binary tree in which all keys in left subtree of a key must be smaller and all keys in right subtree must be greater. This is the definition of the binary search tree which we discussed in the previous tutorial. But here you can see by seeing the definition of the binary search tree, this definition is for the distinct values. If the value is lesser than the root node key, the node will be present in the left side of the root node. If the value or key is greater than the key of the root node, then it will present in the right side of the root node. This is a binary search tree, right? The node with key lesser than the root node will be present in the left side and the node with key is greater than the root node will be present at the right side of the root node. And this BSD rule will apply for every node. We can write like this, we will have root node, right? If you have node with key is lesser than the root node, it will present in the left side of the root node and if it is greater then you should present at the right side. And it applies for every node. Here also you can see phi is lesser than 10 so it is present at the left side, value is greater that is why it is present in the right side. But now what if it becomes equal to the key or value of root node or any other node? That means what if we have duplicate value? Here if I have another node with the value 21, then how to place that in the binary search tree? We will construct the binary search tree with the duplicate values. So today we will discuss about that, how to deal with duplicate values in binary search tree. So we have different approach to deal with duplicate values in binary search tree or I can say we have different explanation for this concept. In some book it is said that the duplicate values are not allowed in binary search tree. In some book you can see this explanation, duplicate values are not allowed. So that means no need to deal with that right. And in some books you can see duplicate values are allowed and if duplicate values are present it need to present in the left side of the node. That is we will take like this. If it is root or any node and it will have right side, right? It is like this. If you have any node with key which is equal to the key of the root node or any other node, then we need to place that in the left side. We have another explanation also. In some books they will say it need to go to the right side. Then we have node with key which is equal to the root node or any other node. Then we need to place that in the right side. So we have different explanation for this concept. If you are student then just follow whatever written in your textbook. Now let me explain you these three scenarios in detail. So first one is duplicate values are not allowed. If it is not allowed then there is no question of constructing binary search tree from the duplicate values, right? So when duplicate values are given to construct the binary search tree, in this case either it will ignore the duplicate values or it will print an error message. Next, if duplicate values are allowed in the binary search tree, then either we can place that in the left side or right side. And next, let's construct a binary search tree with duplicate values. I will use both this condition. First we will construct the binary search tree using this. We will follow this approach. Later we will construct the binary search tree using this. Let's take few values. So let's begin from the first value 10. I will take this as the root node. Next we have 7. So it will come left side. Next we have 12. So it will come right side. Next we have 5. So here 5 will come left side of 7. Next we have again 5. So 5 is less than 10. 5 is less than 7. Here 5 is equal to 5. We have duplicate value. So here I will place that in the left side of the node. So 5 will come here. Next we have 17 which is greater than 12. So it will come here in the right side. Okay. So we will get 3 like this. When I take like this. If we have a node with key equal to a root node or any other node, then I will place that in the left side of that node. What happens if I place that in the right side? We can place that in the right side also. If we do that we will get different tree. 10 will be here. 7 will be here. 12 will be here. And 5 will come here. And here this is the duplicate value. So when we compare 5 with 5. So it becomes equal. So we need to place that in the right side like this and 17 comes here. So we will get this tree when I take this as the condition. If I place the duplicate values in the right side. So this is the binary search tree definition for the distinct value. Now if I want to make this work for the duplicate values here lesser than or equal to. This is first definition. The left subtree of a node contains only nodes with keys lesser than or equal to the nodes key. Or you can take another condition as like this greater than or equal to. You can't take both. This is the second definition. Either you can place that duplicate value in the left side or you can place that in the right side. But allowing the duplicate values in the binary search tree adds complexity. For example, if I have tree like this and now I want to insert a new node with key as 3. Then first here we will compare this with the new node. 3 both are equal. So if I take the first definition that is if we have duplicate values then I will place that in the left side. So it will go left side here and next we will have 3 here in the right side. Because 3 is greater than 2 so it will come here. Here we can see duplicate value 3 is present in the different level. It is present in the level 0. It is present in the level 2. That means the duplicate values can be present in any level. This may be separated by any level. So checking for the duplicate existence is not that simple as just checking for immediate child of a node. It can present in any level. So to avoid this we can follow another approach also while dealing with the duplicate value. That is instead of representing this duplicate as separate nodes we can place the counter. It will keep the count of number of occurrence of that key. For example here we know 3 is a duplicate key. So instead of representing this if we have these are the list of values 3 is the root node 2 will come here 4 will come here. We have another value that is duplicate value. Instead of representing this as separate node we can keep the counter like this. How many times it is occurring? 2 is one time 4 is one time. This is 2 time. If I have another example like this will begin from 5 it is occurring one time. Next we have 10. 10 is this also one time 15. So it is also one time 3. This is also one time. Next we have 1. One time. Next we have 5. So it becomes twice. We want that separate node will increment the counter. Next we have 5 again. So it will become 3. Next we have 5 that means count is 4. Next we have 1. One is also already present. So count is 2 like this. Instead of representing separate node we can keep a counter to deal with the duplicate values in the binary search tree. This is another simple approach. So this is about the binary search tree with the duplicate values. We can see different explanation for this in different books. If you are a student then you need to follow whatever written in the text book. Ok so that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you next class till then take care.