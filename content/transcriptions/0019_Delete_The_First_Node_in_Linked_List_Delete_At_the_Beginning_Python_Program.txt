 Hello guys and welcome to Python programming tutorials by Amalya's Academy. We were discussing about Linked List program and we were using class concepts to implement Linked List in Python and previously we created a node class and Linked List class and in the Linked List class we wrote a method for traversal operation and for the insertion operation that is to add the element to the single linked list. Next we will discuss about deletion operation or removal operation. We will see how to delete the node from the single linked list and how to write the code for that. Like insertion operation we can perform deletion operation in the different positions. Removing the nodes from the beginning of the linked list, removing the nodes from the end of the linked list and removing the nodes from the middle of the linked list. And we need to write the separate code for each scenario. So today in this tutorial we will discuss about how to remove or delete the node from the beginning of the linked list and rest scenarios we will discuss in the next tutorial. Alright so we have here linked list which contains four nodes and this is the first node and in the program we already have node class, linked list class, traversal method in the linked list class as well as insertion method. Here we have add begin, add end and add after add before for methods for the insertion operation. The link of all the videos are in the description box you can go and check that. Alright so now we want to delete the node from the beginning of the linked list. That means we are deleting this node, the first node of the linked list. Whenever you want to perform the deletion operation first we need to check whether the linked list is empty or not. If it is empty then we should print a message, you can print any message here like linked list is empty so you can't delete the element like that. If I want to delete a node from the beginning of the linked list for that first the linked list would contain the nodes right. If it is an empty linked list we can't delete any node from that. So while performing the deletion operation the first step is you need to check whether the linked list is empty or not. Next after checking that if it is empty we'll just print a message we can't perform the deletion operation right. If linked list is not empty if it contains nodes then what we need to do is we need to delete the first node. To delete the first node point this head to the second node of the linked list that's it. Now here we can see this is the first node and the head contains the reference of the first node 1011 because here head is the starting point of the linked list. Now to remove this node what we need to do is we need to point this head to the second node of the linked list. So when we do that here we can see head is pointing to the second node as I said head is the starting point of the linked list. So whatever the reference it will store that will be the first node of the linked list. If it stores 5001 that means the linked list begins from here so head contains 5001 that means that will be the first node. So to remove or delete the first node from the linked list head should contain the reference of second node. In this way you can delete the first node from the linked list. Now to write the program the first step is we need to check linked list is empty or not. So how to check linked list is empty or not if head is pointing to none the here we can see this head right. If head is none that means the linked list is empty. As I said head is the starting point of the linked list if it is pointing to none or null value that means we don't have any nodes that means linked list is empty. So to check the linked list is empty or not we need to use this head is none or not. If head is none just print a message. So let's do that. In the python file we already have our program here we have class node and next we have class linked list in that we have the method for the traversal operation we took the method name as print LL linked list. Next we have add begin add end method next add after method we can add the new node after a mentioned node or before the mentioned node using add before method. We already discussed about this code in the previous tutorial. I will give you the link of this videos in the description box. Now today we need to write the method to remove the node from the beginning of the linked list. So I will take the method name as delete begin. Okay I will take the method name as delete begin we are deleting the element from the beginning. You can take any name here while deleting the element we don't need any parameters just I will take the self parameter. The first step in deletion operation is we need to check head is none or not if head is none that means linked list is empty. So I will check if self.head is none. If it is true just print a message you can print any message. So here I will take linked list is empty and after this you can take return okay what it will do is if this condition becomes true that means if linked list is empty so it will just print this message and it will come out of the method this method or you can instead of that you can use else like this if else conditional statement that's your wish if you use return no need to take the else keyword. Alright in the else part if linked list is not empty as I mentioned if it is not empty what I need to do is I need to point head to the second node that means we need to store the reference of the second node in the head okay so we can do that but where the second node reference is stored in the first node right here every node contains the reference of the next node here this second node is the next node of the first node the node which we want to delete now so that means it contains the reference of the next node. So if I take head equal to self.head.ref as I mentioned previously if you want to access the data of the first node you can write it as self.head.data. Now here we want the reference of the first node the whatever the reference stored in the first node so I'll take self.head.ref. So it contains the reference of the second node or the next node now we'll store that in head here head becomes 50000 it is pointing to here so here in the else part what I need to do I need to take self.head is equal to self.head.ref whatever the reference stored in the first node now we are done all right so let's see whether it works or not now let me add few nodes to the linked list I'll take add begin method now if I print this in the linked list it contains 30 2010 now I want to delete this so I'll call delete begin method ll1 that is the linked list name delete begin no need to mention any parameter so now if I execute this it will delete 30 now we'll get only 20 and 10 so let's see that here you can see 30 was deleted so to print the nodes present in the linked list I'm using this print ll if I remove this okay now the linker list contains only 10 and 20 now if I execute this here we can see only 10 is present 20 is removed and also if linker list is empty and if I try to delete any node from that like this here we can see linker list is empty we are not calling any insertion method that is add begin add end or add after add before method the linker list is completely empty now if I try to delete a node from here so we'll get this message linked list is empty we can't delete nodes as well as it will print linked list is empty that message is printed because of this method print ll it will print the linked list is empty message all right so in this way you can delete the first node of the linked list first you need to check whether linked list is empty or not if it is empty just print a message linker list is empty otherwise point head to the second node and the second node reference is stored in the first node so you need to take self.head go to self.head.reference simple right so that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care