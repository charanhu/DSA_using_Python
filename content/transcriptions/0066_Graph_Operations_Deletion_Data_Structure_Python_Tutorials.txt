 Hello guys and welcome to Amuleas Academy YouTube channel. We were discussing graph operations and in the previous tutorial we saw how we can insert a new node or an edge between the given vertices in the graph. That is we saw how we can perform insertion operation in graph. Next, let's talk about the deletion operation. How to delete the given node or an edge between the given vertices in the graph. Take insertion operation. In the deletion operation also we can perform delete node operation and delete edge operation. First let's see how to delete the given node or vertex in the graph. So delete node operation or delete vertex operation. Here we will perform this operation like this delete node and we need to mention the node or the vertex which I want to delete from the graph. And this operation will delete that node v or the vertex v from the graph if it is present in the graph and also it will delete all the connection or the edge connected to that node. If v is present in the graph this operation will delete v. It also deletes the connection or edge connected to node v. Alright so let's see an example. Here we have a graph undirected unweighted graph and a, b, c, d are the four nodes in this graph. This is the adjacency matrix representation and this is its adjacency list representation. Now if I want to delete c then I need to call delete node operation or vertex operation and I need to delete c. Now what this operation will do is it will delete this node c like this and also the edge connected to this. It will delete this also like this. Now after deleting c from this graph graph will look like this. Ok so this is manual representation. Let's see what changes we need to do in the adjacency matrix representation after deleting a node. When I delete a node from the graph in the adjacency matrix representation I need to delete or remove a row and column from the matrix. While adding a new node to the graph in the adjacency matrix representation we need to add a new row and column. But here we are deleting a node from the graph that's why we need to remove a row and column from the adjacency matrix. And here in this operation we deleted the node c. That's why here we need to delete the row c as well as column of c. Now here you can see in the adjacency matrix node c is deleted as well as all the connection or edges connected to the node c is also deleted. This is about the adjacency matrix representation after deleting a node. Next let's see what changes we need to do in the adjacency list representation. For the adjacency list representation we will use dictionary. Now here we deleted c that's why first I need to delete this key and value pair. Next I need to check values of all the key. We need to check whether node c is present in the adjacency list of all the nodes. For example here you can see first I need to check the value of key a and here c is present so I need to delete that and here next I need to check b and here c is present I need to delete that I need to remove that from the list because here we can see c and edge connected to that is removed so you need to remove this from here and you need to check d and here you need to remove c. Ok so dictionary will look like this after deleting node c. I'll take another example here we have an undirected unweighted graph. Now if I want to delete node p so I want to delete this so here b is deleted as well as all the edge connected to this. Now graph will look like this and in the adjacency matrix we need to delete the row and column of b and index of b is 1 so here delete the row 1 and column 1. Now matrix will look like this and in the adjacency list representation first delete the key and value pair of b because we are deleting b that's why delete this. Next go through value of each key and check whether node b is present in the list if it is present then delete that from the list and in the directed graph also if I want to delete c here called delete node c. So here the index of c is 2 so delete row 2 and column 2 like this. In the adjacency list representation delete c as well as go through values of each key and see whether c is present or not if c is present in the list delete that or remove that from the list. In the weighted graph if I want to delete c so first delete that here delete the second row and second column because the index of c is 2 and here delete c as well as check all the values or the list of key a and if c is present delete the whole list here c and phi delete this whole list and here I have one more tip for the adjacency list representation that is if we have undirected graph then no need to check the values of all the key present in the dictionary that is because here if I am deleting c then here you can see in this list we have two nodes that is a and d that means there is an edge from c to a there is an edge from c to d because this is an undirected graph that means there is an edge from a to c and d to c also right that is why instead of checking the values of all the key we just need to check the values of key a and key d and here you can see in e and b c is not present because if there is an edge from b to c then here we need to insert b also right because this is an undirected graph if there is an edge from b to c then there is an edge from c to b also at that time we need to mention that b here it is not present that means there is no edge from c to b and b to c that is why in the undirected graph no need to check the values of all the key instead of that we can chuck the values of those nodes which are present in this list of c but in the directed graph we cannot do that if I delete c here c is empty list that means there is no edge from c to any other node but there can be an edge from any other node to c here we can see there is an edge from a to c and f to c that is why we need to chuck the values of every key in the directed graph but in the undirected graph if there is an edge from c to a that means there is an edge from a to c also that time no need to chuck the values of every key okay so this is about the delete node operation next let's discuss about the delete edge operation how to delete an edge between the given vertices in the graph so to perform this operation and here you need to mention v1 and v2 that is start and end vertex of the edge okay what this operation will do this operation will delete the edge between v1 and v2 if v1 and v2 are present in the graph so let's see an example okay so if I want to perform delete edge and I want to delete this edge okay so I'll take c and d delete the edge between c and d okay so now here you can see this edge is deleted this operation simply deletes the edge if that edge is presented in the graph like this it will delete this now in the adjacency matrix representation what we need to do we need to change the value present in the cth row and the dth column that is here if I take this as graph the matrix as graph and this list as nodes in the previous program we took this as nodes and this as graph here what I need to do is graph of v1 graph of v1 row v2 column here v1 is c v2 is d here index of c is 2 index of d is 3 so here that means graph of 2 and 3 second row third column here this make this as 0 because now there is no edge from c to d now also we need to change graph of v2 and v1 v2 index v1 index v2 row and v1 index as 0 that is graph of third row and second column I need to make this as 0 because here we can see so here every row and column represent the connection between the nodes whether there is an edge between the nodes or not now when I delete this now there is no edge from c to d and d to c that's why I need to make here the value as 0 here you can see this is c to d I need to make this as 0 and here this is d to c I need to make this as 0 that is nothing but graph of v1 v2 graph of v2 v1 I need to make this value as 0 when I delete an edge from the undirected unweighted graph okay so this is about the adjacency matrix representation in the adjacency list representation when I delete c to d you need to go to c here in the list you need to delete d and you need to go to d next because we deleted the edge between c and d that's why you need to change the value of c and d here you need to delete c in the in the list we need to delete c this is about undirected unweighted graph next let's take an example for directed unweighted graph here let's delete an edge delete edge I'll delete this edge okay f to g now here what you need to do this is a directed edge that means there is an edge from f to g that's why in this graph you need to go to graph of f to row gth column that is so now you need to make this as 0 there was an edge from f to g now we removed that so we need to make this as 0 here what we need to do graph of we need to make graph of v1 v2 equal to 0 no need to change v2 v1 we are deleting an edge from f to g we are not deleting the edge from g to f here it is not present if it is present also we are not deleting that edge okay now in the adjacency list representation you need to go to node f that is key f and you need to remove g that's it okay so this is about directed graph next let's see weighted graph so here if I delete an edge of a to b here you can see this is a weighted graph but it is an undirected graph so delete edge a and b so we need to delete this so in the matrix here a is 0 b is 1 so first delete graph of 0 and 1 0 through and 1 column make it as 0 next graph of 1 and 0 because this is an undirected graph there is an edge from b to a also make this also 0 this is in the adjacency matrix representation in the adjacency list representation go to the adjacency list of a list of key a and remove this you need to remove this and go to b and remove this this edge from the key b remove a from the key a remove b so now we are done so this is about deleting the edge from the unweighted undirected graph when we want to delete a node we need to follow this step first check whether that node is present or not if node is present then delete that node while deleting an edge you need to check whether the given two vertices are present in the graph if it is if it is present then we need to delete in the edge from the graph okay so this is about the deletion operation in the next tutorial we'll write some code for this so that's it for now guys thank you for watching don't forget to subscribe to my channel i will meet you in next class till then take care and be safe