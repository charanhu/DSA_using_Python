 Hello guys and welcome to Python programming tutorials by Amoleus Academy. In the previous tutorial we saw how we can implement stack using list. Today in this tutorial we will see how to implement stack using different modules. So first here we will discuss about collections module. In the collections module there is a class called deck and we can use this class as the stack. Here deck stands for double ended queue. Here we can add the elements in the both the side. There are different methods to add the element in both the sides. But stack works in the LIFO order last in first out. So we need only one end to add the element and remove the element. So using few methods of deck class we can create the stack. For the push operation we can use append method of deck class and for the pop operation we can use pop method of the deck class. Yes the method names are same as the list methods. So let's see the example for this. So first we need to import the module collections. Next we can create the stack using collections. deck like this. Using this class we can create the stack. Now here we can see. Now if you want to add the element to this stack you can use stack.append. You can add the element here and you can add another element and you can add another element. You can add element like this. Now to pop the element from this you can use pop method. Okay it will first remove 30. Next 20. Next 10. If I again use this it will give the error. You are popping from the empty deck. So here method names are same and this deck class contains many other methods also. Using that methods you can add and remove element in the another end also. But here we want to create stack using this deck class. That's why we are using append and pop. Now if you want to check whether stack is empty or not you can use not stack or you can check the length of the stack also. Not stack it is true because now stack is empty. And if you want to check the element present in the top you can use the minus one index stack of minus one same as the list. Okay so this is about the deck class. Next using the queue module. You can create the stack. In the queue module there is a class called leafo queue. Using this you can create the stack. In the leafo queue for the push operation you need to use put method for the pop operation you need to use get method. So I will show you the example for this. So here you need to import queue. Next here you can create the stack using queue. And if I press the lower arrow button here we can see empty full here this is the leafo queue. And use this. Alright so now if you want to put element to this you can use stack.put and here you can put the element like this and here. Right now if you want to perform pop operation you can use stack.get. It will remove 31st, 20 next, 10 next. Now again I use stack.get. It will take the time to finish this function call because now stack is empty. Now it will take time so I'll close this. It will block until it finds the element. So to solve that you can use the timeout parameter. In the get and put function there is a parameter called timeout. If you set timeout as the positive value for example one second after one second it will print the message. That is queue is empty in the get function and in the put function sometimes it will print queue is full like that. Well I'll explain you about that. Before that we can set a limit to this stack that is how many elements we can enter to this stack. For example here if I take three maximum size of this stack is three. It only takes three elements. After that it will print queue is full message. For example here I took maximum size as three. Now if I put the value so now we enter three elements right. After this if I try to enter another element for example 40. Now the maximum size is over right. Now if I enter this here what it will do is it will block until queue slot becomes empty. If you want to see that message queue is full then you can here set the timeout. Timeout I hear I'll take one second. Now if I enter this here we can see in the one second it will print queue is full message. In the get function also you can use this timeout. It will pop the last element. Next 20. Next 10. Now if I again use this stack.get it will stop the execution. It won't give any message it won't print any message. It will wait for the element. If you want that stack is empty message then you need to set the timeout here. If I set it to one second here you can see after one second it will print the message queue is empty and here we can see that. So in this way using this collections and queue module you can implement this stack in python. So that's it for now guys thank you for watching don't forget to subscribe to my channel I will meet you in next class till then take care.