 Hello guys and welcome to Amulya's Academy YouTube channel. We were discussing about binary heap data structure. The complete binary tree that follows the properties of heap is called as binary heap and a binary heap is either mean heap or magzip. Because binary heap is a complete binary tree, we know how many nodes will be present in each level except the last level. For example in level 0, complete binary tree will have only one node that is the root node. And in the second level that is level 1, it will have two nodes if it is not the last level. In the level 3, number of nodes will be 4 if it is not the last level. It is a complete binary tree. Except the last level, all the level will be completely filled with nodes, right? That's why we can say how many nodes will be present in each level except the last level in complete binary tree. Because of this completeness, binary heap is usually represented using arrays. In Python we can represent it using list. So today in this tutorial we will see how to represent binary heap using list. Here we have a binary heap, this is a mean heap. Now we want to represent the elements of this mean heap using list. For that, let's take the key of the root node. We need to store that in the first position, in the 0th index. We will store the root nodes key in the 0th index of the list. Next the left child store phi. Next 10. Next 15. Next 20. It is like traversing the tree using level order traversal algorithm. Next 20. 30. 40. Next 100. Next 400. This is the index. So we will start from the root node. Root nodes key will be stored in the first index, 0th index of the list. Next phi. Next 10. Next 15. 20. 30. 40. 100. And 400. New query heap in the list like this. Let's take another example. Here we have a max heap. So first, the root node key will be stored in 0th index of the list. 0th index. Next 50. It is left child. Next 70. It is right child. Next 10. Next 30. 40. 50. 50, 1 and 7. When we are representing the binary heap using list, the element present in the 0th index will be the root nodes key and in the first position the left child of root node in the second position right child of root node. Here root node will be always present in 0th index and now in the 1 and 2 position the child node of root node will be present in the first position left child will be present in the second position right child will be present and child node of this node will be present here 10 and 30 and child node of 70 will be present here 40 and 50 and 1 and 7 are the child nodes of 10. So, now if I want to find the position of any node then how to do that I will tell you. So, if I want to find the element present in the ith index then I need to use list 1 of i right. In the ith index the element will be present that is list 1 of i. Now if I want to find the parent node where the parent node of this node is present then I need to use formula as i minus 1 truncated division 2. It will give the position or the index of the parent node its parent node. For example, if I want to find the parent node of 30 its index is 4 that is why i value is 4 4 minus 1. So, I will get 3 truncated division 2 I will get 1. So, it is present in index 1. Here we can see parent of 30 is 50 which is present in the index 1 right. Now if I want to find the child node of the element present in the ith index if I want to find its position where it is present for left child you need to use 2 into i plus 1 for right child you need to use 2 into i plus 2. For example, if I take 70 its i value is 2. Now if I want to find where its child node is present its position then I need to use this formula for left child to multiply i plus 1. So, here its index is 2 2 into 2 4 4 plus 1 5. In the fifth index its left child is present here you can see yes. For the right child to multiply i plus 2 here 2 into 2 4 4 plus 2 6 it is present in this 6 position. If you want to find the position of a node or its parent node or its left child node right child node you can use this formula. Okay. So, this is about how we can represent binary heap elements using list. So, that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then, take care.