 Hello guys and welcome to Python programming tutorials by Amalia's Academy. We were discussing about the double linked list program and previously we wrote the code for the traversal operation as well as insertion operation. Today in this tutorial we will discuss about deletion operation. So for the deletion operation of the double linked list, we will write three methods. That is we will see how to delete a node from the beginning of the double linked list, from the end of the double linked list, also how to delete the node by value. So we will discuss about these three methods. So first we will discuss about this scenario. That is how to delete a node from the beginning of the linked list and we will write the code for that. So when you are performing the deletion operation, first step is you need to check the linked list is empty or not. Here we are discussing about how to delete a node from the beginning of the linked list. Delete begin method. So first step is you need to check linked list is empty or not. If linked list is empty, that means it doesn't contain any node. So we can't delete the node at that time, right? So first scenario is this. Next after checking this condition, if double linked list is not empty, then I need to check whether the double linked list contains only one node. Because in double linked list, every node contains two links that is previous link and the next link. That's why we need to consider this condition also. Before deleting the node, we need to check whether that node is the only node of the double linked list. And the lastly for the rest case, that is if our double linked list contains more than one node. Here we are writing the method for deleting the node from the beginning of the double linked list. We can write that method in three steps. In the first step, I need to check linked list is empty or not. If linked list is empty, that means we can't delete any node from that. If linked list is not empty, then I need to check this condition. I need to check whether linked list contain only one node. If the double linked list contains only one node, and if I am deleting that, then linked list will become empty, right? That's why I need to check this condition. If this condition is also false, then I need to check this condition. If it contains two nodes, three nodes, four nodes, five nodes, then I need to write the separate code for this. So first, let's see the first case, how to check linked list is empty or not. We know that right? If self.head is none, that means double linked list is empty. So if double linked list is empty, then I'll print a message that is double linked list is empty. So you can't delete any node from that. So first, let's do this in the python file. So here we have our program class node, class double linked list. And in that we have print LL, that is the forward traversing method. Print LL reverse, that is the reverse traversing method. Next, we have insert empty, add begin, add end, add after method, as well as add before method. These are the methods for the insertion operation. Today, we'll write the method for deletion. I'll take the method name as delete begin. And here, I need to take parameter as self. We don't need any other parameter. Because here, we are deleting the node from the beginning of the double linked list. So we don't need any other parameter. And here, the first step is you need to check linked list or double linked list is empty or not. So for that, I'll use if condition and I'll check self.head is none or not. If self.head is none, that means double linked list is empty. So we can't delete any node. So DLL is empty. I'll print this message. W linked list is empty. So I can't delete the node from here. And here, I can use return statement. If I use return statement in a method or function, when self.head becomes done, it will print this message and it will execute return. That means control will come out of that method. Or if you want, you can use else also, instead of return, you can take else statement here. It's your wish. Okay. So now we are done with the first step. Next, let's see the next step. If W linked list is empty, we'll print a message. If it is not empty, then we need to chuck this condition. We need to chuck whether double linked list contains only one node. For example, here, I'll take only one node. Okay, like this, I'll take data as 100, and I'll take none and none. If W linked list contains only one node, it will look like this. This is the data field and both the reference will point to none and head will point to that node. Now, if I delete this node, then head will become none. Right. We need to take head as none. When only one node is present in the W linked list, if I delete that, then I need to point head to none. If W linked list contains only one node, that is this node, if I delete this, then W linked list becomes empty. Empty is nothing but head will point to none. Right. So we need to do that. Now, the question is how to chuck W linked list contains only one node or not. For that, you need to take the condition like this. This is the head, right. And this is an ref next link reference. If head dot nref is none, that means W linked list contains only one node. Here we can see in this W linked list, it contains three nodes. This is head and this is head dot nref. It contains the reference of the next node. Right. If this nref link contains none, that means we don't have any other node after that. That means we have only one node in the W linked list like this. If we have only one node in the W linked list, the nref of that node will point to none. Right. So that's why to chuck W linked list contains only one node or not. I need to chuck like this self dot head dot nref. Next, click reference is none. If it is none, means the W linked list contains only one node. So, so here you need to take self dot head as none. If you want, you can print the message also, you can print any message here if you want. Next here, I'll take else part. If the linked list is empty, we'll print this message and we'll come out of the method. If W linked list is not empty, then we'll chuck this condition. We'll chuck whether W linked list contains only one node. If it is true, I'll take self dot head as none and I'll print this message. If the W linked list contains more than one node, then what we need to do. When W linked list contains more than one node, how to delete the first node from that. So for that, what you need to do is you need to point head to the second node. The first step is you need to point head here because we want to delete this node, right? When we delete this node, this will become the first node of the W linked list. So we need to point head here. We need to take head equal to this node, 40000. What is 40000? That is nothing but the nref, right? So here you need to take head dot nref. Initially, head was pointing here, right? Now head is 1010. Now I need to point head here. So for that, I'll take head equal to head dot nref. Head dot nref is nothing but 40000. So head will point to here. After that, here, this is the first node. Now the previous reference of this need to point to none, right? Now this is head and the previous reference of this need to point none. So I need to take head dot pr ef equal to none. Now the W linked list will start from here head. So this is the first node and its previous reference is pointing to none. So this will be the first node. After that, it contains the reference of 2700. So it will become the second node. Now it contains the reference of none. That means it is the last node of the W linked list. This node is treated as it is removed from the W linked list. So here, first I need to take self dot head is equal to self dot head dot nref. And next I need to take self dot pr ef is equal to none. So now we are done with the delete begin method. So let's execute that and we'll see whether it works properly or not. Here we can see I created the dl1 object. And here already we have 10 and 4 in the W linked list. If you want, you can see that. And if I execute this, here we can see we have 10 and 4. Now if I delete the node from the W linked list dl1 delete begin. So it will remove 10 now. So we have only 4 now in the W linked list. If it contains only one node. Now our W linked list contains only one node. Now if I delete that, dl is empty after deleting the node, linked list is empty. Now if I comment this also, that means W linked list is completely empty. Now if I try to delete the node from that, I'll get this message dl is empty, can't delete. So next, we'll write the method for the delete end scenario. It is how we can delete the node from the end of the W linked list. So when we want to delete the node from the end of the W linked list, we need to chuck for 3 scenario, 3 steps. The first step is you need to chuck W linked list is empty or not. That is if W linked list is empty, we can't delete any node from that, right? And if W linked list is not empty, then we need to chuck the W linked list contains only one node. If W linked list contains only one node, and if I delete that, then the W linked list becomes empty. So that's why we need to write the separate condition for this case. And lastly, for the rest case, that is when W linked list contains two nodes, three nodes, four nodes or five nodes, how we can delete the last node from that W linked list. Here we are writing the method to delete the node from the end of the W linked list. In that the first case is we need to chuck W linked list is empty or not. If it is empty, then we can't delete any node from that. And if W linked list is not empty, then we need to chuck whether it contains only one node. If the W linked list contains only one node, and if I delete that, then W linked list becomes empty. That's why we need to chuck this condition. Next lastly, we need to chuck this case when W linked list contains two nodes, three nodes, four nodes, five nodes like that. Let's write the method. First we need to chuck W linked list is empty or not. How to check W linked list is empty or not? We need to chuck self.head. If it is none, that means W linked list is empty. If W linked list is empty, then I'll print a message. So in the Python file, here I'll take the method name as delete underscore end. And I'll take the parameter as self. We don't need any other parameter. Then here I'll copy this code like this. That is first we'll chuck the linked list is empty or not. So that's why I'm checking self.head is none. If it is none, I'll print this message and I'll return. Next, the first case is done. Next we need to chuck how many nodes W linked list contains. If it contains only one node, we need to write the separate code. We need to take self.head as none. If W linked list contains only one node like this, after deleting this node, head need to point to none. Right? That's why I need to take self.head as none. So for this, I'll copy this code again. Okay, here also we are doing the same right in the delete begin method. First we'll check linked list is empty or not. Next we'll chuck whether it contains only one node. After deleting that, self.head will point to none and will print a message. Next here, I'll take else part in the else part. We'll take the condition when when W linked list contains two, three, four or more than one node. How to delete the last node at that time. Let's see that. So here we can see we have W linked list which contains three nodes. Now to delete this last node, what we need to do is first we need to go to the last node. Here go to the last node. So to move to the last node, I'll take the first node as n, n is equal to self.head and using while loop, I'll travel to the last node. Here the stopping condition for for while is when this n ref becomes none. The node which contains the n ref as none. At that node, I need to stop. We did that so many times. So here I'll take n equal to self.head. Initially take the first node as n and using while loop and here I'll take n ref is not none. When next link reference of n is not none, move to the next node n equal to n dot n ref. n becomes the next node and again, we'll chuck this condition in that node. n ref is none, not not. If it is none, that means we reached the last node. If it is not none, that means we need to go to the next node. So use this next node link and move to the next node. So after executing this while loop, we'll reach to the last node. Here n will point to this now. This is n. Now what we need to do, we need to make this the last node of this n, this node. It's n ref need to point to none. It need to point to none like this. We need to make this like this. So for this to access this position, I'll take this is n now and this is the previous node. So I'll take n dot prif. So here in the prif, you can see 40000. So this is the previous node of n. So this is n dot prif dot. For this place, this is the next link reference that is n ref. I'll take this as none. So when this is n, this is the previous node of that node that is n dot prif and in that this position is dot n ref. That's why n dot prif dot n ref equal to none. Now this will point to none. So now this node is treated as it is removed from the double-inked list. When we travel from the first node, this is n. So this is the first node. It will print its data and it will go to the next node. It will print its data and here we can see it contains the reference to none. That's why it will stop. This node will be treated as it is removed from the double-inked list. So here you need to take n dot prif, the previous node of the n and its next reference is equal to none. Now we are done. So let's see how it works. So first I'll take both the methods, print LL as well as print LL reverse and here I'll take delete end. Now our double-inked list contains 10 and 4. Now if I call delete end method, it will delete 4. So we'll get 10. Here you can see 10. Now if I comment this, that means our double-inked list contains only one node that is 4. And if I delete that now, the double-inked list is empty after deleting the node and we are getting linker list is empty two times. That's because of the print LL and print LL reverse. And now if I comment this also and if I execute this, dll is empty. So can't delete and here we can see linker list is empty message. Next we'll write the method for delete by value scenario. In the delete by value method, user will choose which node you want to delete and he'll give that value of node and we need to delete that node. For example, if my double-inked list contains three nodes with 10, 20, 30 and if user mentions he want to delete 20, then we need to delete that node. Alright, so let's write the method for this scenario. Here I'll take user input as x. That is user will choose right which node he want to delete. I'll take that as x. And while writing this method, you need to be careful about few scenarios or case. The first case is when linker list is empty. wlinker list is empty. Second case is when the wlinker list contains only one node. And third is if you want to delete the first node. Next is if you want to delete the middle nodes, any nodes, middle nodes. And lastly, the last node. If you want to delete last node. So you need to be careful about these five cases while writing this method. Let's say every scenario is one by one. First let's take this case when linker list is empty. If wlinker list is empty, we can't delete any node from that, right? It is completely empty. So at that time, we'll print a message like we did in the previous two methods. So in the python file, I'll take the method name as delete by value, right? And here I need to take self and x. x is nothing but the which node you want to delete the data of the node. Next here, first step is we need to chuck the linker list is empty. If it is empty, we need to print a message. So I'll copy this and here I'll paste that. So first here, we'll chuck self head is none. If self head is none, that means linker list is empty. So I'll print this message and I'll come out of the method using return. Next, if linker list is not empty, if linker list is empty, we'll print a message. If it is not, if it is not empty, next I need to chuck whether the linker list contains only one node. If the linker list contains only one node, then first I need to chuck whether I want to delete that node or not. Here user will mention the data of the node, which he want to delete, right? So I need to compare x with the the node present in the double linker list. Now only one node is present, I need to compare that with the x. If that data is equal, then I need to delete that node. If it is not equal, then I need to print the message. The entered node is not present in the double linker list. That is, I'll explain you. If the double linker list contains only one node, first I need to chuck the data of this node with x. If it is equal to x, then I need to delete that node. If not, x is not present in the double linker list, right? For example, if I enter x as 20, here we can see I'll compare 10 with 20, it is not equal. Then that means 20 is not present in the double linker list because double linker list contains only one node that is this node. If the data of this node doesn't match with the x, that means x is not present in the double linker list, right? So first here, what I need to do is I need to compare x with the head to data, self dot head data, because this is the head. If it contains only one node, that means the first node. So head this pointing to that node. So I need to chuck like this. If x is equal to head dot data, if it is true, then I need to make head as none. Else I need to print the given node is not present in the double linker list. So next here, what we need to do, we need to chuck this condition, whether only one node is present in the double linker list. So for this, I'll chuck like this. If n reference is none to chuck whether only one node is present in the double linker list, we need to write the condition like this, right? And here inside this, I need to chuck if x is equal to equal to self dot head dot data. If it is equal, that means that is the node we want to delete. If this is true, then I want to delete that first node, the only node present in the double linker list. So I need to take self dot head is equal to none. Fine, right? Else, if it is not true, then x is not present in the double linker list. And here I'll execute return statement. Next, first we chuck whether linker list is empty. If it is empty, we'll print a message. Otherwise, we'll chuck whether the linker list contains only one node in that we'll chuck x matches with the present node. If it matches, we'll delete that node. Otherwise, we'll print the message that is x is not present in the double linker list. Next, after this, we need to chuck this condition. We need to chuck whether we are deleting the first node of the double linker list. If the double linker list doesn't contain only one node, if it contains more than one node, that means I need to chuck this condition. Whether we are deleting the first node of the double linker list, because if we are deleting the first node of the double linker list, the condition is different. So to do this, to chuck this, I'll chuck self dot head dot data, because the reference of the first node will be stored in the head. So self dot head dot data is equal to equal to x. I'll chuck like this. If it is true, that means I want to delete the first node. So to delete the first node, I need to point head here. And I need to store its reference, the this node reference as none, as we did in the delete begin method. So here, we need to chuck if self dot head dot data is equal to equal to x, whether the x is equal to equal to first node data. If it is true, that means we want to delete the first node. So I need to do this, I need to point head to the self head dot n reference, and I need to take p reference as none. If I want to delete the first node, then first I need to point the head to the next node of the first node. So next node reference will be stored in nref. So I need to take self dot head is equal to self dot head nref. Then I need to take the second node previous reference as none. Here, I need to point head here, the reference of this is stored in this nref. So I need to take self dot head is equal to self dot head dot nref. After that, it will point to here head will point to this node. Then I need to change this, right? So I need to take self dot head dot prf as none. Okay. So we are done with this condition. If it is not the first node, if I want to delete the middle nodes of the double linker list, then how to do that? So for this, if I want to delete the middle nodes of double linker list, not the first node, not the last node, middle nodes, then for that first, I need to take here return. And here I need take n is equal to self dot head. And using while loop n dot nref is not none. I need to check if x is equal to n dot data. If it is true, execute break statement. If it is not, go to the next node. So here, what I'm doing is, if I want to delete any middle nodes, I'll take the first node as n. And I'll check whether n dot nref is none. We already checked this node, but it's okay if we are doing this again. Otherwise, you instead of taking n equal to self dot head, you can take n equal to self dot head nref. You can take this as n and you can begin. But here, I won't do that. I'll just take this node as n and we'll compare its data with x. If it doesn't match, then I'll execute n equal to n dot nref. I'll take this as n and I'll again chuck 20 is equal to equal to x. If it is not, then again, I'll execute n equal to n dot nref. I'll go to the next node and I'll chuck until we'll reach the last node. When n becomes this node, hits n dot nref is none. So it won't check its data with the x because we are writing this code for middle nodes, not the last node. That's why here we took the condition as while n dot nref is not none. Here, it will again chuck the first node also, but it's okay. As I said, if you don't want to do that, you can take here, so n equal to self dot head nref and you can write this code. If x matches with the data of any middle nodes, then execute the break statement like we did in the previous tutorials, right? Now the control will come out of this while loop because of two conditions. That is when this is becomes none while n dot nref becomes none or when break statement is executed. So here I'll take the condition for that two. Here, what I'll do is first I'll take if n dot nref is not none. As I said, the control will come out of the while loop because of the two condition. That is when one is when n dot nref becomes none. Otherwise, when the break statement is executed, if n dot nref is not none, that means break statement is executed. That means we found the x. Now n is pointing to that. At that time, what we need to do is here, for example, I want to delete this node. Okay, this is x and n also pointing to here. Now I need to change this and this, right? This reference here. This is n. So this is n dot p ref dot nref. So this is the previous node. So n dot p ref and in that this is nref next node reference. So n dot p ref dot nref is equal to here, I need to store the reference of 200. That is nothing but n dot nref. And also in this position, this is nothing but this is the next node of n. So n dot nref dot in this, this is the prf previous reference. So equal to here, I need to store the reference of 1000 10th here. It is stored here. That is nothing but n dot p ref. Here n dot nref dot prf equal to n dot prf. prf dot nref equal to n dot nref. Right? Next. If n dot nref is not none, that means break statement is executed. If this condition is false, that means the control came out of the loop because of this condition. n dot nref becomes none. So here when n dot nref becomes none, that means n is pointing to the last node now. n dot nref becomes none only when n points to here. Okay. So now we need to write the condition for this. I need to check the data of n, that is the last node with the x. I need to compare that, whether it matches to the last node. Here we need to write the condition for last node. I need to check n dot data is equal to equal to x here. Here inside this, I'll take another if and I'll take n dot last node data is equal to equal to x. If it is true, if it is true means I want to delete the last node. So to delete the last node, what you need to do is you need to point this as none. You need to take this as none. So here n dot previous reference, next reference as none. Here n dot previous node nref as none. Else if it doesn't match, that means it is not x is not present in the w linker list. Okay. So now we are done. So here first I need to check whether linker list is empty. If it is not empty, then I need to check whether only one node is present in the w linker list. And here we'll check whether that data will match with the single node which is present in the w linker list. If it doesn't match, then we'll print this message. Next if w linker list contains more than one node, then again we'll execute this code. And here first we'll check whether we want to delete the first node like this. If we didn't want to delete the first node, then I'll check whether we want to delete the middle nodes. If we didn't want to delete the middle node, then I'll check whether we want to delete the last one. If all the condition fails, I'll print x is not present in the dll, the blue linker list. Okay. So let's see how it works. So first let me, so we have 10 and four in the w linker list. So next here we'll call delete by value. And I want to delete 10. So I'll mention 10. Here we can see only four. And now if I want to delete four, only 10 is present. And also if I try this with the empty linker list. So we'll get dll is empty, can't delete. And also if I give a value which is not present in the w linker list, x is not present in the w linker list. So in this way you can write the method for the deletion operation. So that's it for now guys. Thank you for watching. Don't forget to subscribe to my channel. I will meet you in next class. Till then take care.